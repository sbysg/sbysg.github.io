{
    "version": "https://jsonfeed.org/version/1",
    "title": "夢のない賢魚です",
    "subtitle": "biya",
    "icon": "http://example.com/assets/favicon.ico",
    "description": "摸鱼之道，就在其中",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/23/Linux/docker/vue3%E9%80%9F%E6%88%9010.17/Vue3%E9%80%9F%E6%88%90/",
            "url": "http://example.com/2023/10/23/Linux/docker/vue3%E9%80%9F%E6%88%9010.17/Vue3%E9%80%9F%E6%88%90/",
            "title": "",
            "date_published": "2023-10-22T17:40:23.767Z",
            "content_html": "<h1 id=\"vue3速成\"><a class=\"anchor\" href=\"#vue3速成\">#</a> Vue3 速成</h1>\n<h2 id=\"0-vue2-vs-vue3\"><a class=\"anchor\" href=\"#0-vue2-vs-vue3\">#</a> 0、Vue2 VS Vue3</h2>\n<h2 id=\"1-vue3js\"><a class=\"anchor\" href=\"#1-vue3js\">#</a> 1、Vue3.js</h2>\n<p>Vue: 是一款用于构建用户界面的 JavaScript 框架，提供了一套声明式的、组件化的编程模型</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcv\">https://cn.vuejs.org/</span></p>\n<p><strong>Vue3 特有的语法：</strong></p>\n<p><strong>1.setup：</strong></p>\n<p>vue3 中新增了 setup，它的出现是为了解决组件内容庞大后，理解和维护组件变得困难的问题。即 vue 中 data、computed、methods、watch 等内容非常多以后，同一业务逻辑的 data 中的数据和 methods 中的方法在 vue 文件中 “相隔甚远”，看代码时，经常需要根据 data 中的数据去搜索找到对应的 methods 方法，上下跳跃查看代码，非常不方便。而在 setup 中，则可以把 data 中的数据和 methods 方法写在相临的位置，方便查看和维护。</p>\n<p>开启了 setup 就不需要在定义 data 或 methods 了，直接在 script 标签写就行</p>\n<p>直接在 script 标签上使用 setup</p>\n<pre><code>&lt;!--js代码--&gt;\n&lt;script setup&gt;\n</code></pre>\n<p>**const：** 定义常量，在 vue3 中被用来定义变量或函数</p>\n<p>定义变量时，因为要保证 vue 的响应式，所以配合 ref 函数使用</p>\n<p><strong>ref 函数：</strong><br />\n作用：定义一个响应式的数据<br />\n语法: const xxx = ref (initValue)<br />\n 创建一个包含响应式数据的引用对象（reference 对象，简称 ref 对象）。<br />\nJS 中操作数据： xxx.value<br />\n 模板中读取数据：不需要.value，直接：div  /div<br />\n 备注：<br />\n接收的数据可以是：基本类型、也可以是对象类型。<br />\n基本类型的数据：响应式依然是靠 Object.defineProperty () 的 get 与 set 完成的。<br />\n对象类型的数据：内部 “求助” 了 Vue3.0 中的一个新函数 —— reactive 函数。</p>\n<p>适用于：基本类型 (数字、字符串、布尔值)</p>\n<p><strong>reactive 函数：</strong></p>\n<ul>\n<li>\n<p><code>reactive</code>  是 Vue3 中提供的实现响应式数据的方法。</p>\n</li>\n<li>\n<p>reactive 参数必须是对象 (json /arr)</p>\n</li>\n<li>\n<p>如果给 reactive 传递了其它对象</p>\n<ul>\n<li>默认情况下，修改对象无法实现界面的数据绑定更新。</li>\n<li>如果需要更新，需要进行重新赋值。(即不允许直接操作数据，需要放个新的数据来替代原数据)</li>\n</ul>\n<p>适用于 对象或数组</p>\n</li>\n</ul>\n<p>核心的语法知识：</p>\n<p>**1. 模板语法：** 插值语法</p>\n<p>语法格式：&lt;标签&gt;&lt;/ 标签 &gt;</p>\n<p>**2. 事件绑定：** 实现标签的事件的设置</p>\n<p>语法格式：&lt;标签 v-on: 事件名 =&quot;方法名&quot;&gt;&lt;/ 标签 &gt;  简写 &lt; 标签 @事件名 =&quot;方法名&quot;&gt;&lt;/ 标签 &gt;</p>\n<p>**3. 属性绑定：** 实现标签的属性的设置</p>\n<p>语法格式：&lt;标签 v-bind: 属性名 =&quot;变量名&quot;&gt;&lt;/ 标签 &gt;  简写 &lt; 标签：属性名 =&quot;变量名&quot;&gt;&lt;/ 标签 &gt;</p>\n<p>**4. 分支语法：** 实现分支语句</p>\n<p>语法格式：&lt;标签 v-if=&quot;布尔类型表达式&quot;&gt;&lt;/ 标签 &gt;</p>\n<p>**5. 循环语法：** 实现重复 集合 遍历</p>\n<p>语法格式：&lt;标签 v-for=&quot;变量名 in 数组或集合名&quot;&gt;&lt;/ 标签 &gt;</p>\n<p>**6. 双向绑定：** 实现输入标签（表单标签）的值的绑定，双向</p>\n<p>语法格式：&lt;标签 v-model=&quot;变量名&quot;&gt;&lt;/ 标签 &gt;</p>\n<p>示例代码：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!--    vue.js--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue@3/dist/vue.global.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token selector\">.dvcolor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token selector\">.dvgreen</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">&lt;!-- 标签 --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">&lt;!--    1. 插值 message 来自下面的变量 --></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>点-<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">&lt;!--    2. 事件 - 绑定 @click 点击事件 指定函数 --></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ck()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>困了点点我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">&lt;!--    3. 属性 - 绑定：属性名 --></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dvcls<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>change<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>你的心情<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 引入</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> createApp<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> Vue</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">//setup 标记 Vue3 支持 Vue3 的语法 直接定义变量、函数都可以</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">//const 常量 一般配合 ref（Vue3 语法）把一个常量变成一个对象，这个对象默认拥有属性 value</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello vue!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">const</span> num<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">const</span> dvcls<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dvcolor\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 定义 函数</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">ck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                num<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                message<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"你点我\"</span><span class=\"token operator\">+</span>num<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"次！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">var</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">change</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dvcls<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token comment\">//js 关闭定时任务</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token comment\">//js 开启定时任务</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    t<span class=\"token operator\">=</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">==</span><span class=\"token string\">\"dvcolor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                            dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"dvgreen\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                            dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"dvcolor\"</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">==</span><span class=\"token string\">\"dvcolor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                  dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"dvgreen\"</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                  dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"dvcolor\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 只有返回的上面才可以使用</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                message<span class=\"token punctuation\">,</span>ck<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">,</span>dvcls<span class=\"token punctuation\">,</span>change</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue@3/dist/vue.global.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Vue3的语法学习<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dv01<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">&lt;!--        4. 分支语句 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user.name!=null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>用户名：<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-else</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点击登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>注销登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">&lt;!--        5. 循环语句 --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>精英小组<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(n,index) in names<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>del(index)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">&lt;!--            6. 双向绑定 表单标签：输入框（输入框、单选框、复选框）、下拉框、文本域 --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>加入精英小组<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 引入</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> createApp<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> Vue</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">//setup 标记 Vue3 支持 Vue3 的语法 直接定义变量、函数都可以</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">//const 常量 一般配合 ref（Vue3 语法）把一个常量变成一个对象，这个对象默认拥有属性 value</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 变量 对象</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 变量 数组</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token string\">\"邢朋辉\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"田密\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"许阳\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>              names<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">[</span>names<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>name<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">del</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token comment\">//splice 数组中删除，参数说明：1. 从哪个索引开始删除 2. 删除几个</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>              names<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 定义函数</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>              user<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"帅帅的邢\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                user<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 只有返回的上面才可以使用</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                user<span class=\"token punctuation\">,</span>login<span class=\"token punctuation\">,</span>logout<span class=\"token punctuation\">,</span>names<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>add<span class=\"token punctuation\">,</span>del</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#dv01'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2-vite\"><a class=\"anchor\" href=\"#2-vite\">#</a> 2、Vite</h2>\n<p>Vite：是一种新型前端构建工具，能够显著提升前端开发体验</p>\n<p>脚手架，创建 Vue 项目，替代 Vue-cli</p>\n<blockquote>\n<p>Vite 需要 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">Node.js</span> 版本 14.18+，16+。然而，有些模板需要依赖更高的 Node 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 Node 版本。</p>\n<p>npm &gt;10.2.0 以上版本</p>\n<p>如果版本低，升级一下：</p>\n<p>npm install -g npm@10.2.0</p>\n</blockquote>\n<p>基于 Vite 创建 vue 项目：</p>\n<p>1.cmd 或终端执行命令</p>\n<p>npm create vite@latest</p>\n<p>如果报 npm 版本过低，需要执行 npm install -g npm@10.2.0  升级 npm 的版本</p>\n<p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017115210999.png\" alt=\"image-20231017115210999\" /></p>\n<p>2. 完成初始化</p>\n<p>分别执行：</p>\n<p>cd vue02<br />\nnpm install<br />\nnpm run dev</p>\n<p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017115330906.png\" alt=\"image-20231017115330906\" /></p>\n<p>3. 访问</p>\n<p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017115350991.png\" alt=\"image-20231017115350991\" /></p>\n<p>vite 的项目结构：</p>\n<p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017115446998.png\" alt=\"image-20231017115446998\" /></p>\n<p>vue 页面结构：</p>\n<pre><code class=\"language-vue\">&lt;!--html标签--&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;饿了么？&lt;/h1&gt;\n  &lt;/div&gt;\n  &lt;HelloWorld msg=&quot;Vite + Vue&quot; /&gt;\n&lt;/template&gt;\n&lt;!--js代码 vue3的语法--&gt;\n&lt;script setup&gt;\nimport HelloWorld from './components/HelloWorld.vue'\n\n&lt;/script&gt;\n&lt;!--css样式 美化--&gt;\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>Vue 页面使用 Vue3 语法</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;\n  &lt;h1&gt;醒醒，不能犯困！&lt;/h1&gt;\n  &lt;div&gt;\n    &lt;h1&gt;次数：&#123;&#123;count&#125;&#125;&lt;/h1&gt;\n    &lt;button @click=&quot;dj&quot;&gt;点击我，看看什么效果&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!--Vue3的写法--&gt;\n&lt;script setup&gt;\n//2.导入 Vue3中对象\nimport &#123; ref &#125; from 'vue'\n\n//3.自定义属性\ndefineProps(&#123;\n  msg: String,\n&#125;)\n//4.定义变量\nconst count = ref(0)\n//5.定义函数\nconst dj = () =&gt; &#123;\n  count.value++;\n  alert(&quot;你目前点击：&quot;+count.value);\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.read-the-docs &#123;\n  color: #888;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h2 id=\"3-vue-router\"><a class=\"anchor\" href=\"#3-vue-router\">#</a> 3、Vue-router</h2>\n<h3 id=\"31-vue-router是什么\"><a class=\"anchor\" href=\"#31-vue-router是什么\">#</a> 3.1 Vue-router 是什么</h3>\n<p>Vue-router:Vue.js 的官方路由为 Vue.js 提供富有表现力、可配置的、方便的路由</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poLw==\">https://router.vuejs.org/zh/</span></p>\n<p>作用：</p>\n<p>1. 实现 vue 页面 (组件) 的跳转</p>\n<p>2. 可以在跳转的时候携带参数</p>\n<h3 id=\"32-vue3使用vue-router\"><a class=\"anchor\" href=\"#32-vue3使用vue-router\">#</a> 3.2 Vue3 使用 Vue-router</h3>\n<p>基于 Vue-router 实现页面跳转：</p>\n<p>1. 安装 vue-router</p>\n<p>npm install vue-router@4</p>\n<p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017151206218.png\" alt=\"image-20231017151206218\" /></p>\n<p>2. 在 src 创建路由的 js 文件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>createRouter <span class=\"token keyword\">as</span> _createRouter<span class=\"token punctuation\">,</span> createWebHistory<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 导入 凡是想要通过路由跳转的，都需要在这：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 导入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 注册 设置对应 vue 组件的路径名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> study <span class=\"token keyword\">from</span> <span class=\"token string\">'../views/study.vue'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 2. 注册 设置对应 vue 组件的路径名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/study'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> study <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">_createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        routes</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017151308655.png\" alt=\"image-20231017151308655\" /></p>\n<p>3. 在 main.js 中实现路由的配置</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./style.css'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 导入路由</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./router/index.js\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 配置路由</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>4. 在 app.vue 主页 使用路由</p>\n<pre><code class=\"language-vue\">&lt;!--html标签--&gt;\n&lt;template&gt;\n  &lt;div&gt;\n&lt;!--    静态路由 to 对应路径--&gt;\n    &lt;router-link to=&quot;/study&quot;&gt;静态路由&lt;/router-link&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n&lt;!--  路由跳转的页面显示去  --&gt;\n    &lt;router-view/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;!--js代码 vue3的语法--&gt;\n&lt;script setup&gt;\n\n&lt;/script&gt;\n&lt;!--css样式 美化--&gt;\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>5. 实现一个 vue3 的页面编写</p>\n<pre><code class=\"language-vue\">&lt;!--标签 画页面--&gt;\n&lt;template&gt;\n&lt;div&gt;\n  &lt;h1&gt;学习vue3&lt;/h1&gt;\n  &lt;div&gt;\n    &lt;h1&gt;内容：&#123;&#123;str1&#125;&#125;&lt;/h1&gt;\n    &lt;button style=&quot;font-size: 30px;color: red&quot; @click=&quot;show&quot;&gt;查看内容&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!--Vue3的写法 setup--&gt;\n&lt;script setup&gt;\n//导入\nimport &#123;ref&#125; from 'vue'\n\n//定义变量\nconst str1=ref(&quot;醒醒……&quot;);\n//定义函数\nconst show=()=&gt;&#123;\n  alert(str1.value);\n&#125;\n\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"33-vue-router实现跳转的方式\"><a class=\"anchor\" href=\"#33-vue-router实现跳转的方式\">#</a> 3.3 Vue-router 实现跳转的方式</h3>\n<p>vue-router 实现页面跳转有 2 种方式：</p>\n<p>必须在页面使用：router-view (一般写在 app.vue 页面)</p>\n<p>第一种：声明式路由（静态路由）</p>\n<p>直接在 template 里面使用 router-link 标签 通过 to 属性实现页面跳转</p>\n<pre><code class=\"language-vue\">  &lt;div&gt;\n&lt;!--    静态路由 to 对应路径--&gt;\n    &lt;router-link to=&quot;/study&quot;&gt;静态路由&lt;/router-link&gt;\n  &lt;/div&gt;\n</code></pre>\n<p>第二种：编程式路由（动态路由）</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n&lt;div&gt;\n  &lt;h1&gt;动态路由&lt;/h1&gt;\n  &lt;button @click=&quot;tz&quot;&gt;点击跳转&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\n// 导入\nimport &#123;ref&#125; from 'vue'\nimport &#123; useRouter &#125; from 'vue-router'\n// 声明变量\nconst router=useRouter()\nconst tz=()=&gt;&#123;\n  //基于路由 实现页面跳转 动态路由\n  router.push(&quot;/study&quot;);\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"34-vue-router实现传值\"><a class=\"anchor\" href=\"#34-vue-router实现传值\">#</a> 3.4 Vue-router 实现传值</h3>\n<p>Vue-router 在跳转页面的时候，也可以携带数据过去</p>\n<p>有 2 种方式：</p>\n<p>第一种：path (路径)+query (查询参数)</p>\n<p>传递：router.push ({path: '/study', query: { q1: msg1.value} })</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n&lt;div&gt;\n  &lt;h1&gt;通过路径和查询参数进行传递&lt;/h1&gt;\n  &lt;input v-model=&quot;msg1&quot;&gt;\n  &lt;button @click=&quot;tz1&quot;&gt;跳转传参&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport &#123;ref&#125; from 'vue';\nimport &#123;useRouter&#125; from &quot;vue-router&quot;;\nconst router=useRouter();\nconst msg1=ref(&quot;&quot;);\nconst tz1=()=&gt;&#123;\n  //路由 跳转页面 传递参数 path+query\n  router.push(&#123; path: '/study', query: &#123; q1: msg1.value &#125; &#125;)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>获取：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> route<span class=\"token operator\">=</span><span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>query<span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">9</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr></table></figure><p>第二种：name (名称)+params (参数)</p>\n<p>路由注册的时候：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 2. 注册 设置对应 vue 组件的路径名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 通过 name+params 传值的需要，需要再路径后面：参数名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/study/:p1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'study'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> study <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>传递：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n&lt;div&gt;\n  &lt;label&gt;要传的数据：&lt;/label&gt;&lt;input v-model=&quot;msg2&quot;&gt;\n  &lt;button @click=&quot;tz2&quot;&gt;跳转传值通过参数&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport &#123;ref&#125; from 'vue'\nimport &#123;useRouter&#125; from &quot;vue-router&quot;;\n\nconst router=useRouter();\n\nconst msg2=ref(&quot;&quot;)\n\nconst tz2 = () =&gt; &#123;\n  router.push(&#123; name: 'study', params: &#123; p1:msg2.value &#125; &#125;)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>获取：</p>\n<pre><code class=\"language-vue\">&lt;!--标签 画页面--&gt;\n&lt;template&gt;\n&lt;div&gt;\n  &lt;h1&gt;学习vue3&lt;/h1&gt;\n  &lt;div&gt;\n    &lt;h1&gt;内容：&#123;&#123;str1&#125;&#125;&lt;/h1&gt;\n    &lt;button style=&quot;font-size: 30px;color: red&quot; @click=&quot;show&quot;&gt;查看内容&lt;/button&gt;\n    &lt;div&gt;\n      &lt;h1&gt;接收路由携带数据&lt;/h1&gt;\n      &lt;h1&gt;query:&#123;&#123;route.query.q1&#125;&#125;&lt;/h1&gt;\n      &lt;h1&gt;params:&#123;&#123;route.params.p1&#125;&#125;&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!--Vue3的写法 setup--&gt;\n&lt;script setup&gt;\n//导入\nimport &#123;ref&#125; from 'vue'\nimport &#123;useRoute&#125; from 'vue-router'\nconst route=useRoute();\n\nconsole.log(route.params)\n//定义变量\nconst str1=ref(&quot;醒醒……&quot;);\n//定义函数\nconst show=()=&gt;&#123;\n  alert(str1.value);\n&#125;\n\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>主要 vue3 中使用 name+params 进行传递参数，需要再注册路由的时候，通过传递的参数名，进行路径占位：path: '/study/:p1'</p>\n<p>其中 p1 就是要传递的参数名</p>\n<h2 id=\"4-pinia\"><a class=\"anchor\" href=\"#4-pinia\">#</a> 4、Pinia</h2>\n<h3 id=\"41-pinia概述\"><a class=\"anchor\" href=\"#41-pinia概述\">#</a> 4.1 Pinia 概述</h3>\n<p>Pinia 是 Vue 的存储库，实现全局变量的定义</p>\n<p>这里定义的变量信息，任何页面都可以使用，代替原来的 VueX</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waW5pYS53ZWIzZG9jLnRvcC8=\">https://pinia.web3doc.top/</span></p>\n<h3 id=\"42-pinia存储数据\"><a class=\"anchor\" href=\"#42-pinia存储数据\">#</a> 4.2 Pinia 存储数据</h3>\n<p>实现步骤：</p>\n<p>1. 依赖</p>\n<p>npm install pinia</p>\n<p>2. 实现配置</p>\n<p>在 main.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./style.css'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 导入路由</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./router/index.js\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 导入 pinia</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 实例化 pinia</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 配置路由、pinia</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3. 实现 js</p>\n<p>在 src 创建文件夹 pinia 内部创建 js 文件 index.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'store'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 定义需要共享的变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span><span class=\"token string\">'邢'</span> <span class=\"token comment\">// 定义全局变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 定义方法  设置 state 中的值 set 方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token function\">setAuthor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">author</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 定义函数 修饰变量的值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span>author<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>4. 使用</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n&lt;div&gt;\n  &lt;h1&gt;动态路由&lt;/h1&gt;\n  &lt;button @click=&quot;tz&quot;&gt;点击跳转&lt;/button&gt;\n\n  &lt;div&gt;\n&lt;!--    获取pinia中的值--&gt;\n    &lt;h1&gt;全局变量：&#123;&#123;store.author&#125;&#125;&lt;/h1&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;h1&gt;修改Pinia的值&lt;/h1&gt;\n    &lt;input v-model=&quot;a&quot;&gt;\n    &lt;button @click=&quot;set1&quot;&gt;修改作者&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\n// 导入\nimport &#123;ref&#125; from 'vue'\nimport &#123; useRouter &#125; from 'vue-router'\n//导入\nimport &#123;useStore&#125; from &quot;../pinia/index.js&quot;;\n// 声明变量\nconst router=useRouter()\n// 声明 pinia\nconst store=useStore()\nconst tz=()=&gt;&#123;\n  //基于路由 实现页面跳转 动态路由\n  router.push(&quot;/study&quot;);\n&#125;\n\nconst a=ref(&quot;&quot;);\n\nconst set1 = () =&gt; &#123;\n  //修改 pinia中的值\n  store.setAuthor(a.value);\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>获取：</p>\n<p>修改值：store.setAuthor (要修改的内容);</p>\n<h3 id=\"43-pinia实现持久化\"><a class=\"anchor\" href=\"#43-pinia实现持久化\">#</a> 4.3 Pinia 实现持久化</h3>\n<p>Pinia 默认数据存储在内存中，一旦刷新浏览器，数据就没有了，所以可以配置持久化</p>\n<p>持久化插件：pinia-plugin-persist</p>\n<p>实现步骤：</p>\n<p>1. 依赖</p>\n<p>npm install pinia-plugin-persist</p>\n<p>2. 实现配置</p>\n<p>在 main.js 中使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./style.css'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 导入路由</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./router/index.js\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 导入 pinia</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 导入 pinia 持久化 插件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> piniaPersist <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia-plugin-persist'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 设置 pinia 持久化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pinia<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>piniaPersist<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 配置路由、pinia</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3. 在 pinia 的 js 中开启持久化</p>\n<p>在 store/index.js 中</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'store'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 定义需要共享的变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span><span class=\"token string\">'邢'</span> <span class=\"token comment\">// 定义全局变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 定义方法  设置 state 中的值 set 方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token function\">setAuthor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">author</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 定义函数 修饰变量的值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span>author<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">,</span><span class=\"token literal-property property\">persist</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token literal-property property\">enabled</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//true 表示开启持久化保存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>接下来再测试，发送刷新浏览器，数据仍存在</p>\n<h2 id=\"5-vant组件库\"><a class=\"anchor\" href=\"#5-vant组件库\">#</a> 5、Vant 组件库</h2>\n<h2 id=\"6-axios\"><a class=\"anchor\" href=\"#6-axios\">#</a> 6、Axios</h2>\n<h2 id=\"7-综合案例\"><a class=\"anchor\" href=\"#7-综合案例\">#</a> 7、综合案例</h2>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/10/22/computer-science/cpp/course-1/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "url": "http://example.com/2023/10/22/computer-science/cpp/course-1/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "title": "hi biya",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<p>hello world<br />\n 人生就是折腾，让自己忙起来<br />\n花开堪折直须折，莫待无花空折枝<br />\n<span id=\"more\"></span></p>\n<h1 id=\"通过-git-clone-命令将主题下载到-theme-目录\"><a class=\"anchor\" href=\"#通过-git-clone-命令将主题下载到-theme-目录\">#</a> 通过 git clone 命令将主题下载到 theme 目录</h1>\n<p>git clone <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21paWlrdS9oZXhvLXRoZW1lLWZsZXhibG9jay5naXQ=\">https://github.com/miiiku/hexo-theme-flexblock.git</span> ./themes/flexblock</p>\n",
            "tags": [
                "docker",
                "Linux",
                "RabbitMQ",
                "Linux"
            ]
        },
        {
            "id": "http://example.com/2023/10/22/Linux/docker/RabbitMQ/RabbitMQ/",
            "url": "http://example.com/2023/10/22/Linux/docker/RabbitMQ/RabbitMQ/",
            "title": "RabbitMQ",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<p>RabbitMQ</p>\n<p>学会一下内容：</p>\n<p>1. 学会专业知识</p>\n<p>​\t各种知识点：涵盖整个开发领域</p>\n<p>2. 学会适合自己的学习方式</p>\n<p>​\t学习</p>\n<p>3. 学会解决问题</p>\n<p>​\tdebug、定位、分析</p>\n<p>4. 学会开发</p>\n<p>​\t理解需求、学会沟通</p>\n<p>SpringCloud Alibaba</p>\n<p>注册中心：nacos  作用：管理服务，实现服务的注册与发现 使用：注解 @EnableDiscoveryClient + 配置 (application)</p>\n<p>配置中心：nacos 作用： 管理配置，实现配置的动态化管理，可以不用更改代码，实现不停机更新 使用：注解 @RefreshScope + 配置 (Nacos 配置管理 新建配置 Data ID 服务名一样)+ 配置 (Bootstrap)</p>\n<p>远程调用：OpenFeign 作用：调用服务，实现服务间通信 使用：注解 @EnableFeignClients+@FeignClient</p>\n<p>网关中心：gateway 作用：网关，实现服务的聚合统一接口，对请求过滤 使用：配置 + 接口 GlobalFilter</p>\n<p>流量控制：Sentinel 作用：流控和熔断降级，流控就是流量控制，防止高并发导致服务器压力过大，熔断降级就是对核心方法的一种保护，如果核心方法出现问题可以立即响应保证可用性 使用：配置 (Sentinel 可视化 流控、熔断)</p>\n<p>链路跟踪：Sleuth+Zipkin 作用：实现微服务下一次请求的完成过程的日志记录，实现服务间的调用关系 使用：配置</p>\n<h2 id=\"一-mq\"><a class=\"anchor\" href=\"#一-mq\">#</a> 一、MQ</h2>\n<h3 id=\"11-mq\"><a class=\"anchor\" href=\"#11-mq\">#</a> 1.1 MQ</h3>\n<h3 id=\"12-rabbitmq\"><a class=\"anchor\" href=\"#12-rabbitmq\">#</a> 1.2 RabbitMQ</h3>\n<p>都可以使用这个服务器：</p>\n<p>110.40.192.129</p>\n<p>端口号：可视化页面：15672 代码中 5672</p>\n<p>账号：guest</p>\n<p>密码：guest</p>\n<h3 id=\"13-初体验\"><a class=\"anchor\" href=\"#13-初体验\">#</a> 1.3 初体验</h3>\n<p>1. 依赖 jar</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--        RabbitMQ --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2. 实现配置</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 110.40.192.129</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> guest</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> guest</pre></td></tr></table></figure><p>3. 编写代码</p>\n<p>​\t创建队列</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span> <span class=\"token comment\">// 配置 类似 beans 标签</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RabbitMQConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 创建队列</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token comment\">// IOC bean 标签</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">createQ1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"j2310-lx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t消息发送</p>\n<pre><code class=\"language-Java\">@RestController\npublic class MqSendController &#123;\n    @Resource\n    private RabbitTemplate template;\n\n    @GetMapping(&quot;send1&quot;)\n    public String send1(String msg)&#123;\n        //发送消息\n        template.convertAndSend(&quot;&quot;,&quot;j2310-lx&quot;,msg);\n        return &quot;OK&quot;;\n    &#125;\n&#125;\n</code></pre>\n<p>​\t消息接收</p>\n<pre><code class=\"language-Java\">@Slf4j\n@Component //IOC\npublic class MsgListener &#123;\n    @RabbitListener(queues = &quot;j2310-lx&quot;)\n    public void hander(String msg)&#123;\n        log.info(&quot;消费者获取消息&#123;&#125;&quot;,msg);\n    &#125;\n&#125;\n</code></pre>\n<p>4. 运行测试</p>\n<p><img data-src=\"/RabbitMQ.assets/image-20231013114715480.png\" alt=\"image-20231013114715480\" /></p>\n<p><img data-src=\"RabbitMQ.assets/image-20231013114726677.png\" alt=\"image-20231013114726677\" /></p>\n<h2 id=\"二-rabbitmq核心\"><a class=\"anchor\" href=\"#二-rabbitmq核心\">#</a> 二、RabbitMQ 核心</h2>\n<h3 id=\"21-消息模式-简单消息\"><a class=\"anchor\" href=\"#21-消息模式-简单消息\">#</a> 2.1 消息模式 - 简单消息</h3>\n<p>简单消息：</p>\n<p>特点：一个队列对应一个消费端，一个消息只能被消费 1 次</p>\n<p><img data-src=\"/RabbitMQ.assets/image-20231013141827735.png\" alt=\"image-20231013141827735\" /></p>\n<p>示例：</p>\n<p>1. 定义队列</p>\n<p>2. 发送消息 --- 到 --- 队列中</p>\n<p>3. 监听消息 --- 从 --- 队列中</p>\n<p>代码：</p>\n<pre><code class=\"language-Java\">//简单消息\n@Bean // IOC bean标签\npublic Queue createQ2()&#123;\n    return new Queue(&quot;lx-p2p-1&quot;);\n&#125;\n\n@Resource\nprivate RabbitTemplate template;\n@GetMapping(&quot;send2&quot;)\npublic String send2(String msg)&#123;\n        //发送消息\n        template.convertAndSend(&quot;&quot;,&quot;lx-p2p-1&quot;,msg);\n        return &quot;OK&quot;;\n&#125;\n \n    @RabbitListener(queues = &quot;lx-p2p-1&quot;)\n    public void hander2(String msg)&#123;\n        log.info(&quot;普通消息，消费者，获取消息，&#123;&#125;&quot;,msg);\n    &#125;\n</code></pre>\n<h3 id=\"22-消息模式-work消息\"><a class=\"anchor\" href=\"#22-消息模式-work消息\">#</a> 2.2 消息模式 - Work 消息</h3>\n<p>Work 消息：一个队列可以有多个消费端，1 个消息只能消费 1 次，多个消费者是按照轮询的形式轮流获取消息</p>\n<p>可以解决：消息堆积（发的快，消费的慢）</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231013141853817.png\" alt=\"image-20231013141853817\" /></p>\n<p>示例：</p>\n<pre><code class=\"language-Java\">//Work消息\n@Bean // IOC bean标签\npublic Queue createQ3()&#123;\n    return new Queue(&quot;lx-work-1&quot;);\n&#125;\n\n@Resource\n    private RabbitTemplate template;\n    @GetMapping(&quot;send3&quot;)\n    public String send3(String msg)&#123;\n        //发送消息\n        template.convertAndSend(&quot;&quot;,&quot;lx-work-1&quot;,msg);\n        return &quot;OK&quot;;\n    &#125;\n@RabbitListener(queues = &quot;lx-work-1&quot;)\n    public void hander3(String msg)&#123;\n        log.info(&quot;Work消息，消费者01，获取消息：&#123;&#125;&quot;,msg);\n    &#125;\n    @RabbitListener(queues = &quot;lx-work-1&quot;)\n    public void hander4(String msg)&#123;\n        log.info(&quot;Work消息，消费者02，获取消息：&#123;&#125;&quot;,msg);\n    &#125;\n</code></pre>\n<h3 id=\"23消息模式-发布订阅\"><a class=\"anchor\" href=\"#23消息模式-发布订阅\">#</a> 2.3. 消息模式 - 发布订阅</h3>\n<p>发布订阅：就是消息发送到 Exchange (交换器)，交换器再把消息发送到交换器绑定的队列上，1 个消息可以给多个消费者（多个队列中）获取</p>\n<p>Exchange: 交换器，是 RabbitMQ 一个组成，可以接收消息，然后根据交换器的类型，选择对应的匹配模式，把匹配到的消息转发到对应的队列中。</p>\n<p>交换器的类型：</p>\n<p>1.fanout 直接转发，不对消息做匹配处理</p>\n<p>2.direct 路由匹配，发送消息指定 RoutingKey (精确)，交换器绑定队列的时候，也需要指定 RoutingKey</p>\n<p>3.topic  路由匹配，发送消息指定 RoutingKey (模糊，支持 * #)，交换器绑定队列的时候，也需要指定 RoutingKey，* 一个单词 #任意个单词</p>\n<p>4.header 消息头匹配模式，发送消息的时候指定消息的请求消息头，交换器绑定队列的时候，也需要指定对应的请求消息头，any 任意一个 all 所有</p>\n<p><img data-src=\"/RabbitMQ.assets/image-20231013141938699.png\" alt=\"image-20231013141938699\" /></p>\n<p>示例：</p>\n<p>1. 创建队列</p>\n<p>2. 创建交换器</p>\n<p>3. 创建交换器和队列的绑定</p>\n<p>4. 发送消息</p>\n<p>5. 监听消息</p>\n<p>代码：</p>\n<pre><code class=\"language-Java\">@Configuration\npublic class FanoutConfig &#123;\n    //1创建队列\n    @Bean\n    public Queue createQfanout1()&#123;\n        return new Queue(&quot;q-fanout-01&quot;);\n    &#125;\n    @Bean\n    public Queue createQfanout2()&#123;\n        return new Queue(&quot;q-fanout-02&quot;);\n    &#125;\n    //2.创建交换器\n    @Bean\n    public FanoutExchange createFe()&#123;\n        return new FanoutExchange(&quot;ex-fanout-lx&quot;);\n    &#125;\n    //3.实现绑定\n    @Bean\n    public Binding createBf1(FanoutExchange fe)&#123;\n        return  BindingBuilder.bind(createQfanout1()).to(fe);\n    &#125;\n    @Bean\n    public Binding createBf2(FanoutExchange fe)&#123;\n        return  BindingBuilder.bind(createQfanout2()).to(fe);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"language-Java\">@RestController\npublic class FanoutController &#123;\n    @Resource\n    private RabbitTemplate template;\n\n    @GetMapping(&quot;fanout1&quot;)\n    public String f1(String msg)&#123;\n        template.convertAndSend(&quot;ex-fanout-lx&quot;,&quot;&quot;,msg);\n        return &quot;ok&quot;;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"language-Java\">@RabbitListener(queues = &quot;q-fanout-01&quot;)\npublic void hander5(String msg)&#123;\n    log.info(&quot;fanout消息，01队列，消费者，获取消息：&#123;&#125;&quot;,msg);\n&#125;\n@RabbitListener(queues = &quot;q-fanout-02&quot;)\npublic void hander6(String msg)&#123;\n    log.info(&quot;fanout消息，02队列，消费者02，获取消息：&#123;&#125;&quot;,msg);\n&#125;\n</code></pre>\n<p><img data-src=\"RabbitMQ.assets/image-20231013150514443.png\" alt=\"image-20231013150514443\" /></p>\n<h3 id=\"24-消息模式-路由匹配\"><a class=\"anchor\" href=\"#24-消息模式-路由匹配\">#</a> 2.4 消息模式 - 路由匹配</h3>\n<p>路由消息：消息被发送到交换器，交换器的类型为 direct，可以根据消息的路由关键字进行匹配，转发到匹配的所有的队列</p>\n<p>RoutingKey: 路由关键字，只支持精确的值</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231013142052195.png\" alt=\"image-20231013142052195\" /></p>\n<p>示例：</p>\n<p>1. 创建队列</p>\n<p>2. 创建交换器 direct</p>\n<p>3. 创建交换器和队列的绑定 指定 RK</p>\n<p>4. 发送消息 指定 RK</p>\n<p>5. 监听消息</p>\n<p>代码：</p>\n<pre><code class=\"language-Java\">@Configuration\npublic class DirectConfig &#123;\n    //1创建队列\n    @Bean\n    public Queue createQdirect1()&#123;\n        return new Queue(&quot;q-direct-01&quot;);\n    &#125;\n    @Bean\n    public Queue createQdirect2()&#123;\n        return new Queue(&quot;q-direct-02&quot;);\n    &#125;\n    @Bean\n    public Queue createQdirect3()&#123;\n        return new Queue(&quot;q-direct-03&quot;);\n    &#125;\n    //2.创建交换器\n    @Bean\n    public DirectExchange createDe()&#123;\n        return new DirectExchange(&quot;ex-direct-lx&quot;);\n    &#125;\n    //3.实现绑定\n    @Bean\n    public Binding createBd1(DirectExchange fe)&#123;\n        return  BindingBuilder.bind(createQdirect1()).to(fe).with(&quot;error&quot;);\n    &#125;\n    @Bean\n    public Binding createBd2(DirectExchange fe)&#123;\n        return  BindingBuilder.bind(createQdirect2()).to(fe).with(&quot;info&quot;);\n    &#125;\n    @Bean\n    public Binding createBd3(DirectExchange fe)&#123;\n        return  BindingBuilder.bind(createQdirect3()).to(fe).with(&quot;info&quot;);\n    &#125;\n\n&#125;\n</code></pre>\n<pre><code class=\"language-Java\">@GetMapping(&quot;direct1&quot;)\npublic String d1(String msg,String type)&#123;\n    template.convertAndSend(&quot;ex-direct-lx&quot;,type,msg);\n    return &quot;ok&quot;;\n&#125;\n</code></pre>\n<p><img data-src=\"RabbitMQ.assets/image-20231013162331523.png\" alt=\"image-20231013162331523\" /></p>\n<h3 id=\"25-消息模式-主题消息\"><a class=\"anchor\" href=\"#25-消息模式-主题消息\">#</a> 2.5 消息模式 - 主题消息</h3>\n<p>主题消息，就是交换器的类型为 Topic, 跟路由模式的消息一样，都是通过 RoutingKey 匹配队列</p>\n<p>区别：</p>\n<p>主题消息 的 RK 支持模糊</p>\n<p>特殊符号： 区分单词是通过。区分的</p>\n<p>* 一个单词，单词内容任意</p>\n<p>#任意个单词，单词内容任意</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231013142127724.png\" alt=\"image-20231013142127724\" /></p>\n<p>示例：</p>\n<p>1. 创建队列</p>\n<p>2. 创建交换器 topic</p>\n<p>3. 创建交换器和队列的绑定 指定 RK (支持模糊)</p>\n<p>4. 发送消息 指定 RK</p>\n<p>5. 监听消息</p>\n<pre><code class=\"language-Java\">@Configuration\npublic class TopicConfig &#123;\n    //1创建队列\n    @Bean\n    public Queue createQtopic1()&#123;\n        return new Queue(&quot;q-topic-01&quot;);\n    &#125;\n    @Bean\n    public Queue createQtopic2()&#123;\n        return new Queue(&quot;q-topic-02&quot;);\n    &#125;\n    //2.创建交换器\n    @Bean\n    public TopicExchange createTe()&#123;\n        return new TopicExchange(&quot;ex-topic-lx&quot;);\n    &#125;\n    //3.实现绑定\n    @Bean\n    public Binding createBt1(TopicExchange fe)&#123;\n        //* 一个单词\n        return  BindingBuilder.bind(createQtopic1()).to(fe).with(&quot;error.*&quot;);\n    &#125;\n    @Bean\n    public Binding createBt2(TopicExchange fe)&#123;\n        //# 任意个单词 0-多个\n        return  BindingBuilder.bind(createQtopic2()).to(fe).with(&quot;info.#&quot;);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"language-Java\">@RestController\npublic class TopicController &#123;\n    @Resource\n    private RabbitTemplate template;\n\n    @GetMapping(&quot;topic1&quot;)\n    public String f1(String msg,String rk)&#123;\n        template.convertAndSend(&quot;ex-topic-lx&quot;,rk,msg);\n        return &quot;ok&quot;;\n    &#125;\n&#125;\n</code></pre>\n<p><img data-src=\"RabbitMQ.assets/image-20231013164017687.png\" alt=\"image-20231013164017687\" /></p>\n<h3 id=\"26-死信延迟消息\"><a class=\"anchor\" href=\"#26-死信延迟消息\">#</a> 2.6 死信 + 延迟消息</h3>\n<p>死信：RabbitMQ 的队列中的消息，满足以下条件任意其一，就会成为死信消息</p>\n<p>​\t\t\t1. 消息被拒绝</p>\n<p>​\t\t\t2. 消息过期</p>\n<p>​\t\t\t3. 队列已满</p>\n<p>死信交换器：专门用来转发队列中的死信消息，将死信消息转发到指定的队列中</p>\n<p>我们可以通过死信 + 死信交换器实现延迟消息处理</p>\n<p>RabbitMQ 实现延迟消息处理🈶2 种方式：</p>\n<p>1. 死信 + 死信交换器 代码实现</p>\n<p>2. 延迟消息插件</p>\n<p>RabbitMQ 基于死信和死信交换器实现延迟：</p>\n<p>&lt;img src=&quot;RabbitMQ.assets/image-20231016113011364.png&quot; alt=&quot;image-20231016113011364&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>1. 定义需要的队列、交换器、绑定</p>\n<pre><code class=\"language-Java\">@Configuration\npublic class RabbitMQConfig &#123;\n    //1.创建2个队列\n    @Bean\n    public Queue createQ1()&#123;\n        //1.设置队列 内部消息有效期 设置死信交换器 设置RK\n        Map&lt;String,Object&gt; params=new HashMap&lt;&gt;();\n        //设置队列中每个消息的有效期 单位 毫秒\n        params.put(&quot;x-message-ttl&quot;,3000);\n        //设置对应的死信交换器\n        params.put(&quot;x-dead-letter-exchange&quot;,&quot;dead-ex-lx&quot;);\n        //设置交换器匹配的路由名称\n        params.put(&quot;x-dead-letter-routing-key&quot;,&quot;test&quot;);\n        return QueueBuilder.durable(&quot;dl-q01&quot;).withArguments(params).build();\n    &#125;\n    @Bean\n    public Queue createQ2()&#123;\n        return new Queue(&quot;dl-q02&quot;);\n    &#125;\n    //2.创建1个交换器（1.fanout 2.direct 3.topic 4.header）-死信交换器direct类型\n    @Bean\n    public DirectExchange createDe()&#123;\n        return new DirectExchange(&quot;dead-ex-lx&quot;);\n    &#125;\n    //3.创建1个绑定\n    @Bean\n    public Binding createBd1(DirectExchange de)&#123;\n        return BindingBuilder.bind(createQ2()).to(de).with(&quot;test&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>2. 发送消息 消息给到第一个队列</p>\n<pre><code class=\"language-Java\">@RestController\n@RequestMapping(&quot;/api/mq/&quot;)\npublic class DeadController &#123;\n    @Resource\n    private RabbitTemplate template;\n\n    @GetMapping(&quot;send&quot;)\n    public String sendDead(String msg)&#123;\n        System.err.println(&quot;发送消息，&quot;+msg+&quot;，发送时间：&quot;+System.currentTimeMillis());\n        template.convertAndSend(&quot;&quot;,&quot;dl-q01&quot;,msg);\n        return &quot;OK&quot;;\n    &#125;\n&#125;\n</code></pre>\n<p>3. 监听消息 消费 监听第二个队列</p>\n<pre><code class=\"language-Java\">@Component\npublic class DeadListener &#123;\n\n    @RabbitListener(queues = &quot;dl-q02&quot;)\n    public void hanlder(String m)&#123;\n        System.err.println(&quot;延迟消息，&quot;+m+&quot;，接收时间：&quot;+System.currentTimeMillis());\n    &#125;\n&#125;\n</code></pre>\n<p>4. 运行测试</p>\n<p><img data-src=\"/RabbitMQ.assets/image-20231016112942920.png\" alt=\"image-20231016112942920\" /></p>\n<h2 id=\"扩展\"><a class=\"anchor\" href=\"#扩展\">#</a> 扩展</h2>\n<h3 id=\"1任务调度框架\"><a class=\"anchor\" href=\"#1任务调度框架\">#</a> 1. 任务调度框架</h3>\n<p>Java 中如何实现定时任务？</p>\n<p>比如：</p>\n<p>1. 每天早上 6 点定时执行</p>\n<p>2. 每月最后一个工作日，考勤统计</p>\n<p>3. 每个月 25 号信用卡还款</p>\n<p>4. 会员生日祝福</p>\n<p>5. 每隔 3 秒，自动提醒</p>\n<p>我们可以通过任务调度框架实现上述的需求</p>\n<p>任务调度框架：可以实现定时任务，实现间隔多少时间的重复执行，实现指定日期的重复执行</p>\n<p>Java 中任务调度框架：</p>\n<p>1.Spring Task</p>\n<p>2.Quartz</p>\n<p>3.XXL-Job</p>\n<p>4. 第三云平台：阿里云 - SchedulerX 等等</p>\n<p>选择一个：Spring Task（Spring Scheduled）</p>\n<p>2 个注解 + 1 个表达式</p>\n<p>使用步骤：</p>\n<p>1. 开关类 使用注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableScheduling</span> <span class=\"token comment\">// 开启任务调度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringTask01Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringTask01Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 定义任务 - 重复执行</p>\n<pre><code class=\"language-Java\">@Component\npublic class HelloTask &#123;\n    //定时任务，需要重复执行的方法，并设置触发的规则\n    //每隔3秒，重复执行\n    //CRON表达式 就是设置定时任务的时间关系的特殊的字符串\n    //语法格式：秒 分 时 日 月 星期几 年 其中，只有年可以省略\n    @Scheduled(cron = &quot;0/3 * * * * ?&quot;)\n    public void task1()&#123;\n        System.err.println(&quot;每隔3秒，查看同桌状态！&quot;+System.currentTimeMillis());\n    &#125;\n&#125;\n</code></pre>\n<p>3. 运行查看效果</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231016101548712.png\" alt=\"image-20231016101548712\" /></p>\n<p>CRON 表达式：特殊字符串，主要用来描述时间的，用于任务调度等</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231016102801441.png\" alt=\"image-20231016102801441\" /></p>\n<p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p>\n<blockquote>\n<p>（1）* ：表示匹配该域的任意值。假如在 Minutes 域使用 *，即表示每分钟都会触发事件。</p>\n<p>（2）?：只能用在 DayofMonth 和 DayofWeek 两个域。它也匹配域的任意值，但实际不会。因为 DayofMonth 和 DayofWeek 会相互影响。</p>\n<p>例如：想在每月的 20 日触发调度，不管 20 日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?，其中最后一位只能用？，而不能使用 *，如果使用 * 表示不管星期几都会触发，实际上并不是这样。</p>\n<p>（3）-：表示范围。例如在 Minutes 域使用 5-20，表示从 5 分到 20 分钟每分钟触发一次</p>\n<p>（4）/：表示起始时间开始触发，然后每隔固定时间触发一次。例如在 Minutes 域使用 5/20，则意味着 5 分钟触发一次，而 25，45 等分别触发一次.。</p>\n<p>（5）,：表示列出枚举值。例如：在 Minutes 域使用 5,20，则意味着在 5 和 20 分每分钟触发一次。</p>\n<p>（6）L：表示最后，只能出现在 DayofWeek 和 DayofMonth 域。如果在 DayofWeek 域使用 5L，意味着在最后的一个星期四触发。</p>\n<p>（7）W：表示有效工作日 (周一到周五)，只能出现在 DayofMonth 域，系统将在离指定日期的最近的有效工作日触发事件。</p>\n<p>例如：在 DayofMonth 使用 5W，如果 5 日是星期六，则将在最近的工作日：星期五，即 4 日触发。如果 5 日是星期天，则在 6 日 (周一) 触发；如果 5 日在星期一到星期五中的一天，则就在 5 日触发。另外一点，W 的最近寻找不会跨过月份 。</p>\n<p>（8）LW：这两个字符可以连用，表示在某个月最后一个工作日。</p>\n<p>（9）#：用于确定每个月第几个星期几，只能出现在 DayofWeek 域。例如在 4#2，表示某月的第二个星期三。</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcm9uLnFxZTIuY29tLw==\">https://cron.qqe2.com/</span></p>\n<p><img data-src=\"RabbitMQ.assets/image-20231016103550581.png\" alt=\"image-20231016103550581\" /></p>\n",
            "tags": [
                "docker",
                "Linux",
                "RabbitMQ",
                "Linux"
            ]
        },
        {
            "id": "http://example.com/2023/10/22/Linux/docker/docker/4-01Docker/",
            "url": "http://example.com/2023/10/22/Linux/docker/docker/4-01Docker/",
            "title": "docker",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<h1 id=\"docker-随堂笔记\"><a class=\"anchor\" href=\"#docker-随堂笔记\">#</a> Docker - 随堂笔记</h1>\n<p>学习解决方案：</p>\n<p>第一种方案：知识点 + 教学项目 + 团队项目</p>\n<p>SSM+Vue（全家桶）</p>\n<p>传统项目</p>\n<p>第二种方案：</p>\n<p>SpringBoot+Vue（全家桶）</p>\n<p>主流，前后端分离</p>\n<p>第三种方案：</p>\n<p>基于低代码开发平台（第三方成品）二次开发</p>\n<p>基于 Guns 进行二次开发</p>\n<p>第四种方案：</p>\n<p>SpringCloud</p>\n<p>微服务架构，复杂业务、聚合、并发</p>\n<p>第一个项目：</p>\n<p>1. 把近期所学的内容，完成了整合：SSM,Vue 这套</p>\n<p>2. 学会 Git，多人协作开发</p>\n<p>3. 解决问题的能力，常见问题</p>\n<p>4. 淬炼学习能力</p>\n<p>第二个项目：</p>\n<p>1. 业务逻辑</p>\n<p>2. 第三方（需要自主研究）</p>\n<p>3. 技术栈升级</p>\n<p>第三个项目：</p>\n<p>1. 二次开发 --- 效率</p>\n<h2 id=\"一-docker\"><a class=\"anchor\" href=\"#一-docker\">#</a> 一、Docker</h2>\n<h3 id=\"11-docker\"><a class=\"anchor\" href=\"#11-docker\">#</a> 1.1 Docker</h3>\n<p>Docker 是一个开源的容器引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。</p>\n<p>容器化引擎，新型虚拟机</p>\n<p>Docker 使用 Google 公司推出的 Go 语言进行开发实现，属于操作系统层面的虚拟化技术。</p>\n<p>由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p>\n<p>用户可以方便地创建和使用容器，把自己的应用放入容器。</p>\n<p>容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>\n<p>容器就是将软件打包成标准化单元，以用于开发、交付和部署。</p>\n<p>容器的镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。</p>\n<h3 id=\"12-docker的特点\"><a class=\"anchor\" href=\"#12-docker的特点\">#</a> 1.2 Docker 的特点</h3>\n<p>轻量，在一台机器上运行的多个 Docker 容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。</p>\n<p>标准，Docker 容器基于开放式标准，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。</p>\n<p>安全，Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。</p>\n<h3 id=\"13-docker的组成\"><a class=\"anchor\" href=\"#13-docker的组成\">#</a> 1.3 Docker 的组成</h3>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303100947243.png\" alt=\"image-20230310094755104\" /></p>\n<p>镜像（ Image ）   软件安装包，是一套软件集合，需要的其他的软件都在里面，比如 Tomcat 镜像，就包含 Jdk+tomcat</p>\n<p>容器（ Container ）基于镜像安装之后的实例</p>\n<p>数据卷（Data Volumes）容器存储数据的地方，类似磁盘（虚拟的）</p>\n<p>网络（Network）可以实现容器的网络分配，每个容器都有自己的网络（ip + 端口）</p>\n<p>仓库（ Repository ）存储镜像的地方，国内建议使用第三方镜像仓库</p>\n<h3 id=\"14-docker安装\"><a class=\"anchor\" href=\"#14-docker安装\">#</a> 1.4 Docker 安装</h3>\n<p>执行命令，先查看是否有 Docker</p>\n<p>docker --version</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303100952267.png\" alt=\"image-20230310095223175\" /></p>\n<p>如果想要删除：yum -y remove docker-ce</p>\n<p>如果没有需要安装：</p>\n<p>1. 执行命令，实现 Docker 安装</p>\n<p>yum install -y yum-utils</p>\n<p>yum-config-manager --add-repo <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS9kb2NrZXItY2UvbGludXgvY2VudG9zL2RvY2tlci1jZS5yZXBv\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></p>\n<p>yum makecache fast</p>\n<p>yum -y install docker-ce</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101001414.png\" alt=\"image-20230310100129361\" /></p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101001317.png\" alt=\"image-20230310100151294\" /></p>\n<p>2. 验证</p>\n<p>docker --version</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101003454.png\" alt=\"image-20230310100313385\" /></p>\n<p>3. 启动 Docker</p>\n<p>启动：systemctl start docker</p>\n<p>停止：systemctl stop docker</p>\n<p>查看状态：systemctl status docker</p>\n<p>重启：systemctl restart docker</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101005820.png\" alt=\"image-20230310100525763\" /></p>\n<h2 id=\"二-docker命令\"><a class=\"anchor\" href=\"#二-docker命令\">#</a> 二、Docker 命令</h2>\n<h3 id=\"21-docker镜像仓库\"><a class=\"anchor\" href=\"#21-docker镜像仓库\">#</a> 2.1 Docker 镜像仓库</h3>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101006184.png\" alt=\"image-20230310100605142\" /></p>\n<p>需要配置镜像加速器：</p>\n<p>1. 执行命令，编辑文件</p>\n<p>vi /etc/docker/daemon.json</p>\n<p>2. 输入一下内容，并保存退出</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"registry-mirrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://registry.docker-cn.com\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3. 执行命令，让配置生效</p>\n<p>systemctl daemon-reload<br />\nsystemctl restart docker</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101009704.png\" alt=\"image-20230310100921628\" /></p>\n<h3 id=\"22-docker常用命令\"><a class=\"anchor\" href=\"#22-docker常用命令\">#</a> 2.2 Docker 常用命令</h3>\n<p><strong>1. 搜索镜像：docker search</strong></p>\n<p>docker search tomcat</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101048640.png\" alt=\"image-20230310104844611\" /></p>\n<p><strong>2. 查看本地镜像：docker images</strong></p>\n<p>docker images</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101049042.png\" alt=\"image-20230310104937000\" /></p>\n<p><strong>3. 下载镜像：docker pull</strong></p>\n<p>docker pull tomcat</p>\n<p>docker pull mysql:8.0</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101047385.png\" alt=\"image-20230310104750289\" /></p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101050489.png\" alt=\"image-20230310105057432\" /></p>\n<p><strong>4. 创建容器：docker create</strong></p>\n<p>docker create --name tomcat8081 -p 8081:8080 tomcat</p>\n<p>参数说明：</p>\n<p>1.--name 为容器起个名字</p>\n<p>2.-p 设置端口号 访问端口号：软件本身的端口号</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101054894.png\" alt=\"image-20230310105418847\" /></p>\n<p><strong>5. 创建并运行容器：docker run</strong></p>\n<p>docker run -d --name tomcat8082 -p 8082:8080 tomcat</p>\n<p>参数说明：</p>\n<p>1.-d 后台启动</p>\n<p>2.--name 为容器起个名字</p>\n<p>3.-p 设置端口号 访问端口号：软件本身的端口号</p>\n<p>run 命令：1. 镜像不存在，会自动下载 2. 创建容器 3. 启动容器</p>\n<p>等价于：pull+create+start 命令组合</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101059021.png\" alt=\"image-20230310105944985\" /></p>\n<p><strong>6. 启动容器：docker start</strong></p>\n<p>docker start tomcat8081</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101100596.png\" alt=\"image-20230310110042546\" /></p>\n<p><strong>7. 停止容器：docker stop</strong></p>\n<p>docker stop tomcat8081</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101100467.png\" alt=\"image-20230310110018425\" /></p>\n<p><strong>8. 删除容器：docker rm</strong></p>\n<p>docker rm tomcat8081</p>\n<p><em>注意：删除容器，容器必须先停止</em></p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101102238.png\" alt=\"image-20230310110228205\" /></p>\n<p><strong>9. 查看容器：docker ps</strong></p>\n<p>docker ps -a 查看创建的所有的容器</p>\n<p>docker ps 查看运行中的容器</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101056623.png\" alt=\"image-20230310105626567\" /></p>\n<p><strong>10. 删除镜像：docker rmi</strong></p>\n<p>docker rmi tomcat:8.5</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101109031.png\" alt=\"image-20230310110947965\" /></p>\n<p><strong>11. 查看容器日志：docker logs</strong></p>\n<p>docker logs tomcat8082</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101103616.png\" alt=\"image-20230310110314580\" /></p>\n<p><strong>12. 进入到容器内部：docker exec</strong></p>\n<p>docker exec -it tomcat8082 bash</p>\n<p>参数说明：</p>\n<p>1.-it 交互</p>\n<p>2.bash 命令</p>\n<p>退出容器，采用 exit</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101105264.png\" alt=\"image-20230310110510207\" /></p>\n<p><strong>13. 查看容器详情：docker inspect</strong></p>\n<p>docker inspect tomcat8082</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101107971.png\" alt=\"image-20230310110749928\" /></p>\n<h2 id=\"三-docker命令配置环境\"><a class=\"anchor\" href=\"#三-docker命令配置环境\">#</a> 三、Docker 命令配置环境</h2>\n<p>按部就班</p>\n<h3 id=\"31-docker配置tomcat\"><a class=\"anchor\" href=\"#31-docker配置tomcat\">#</a> 3.1 Docker 配置 Tomcat</h3>\n<p><strong>1. 创建文件夹，作为映射文件夹</strong></p>\n<p>mkdir -p /usr/docker/tomcat8081/webapps</p>\n<p>mkdir -p /usr/docker/tomcat8081/logs</p>\n<p><strong>2. 执行命令，创建 Tomcat 容器</strong></p>\n<p>docker run -d --name tomcat8081 -p 8081:8080 -v /usr/docker/tomcat8081/webapps:/usr/local/tomcat/webapps -v /usr/docker/tomcat8081/logs:/usr/local/tomcat/logs  tomcat:9.0.33</p>\n<p>参数说明：</p>\n<p>1.-d 后台启动</p>\n<p>2.--name 容器的名称 (唯一)</p>\n<p>3.-p 映射端口号设置 格式：访问端口号：软件本身端口号</p>\n<p>4.-v 映射路径设置  格式：真实路径：容器内部的默认路径</p>\n<p><em>注意：上述的命令是一个命令，不能换行！</em></p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101115501.png\" alt=\"image-20230310111526443\" /></p>\n<p><strong>3. 访问测试</strong></p>\n<p>需要在 /usr/docker/tomcat8081/webapps 创建文件夹 ROOT, 同时在 ROOT 里面创建 index.html</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEwMS40My4xOTUuNDo4MDgxLw==\">http://101.43.195.4:8081/</span></p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101121046.png\" alt=\"image-20230310112112990\" /></p>\n<h3 id=\"32-docker配置mysql\"><a class=\"anchor\" href=\"#32-docker配置mysql\">#</a> 3.2 Docker 配置 Mysql</h3>\n<p><strong>1. 创建文件夹</strong></p>\n<p>mkdir -p /usr/docker/mysql3307/conf</p>\n<p>mkdir -p /usr/docker/mysql3307/data</p>\n<p>同时在 conf 目录下，创建 my.cnf 文件</p>\n<p>vim /usr/docker/mysql3307/conf/my.cnf</p>\n<p>输入以下内容：</p>\n<pre><code>[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\nsymbolic-links=0\nlog-error=/var/log/mysqld.log\npid-file=/var/run/mysqld/mysqld.pid\nlower_case_table_names=1\n</code></pre>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101131458.png\" alt=\"image-20230310113124410\" /></p>\n<p><strong>2. 执行命令，创建 Mysql 容器</strong></p>\n<p>docker run -d --name mysql3307 -p 3307:3306 -v /usr/docker/mysql3307/conf/my.cnf:/etc/mysql/my.cnf -v /usr/docker/mysql3307/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=qfjava  mysql:5.7</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101131559.png\" alt=\"image-20230310113104518\" /></p>\n<p><strong>3. 连接测试</strong></p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101130552.png\" alt=\"image-20230310113026490\" /></p>\n<h3 id=\"33-docker配置redis\"><a class=\"anchor\" href=\"#33-docker配置redis\">#</a> 3.3 Docker 配置 Redis</h3>\n<p>1. 创建文件夹</p>\n<p>mkdir -p /usr/docker/redis6379/data</p>\n<p>mkdir -p /usr/docker/redis6379/conf</p>\n<p>vim /usr/docker/redis6379/conf/redis.conf</p>\n<p>输入以下内容：</p>\n<pre><code>requirepass 123456\n</code></pre>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101147744.png\" alt=\"image-20230310114707692\" /></p>\n<p>2. 执行命令，创建容器</p>\n<p>docker run -d --name redis6380 -p 6380:6379  -v /usr/docker/redis6379/conf/redis.conf:/etc/redis/redis.conf -v /usr/docker/redis6379/data:/data  redis:7.0.9 redis-server /etc/redis/redis.conf</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101146621.png\" alt=\"image-20230310114644564\" /></p>\n<p>3. 访问测试</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101513112.png\" alt=\"image-20230310151336038\" /></p>\n<p data,conf,log=\"\">mkdir -p /usr/docker/rabbitmq5673/</p>\n<p>chmod -R 777 /usr/docker/rabbitmq5673 #   授权</p>\n<p>docker run -d --name rabbitmq5673-p 15672:15672 -p 5673:5672 rabbitmq:management -v /usr/docker/rabbitmq5673/data:/etc/rabbitmq -v /usr/docker/rabbitmq5673/conf:/etc/rabbitmq</p>\n<h2 id=\"四-docker-compose\"><a class=\"anchor\" href=\"#四-docker-compose\">#</a> 四、Docker-Compose</h2>\n<h3 id=\"41-docker-compose\"><a class=\"anchor\" href=\"#41-docker-compose\">#</a> 4.1 Docker-Compose</h3>\n<p>Docker-Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，可以使用 YML 文件来配置应用程序需要的所有容器。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有容器。</p>\n<p>Compose 使用的三个步骤：</p>\n<ul>\n<li>使用 Dockerfile 定义应用程序的环境。</li>\n<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们就可以在隔离环境中一起运行。</li>\n<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>\n</ul>\n<p>容器编排技术，可以一次性创建多个容器，通过自定义 yml 文件</p>\n<p>比如 Docker-Compose 更高级的是 K8s（<span class=\"exturl\" data-url=\"aHR0cDovL2t1YmVybmV0ZXMucDJocC5jb20vJUVGJUJDJTg5\">http://kubernetes.p2hp.com/）</span></p>\n<h3 id=\"42-docker-compose作用\"><a class=\"anchor\" href=\"#42-docker-compose作用\">#</a> 4.2 Docker-Compose 作用</h3>\n<p>可以通过一定语法格式，定义要创建的容器的 yml 文件，然后通过 up 命令，解析 yml 文件，最终可以创建多个容器</p>\n<p>Docker-Compose 的 yml 文件的语法格式：</p>\n<p>yml 文件使用 key: value 方式来指定配置信息 ，key: value 冒号后面必须有个空格</p>\n<p>配置信息通过缩进表示层级关系，缩进使用的是两个空格，不是制表符</p>\n<h3 id=\"43-docker-compose安装\"><a class=\"anchor\" href=\"#43-docker-compose安装\">#</a> 4.3 Docker-Compose 安装</h3>\n<p>1. 下载</p>\n<p>curl -L <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nZXQuZGFvY2xvdWQuaW8vZG9ja2VyL2NvbXBvc2UvcmVsZWFzZXMvZG93bmxvYWQvMS4yNi4yL2RvY2tlci1jb21wb3NlLSU2MHVuYW1l\">https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname</span> -s <code>-</code> uname -m` &gt; /usr/local/bin/docker-compose</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101451285.png\" alt=\"image-20230310145114231\" /></p>\n<p>2. 设置权限</p>\n<p>chmod 777 /usr/local/bin/docker-compose</p>\n<p>3. 验证</p>\n<p>docker-compose -version</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101452965.png\" alt=\"image-20230310145203934\" /></p>\n<h2 id=\"五-docker-compose配置环境\"><a class=\"anchor\" href=\"#五-docker-compose配置环境\">#</a> 五、Docker-Compose 配置环境</h2>\n<h3 id=\"51-docker-compose配置tomcat\"><a class=\"anchor\" href=\"#51-docker-compose配置tomcat\">#</a> 5.1 Docker-Compose 配置 Tomcat</h3>\n<p><strong>1. 准备文件夹</strong></p>\n<p>mkdir -p /usr/docker/tomcat8801/webapps</p>\n<p>mkdir -p /usr/docker/tomcat8802/webapps</p>\n<p>mkdir -p /usr/docker/tomcat8803/webapps</p>\n<p><strong>2. 创建 yml 文件</strong></p>\n<p>vim /usr/local/tomcat3.yml</p>\n<p>内容如下所示：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">tomcat1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>9.0.33</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> tomcat8801</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> 8801<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">-</span> /usr/docker/tomcat8801/webapps<span class=\"token punctuation\">:</span>/usr/local/tomcat/webapps</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">tomcat2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>9.0.33</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> tomcat8802</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">-</span> 8802<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">-</span> /usr/docker/tomcat8802/webapps<span class=\"token punctuation\">:</span>/usr/local/tomcat/webapps</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token key atrule\">tomcat3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>9.0.33</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> tomcat8803</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">-</span> 8803<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">-</span> /usr/docker/tomcat8803/webapps<span class=\"token punctuation\">:</span>/usr/local/tomcat/webapps</pre></td></tr></table></figure><p><strong>3. 执行创建对应的容器</strong></p>\n<p>docker-compose -f /usr/local/tomcat3.yml   up  -d</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101502058.png\" alt=\"image-20230310150210015\" /></p>\n<p><strong>4. 访问测试</strong></p>\n<p>在对应的 webapps 创建文件夹 ROOT, 在 test 创建 index.html 文件</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEwMS40My4xOTUuNDo4ODAx\">http://101.43.195.4:8801</span></p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202306061027011.png\" alt=\"image-20230606102736949\" /></p>\n<h3 id=\"51-docker-compose配置mysql\"><a class=\"anchor\" href=\"#51-docker-compose配置mysql\">#</a> 5.1 Docker-Compose 配置 Mysql</h3>\n<p>1. 创建文件夹</p>\n<p>mkdir -p /usr/docker/mysql3308/conf</p>\n<p>mkdir -p /usr/docker/mysql3309/conf</p>\n<p>mkdir -p /usr/docker/mysql3310/conf</p>\n<p>以此类推创建对应的 my.cnf 文件</p>\n<p>2. 创建对应的 yml 文件</p>\n<p>vim /usr/local/mysql3.yml</p>\n<p>内容如下所示：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">mysql1</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 服务的名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always   <span class=\"token comment\"># 代表只要 docker 启动，那么这个容器就跟着一起启动</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>  <span class=\"token comment\"># 指定镜像路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mysql3308  <span class=\"token comment\"># 指定容器名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> 3308<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>   <span class=\"token comment\">#  指定端口号的映射</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> root   <span class=\"token comment\"># 指定 MySQL 的 ROOT 用户登录密码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai        <span class=\"token comment\"># 指定时区</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token punctuation\">-</span> /usr/docker/mysql3308/conf/my.cnf<span class=\"token punctuation\">:</span>/etc/mysql/my.cnf    <span class=\"token comment\"># 映射数据卷</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">mysql2</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 服务的名称</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always   <span class=\"token comment\"># 代表只要 docker 启动，那么这个容器就跟着一起启动</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>  <span class=\"token comment\"># 指定镜像路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mysql3309  <span class=\"token comment\"># 指定容器名称</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">-</span> 3309<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>   <span class=\"token comment\">#  指定端口号的映射</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> root   <span class=\"token comment\"># 指定 MySQL 的 ROOT 用户登录密码</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai        <span class=\"token comment\"># 指定时区</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     <span class=\"token punctuation\">-</span> /usr/docker/mysql3309/conf/my.cnf<span class=\"token punctuation\">:</span>/etc/mysql/my.cnf    <span class=\"token comment\"># 映射数据卷</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token key atrule\">mysql3</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 服务的名称</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always   <span class=\"token comment\"># 代表只要 docker 启动，那么这个容器就跟着一起启动</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>  <span class=\"token comment\"># 指定镜像路径</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mysql3310  <span class=\"token comment\"># 指定容器名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">-</span> 3310<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>   <span class=\"token comment\">#  指定端口号的映射</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> root   <span class=\"token comment\"># 指定 MySQL 的 ROOT 用户登录密码</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai        <span class=\"token comment\"># 指定时区</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     <span class=\"token punctuation\">-</span> /usr/docker/mysql3310/conf/my.cnf<span class=\"token punctuation\">:</span>/etc/mysql/my.cnf    <span class=\"token comment\"># 映射数据卷</span></pre></td></tr></table></figure><p>3. 执行命令，创建容器</p>\n<p>docker-compose -f /usr/local/mysql3.yml   up  -d</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202303101509818.png\" alt=\"image-20230310150959767\" /></p>\n<p>4. 连接测试</p>\n<p><img data-src=\"https://codingsir.oss-cn-hangzhou.aliyuncs.com/202306061031081.png\" alt=\"image-20230606103139012\" /></p>\n",
            "tags": [
                "docker",
                "Linux",
                "docker"
            ]
        },
        {
            "id": "http://example.com/2023/10/21/hello-world/",
            "url": "http://example.com/2023/10/21/hello-world/",
            "title": "Hello World",
            "date_published": "2023-10-21T15:56:39.377Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}