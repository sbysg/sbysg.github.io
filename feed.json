{
    "version": "https://jsonfeed.org/version/1",
    "title": "夢のない賢魚です",
    "subtitle": "biya",
    "icon": "https://sbysg.github.io/assets/favicon.ico",
    "description": "摸鱼之道，就在其中",
    "home_page_url": "https://sbysg.github.io",
    "items": [
        {
            "id": "https://sbysg.github.io/2023/10/22/third-apis/minio/%E4%B8%8A%E9%97%A8%E5%85%BB%E8%80%81-%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD-%E7%9F%AD%E4%BF%A1/",
            "url": "https://sbysg.github.io/2023/10/22/third-apis/minio/%E4%B8%8A%E9%97%A8%E5%85%BB%E8%80%81-%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD-%E7%9F%AD%E4%BF%A1/",
            "title": "sms",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<h3 id=\"短信\"><a class=\"anchor\" href=\"#短信\">#</a> 短信</h3>\n<p>阿里云 - 短信服务 费用 5 分</p>\n<p><img data-src=\"%E4%B8%8A%E9%97%A8%E5%85%BB%E8%80%81-%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD.assets/image-20231019114707641.png\" alt=\"image-20231019114707641\" /></p>\n<p>短信基本上都需要</p>\n<p>阿里云 - 短信服务使用步骤：</p>\n<p>1. 签名 短信是哪个公司发起的，短信需要承担责任，要求先申请签名，还需要资质认证</p>\n<p><img data-src=\"%E4%B8%8A%E9%97%A8%E5%85%BB%E8%80%81-%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD.assets/image-20231019114437853.png\" alt=\"image-20231019114437853\" /></p>\n<p>2. 模板 约定短信内容，不能乱发内容</p>\n<p><img data-src=\"%E4%B8%8A%E9%97%A8%E5%85%BB%E8%80%81-%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD.assets/image-20231019114553312.png\" alt=\"image-20231019114553312\" /></p>\n<p>3. 短信设置 防止盗刷</p>\n<p><img data-src=\"%E4%B8%8A%E9%97%A8%E5%85%BB%E8%80%81-%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD.assets/image-20231019114737958.png\" alt=\"image-20231019114737958\" /></p>\n<p>4. 发送短信</p>\n<p><img data-src=\"%E4%B8%8A%E9%97%A8%E5%85%BB%E8%80%81-%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD.assets/image-20231019114955470.png\" alt=\"image-20231019114955470\" /></p>\n<p>5. 封装工具类</p>\n<p>1. 依赖 jar</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>dysmsapi20170525<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.24<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2. 编写工具类</p>\n<pre><code class=\"language-Java\">public class AliSmsUtil &#123;\n    private static final String ID=&quot;&quot;;\n    private static final String KEY=&quot;&quot;;\n    private static Client client;\n\n    static &#123;\n        Config config = new Config()\n                // 必填，您的 AccessKey ID\n                .setAccessKeyId(ID)\n                // 必填，您的 AccessKey Secret\n                .setAccessKeySecret(KEY);\n        config.endpoint = &quot;dysmsapi.aliyuncs.com&quot;;\n        try &#123;\n            client=new Client(config);\n        &#125; catch (Exception e) &#123;\n            throw new RuntimeException(e);\n        &#125;\n    &#125;\n\n    /**\n     * 发送短信验证码\n     * @param phone 手机号\n     * @param code 验证码*/\n    public static boolean sendCode(String phone,String code)&#123;\n        SendSmsRequest request = new SendSmsRequest()\n                .setPhoneNumbers(phone)\n                .setSignName(&quot;来自邢朋辉的短信&quot;)\n                .setTemplateCode(&quot;SMS_115250125&quot;)\n                .setTemplateParam(&quot;&#123;\\&quot;code\\&quot;:\\&quot;&quot;+code+&quot;\\&quot;&#125;&quot;);\n        try &#123;\n            //发送短信\n            SendSmsResponse response=client.sendSmsWithOptions(request, new RuntimeOptions());\n            return response.body.code.equals(&quot;OK&quot;);\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n            return false;\n        &#125;\n    &#125;\n\n&#125;\n</code></pre>\n",
            "tags": [
                "第三方api",
                "sms"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/database/no-sql/redis/Java%E9%9D%A2%E8%AF%95%E9%A2%98-07-Redis/",
            "url": "https://sbysg.github.io/2023/10/22/database/no-sql/redis/Java%E9%9D%A2%E8%AF%95%E9%A2%98-07-Redis/",
            "title": "redis",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<h1 id=\"java面试题-redis\"><a class=\"anchor\" href=\"#java面试题-redis\">#</a> Java 面试题 - Redis</h1>\n<h2 id=\"redis\"><a class=\"anchor\" href=\"#redis\">#</a> Redis</h2>\n<h3 id=\"1-redis是什么简述它的优缺点\"><a class=\"anchor\" href=\"#1-redis是什么简述它的优缺点\">#</a> 1. Redis 是什么？简述它的优缺点？</h3>\n<p>Redis 本质上是一个 Key-Value 类型的内存数据库，很像 Memcached，整个数据库加载在内存当中操作，定期通过异步操作把数据库中的数据 flush 到硬盘上进行保存。</p>\n<p>因为是纯内存操作，Redis 的性能非常出色，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value 数据库。</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>读写性能极高， Redis 能读的速度是 110000 次 /s，写的速度是 81000 次 /s。</li>\n<li>支持数据持久化，支持 AOF 和 RDB 两种持久化方式。</li>\n<li>支持事务， Redis 的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过 MULTI 和 EXEC 指令包起来。</li>\n<li>数据结构丰富，除了支持 string 类型的 value 外，还支持 hash、set、zset、list 等数据结构。</li>\n<li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</li>\n<li>丰富的特性 – Redis 还支持 publish/subscribe， 通知， key 过期等特性。</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。</li>\n<li>主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。</li>\n</ul>\n<h3 id=\"2-redis为什么这么快\"><a class=\"anchor\" href=\"#2-redis为什么这么快\">#</a> 2. Redis 为什么这么快？</h3>\n<ul>\n<li>\n<p>内存存储：Redis 是使用内存 (in-memeroy) 存储，没有磁盘 IO 上的开销。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O (1)。</p>\n</li>\n<li>\n<p>单线程实现（ Redis 6.0 以前）：Redis 使用单个线程处理请求，避免了多个线程之间线程切换和锁资源争用的开销。注意：单线程是指的是在核心网络模型中，网络请求模块使用一个线程来处理，即一个线程处理所有网络请求。</p>\n</li>\n<li>\n<p>非阻塞 IO：Redis 使用多路复用 IO 技术，将 epoll 作为 I/O 多路复用技术的实现，再加上 Redis 自身的事件处理模型将 epoll 中的连接、读写、关闭都转换为事件，不在网络 I/O 上浪费过多的时间。</p>\n</li>\n<li>\n<p>优化的数据结构：Redis 有诸多可以直接应用的优化数据结构的实现，应用层可以直接使用原生的数据结构提升性能。</p>\n</li>\n<li>\n<p>使用底层模型不同：Redis 直接自己构建了 VM (虚拟内存) 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。</p>\n<blockquote>\n<p>Redis 的 VM (虚拟内存) 机制就是暂时把不经常访问的数据 (冷数据) 从内存交换到磁盘中，从而腾出宝贵的内存空间用于其它需要访问的数据 (热数据)。通过 VM 功能可以实现冷热数据分离，使热数据仍在内存中、冷数据保存到磁盘。这样就可以避免因为内存不足而造成访问速度下降的问题。</p>\n<p>Redis 提高数据库容量的办法有两种：一种是可以将数据分割到多个 RedisServer 上；另一种是使用虚拟内存把那些不经常访问的数据交换到磁盘上。<strong>需要特别注意的是 Redis 并没有使用 OS 提供的 Swap，而是自己实现。</strong></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3-redis相比memcached有哪些优势\"><a class=\"anchor\" href=\"#3-redis相比memcached有哪些优势\">#</a> 3. Redis 相比 Memcached 有哪些优势？</h3>\n<ul>\n<li>\n<p>数据类型：Memcached 所有的值均是简单的字符串，Redis 支持更为丰富的数据类型，支持 string (字符串)，list (列表)，Set (集合)、Sorted Set (有序集合)、Hash (哈希) 等。</p>\n</li>\n<li>\n<p>持久化：Redis 支持数据落地持久化存储，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。 memcache 不支持数据持久存储 。</p>\n</li>\n<li>\n<p>集群模式：Redis 提供主从同步机制，以及 Cluster 集群部署能力，能够提供高可用服务。Memcached 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据</p>\n</li>\n<li>\n<p>性能对比：Redis 的速度比 Memcached 快很多。</p>\n</li>\n<li>\n<p>网络 IO 模型：Redis 使用单线程的多路 IO 复用模型，Memcached 使用多线程的非阻塞 IO 模式。</p>\n</li>\n<li>\n<p>Redis 支持服务器端的数据操作：Redis 相比 Memcached 来说，拥有更多的数据结构和并支持更丰富的数据操作，通常在 Memcached 里，你需要将数据拿到客户端来进行类似的修改再 set 回去。</p>\n<p>这大大增加了网络 IO 的次数和数据体积。在 Redis 中，这些复杂的操作通常和一般的 GET/SET 一样高效。所以，如果需要缓存能够支持更复杂的结构和操作，那么 Redis 会是不错的选择。</p>\n</li>\n</ul>\n<h3 id=\"4-为什么要用-redis-做缓存\"><a class=\"anchor\" href=\"#4-为什么要用-redis-做缓存\">#</a> 4. 为什么要用 Redis 做缓存？</h3>\n<p><strong>从高并发上来说：</strong></p>\n<ul>\n<li>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</li>\n</ul>\n<p><strong>从高性能上来说：</strong></p>\n<ul>\n<li>用户第一次访问数据库中的某些数据。 因为是从硬盘上读取的所以这个过程会比较慢。将该用户访问的数据存在缓存中，下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据。</li>\n</ul>\n<h3 id=\"5-为什么要用-redis-而不用-mapguava-做缓存\"><a class=\"anchor\" href=\"#5-为什么要用-redis-而不用-mapguava-做缓存\">#</a> 5. 为什么要用 Redis 而不用 map/guava 做缓存？</h3>\n<p>缓存分为本地缓存和分布式缓存。以 java 为例，使用自带的 map 或者 guava 实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。</p>\n<p>使用 Redis 或 memcached 之类的称为分布式缓存，在多实例的情况下，各实例共用一份缓存数据，缓存具有一致性。缺点是需要保持 Redis 或 memcached 服务的高可用，整个程序架构上较为复杂。</p>\n<p>对比:</p>\n<ul>\n<li>Redis 可以用几十 G 内存来做缓存，Map 不行，一般 JVM 也就分几个 G 数据就够大了；</li>\n<li>Redis 的缓存可以持久化，Map 是内存对象，程序一重启数据就没了；</li>\n<li>Redis 可以实现分布式的缓存，Map 只能存在创建它的程序里；</li>\n<li>Redis 可以处理每秒百万级的并发，是专业的缓存服务，Map 只是一个普通的对象；</li>\n<li>Redis 缓存有过期机制，Map 本身无此功能；Redis 有丰富的 API，Map 就简单太多了；</li>\n<li>Redis 可单独部署，多个项目之间可以共享，本地内存无法共享；</li>\n<li>Redis 有专门的管理工具可以查看缓存数据。</li>\n</ul>\n<h3 id=\"6-redis的常用场景有哪些\"><a class=\"anchor\" href=\"#6-redis的常用场景有哪些\">#</a> 6. Redis 的常用场景有哪些？</h3>\n<p><strong>1、缓存</strong></p>\n<p>缓存现在几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力。Redis 提供了键过期功能，也提供了灵活的键淘汰策略，所以，现在 Redis 用在缓存的场合非常多。</p>\n<p><strong>2、排行榜</strong></p>\n<p>很多网站都有排行榜应用的，如京东的月度销量榜单、商品按时间的上新排行榜等。Redis 提供的有序集合数据类构能实现各种复杂的排行榜应用。</p>\n<p><strong>3、计数器</strong></p>\n<p>什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给 + 1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。Redis 提供的 incr 命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。</p>\n<p><strong>4、分布式会话</strong></p>\n<p>集群模式下，在应用不多的情况下一般使用容器自带的 session 复制功能就能满足，当应用增多相对复杂的系统中，一般都会搭建以 Redis 等内存数据库为中心的 session 服务，session 不再由容器管理，而是由 session 服务及内存数据库管理。</p>\n<p><strong>5、分布式锁</strong></p>\n<p>在很多互联网公司中都使用了分布式技术，分布式技术带来的技术挑战是对同一个资源的并发访问，如全局 ID、减库存、秒杀等场景，并发量不大的场景可以使用数据库的悲观锁、乐观锁来实现，但在并发量高的场合中，利用数据库锁来控制资源的并发访问是不太理想的，大大影响了数据库的性能。可以利用 Redis 的 setnx 功能来编写分布式的锁，如果设置返回 1 说明获取锁成功，否则获取锁失败，实际应用中要考虑的细节要更多。</p>\n<p><strong>6、 社交网络</strong></p>\n<p>点赞、踩、关注 / 被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常来说比较大，而且传统的关系数据库类型不适合存储这种类型的数据，Redis 提供的哈希、集合等数据结构能很方便的的实现这些功能。如在微博中的共同好友，通过 Redis 的 set 能够很方便得出。</p>\n<p><strong>7、最新列表</strong></p>\n<p>Redis 列表结构，LPUSH 可以在列表头部插入一个内容 ID 作为关键字，LTRIM 可用来限制列表的数量，这样列表永远为 N 个 ID，无需查询最新的列表，直接根据 ID 去到对应的内容页即可。</p>\n<p><strong>8、消息系统</strong></p>\n<p>消息队列是大型网站必用中间件，如 ActiveMQ、RabbitMQ、Kafka 等流行的消息队列中间件，主要用于业务解耦、流量削峰及异步处理实时性低的业务。Redis 提供了发布 / 订阅及阻塞队列功能，能实现一个简单的消息队列系统。另外，这个不能和专业的消息中间件相比。</p>\n<h3 id=\"7-redis的数据类型有哪些\"><a class=\"anchor\" href=\"#7-redis的数据类型有哪些\">#</a> 7. Redis 的数据类型有哪些？</h3>\n<p>有五种常用数据类型：String、Hash、Set、List、SortedSet。以及三种特殊的数据类型：Bitmap、HyperLogLog、Geospatial ，其中 HyperLogLog、Bitmap 的底层都是 String 数据类型，Geospatial 的底层是 Sorted Set 数据类型。</p>\n<p><strong>五种常用的数据类型</strong>：</p>\n<p>1、String：String 是最常用的一种数据类型，普通的 key- value 存储都可以归为此类。其中 Value 既可以是数字也可以是字符串。使用场景：常规 key-value 缓存应用。常规计数：微博数， 粉丝数。</p>\n<p>2、Hash：Hash 是一个键值 (key =&gt; value) 对集合。Redishash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象，并且可以像数据库中 update 一个属性一样只修改某一项属性值。</p>\n<p>3、Set：Set 是一个无序的天然去重的集合，即 Key-Set。此外还提供了交集、并集等一系列直接操作集合的方法，对于求共同好友、共同关注什么的功能实现特别方便。</p>\n<p>4、List：List 是一个有序可重复的集合，其遵循 FIFO 的原则，底层是依赖双向链表实现的，因此支持正向、反向双重查找。通过 List，我们可以很方面的获得类似于最新回复这类的功能实现。</p>\n<p>5、SortedSet：类似于 java 中的 TreeSet，是 Set 的可排序版。此外还支持优先级排序，维护了一个 score 的参数来实现。适用于排行榜和带权重的消息队列等场景。</p>\n<p><strong>三种特殊的数据类型</strong>：</p>\n<p>1、Bitmap：位图，Bitmap 想象成一个以位为单位数组，数组中的每个单元只能存 0 或者 1，数组的下标在 Bitmap 中叫做偏移量。使用 Bitmap 实现统计功能，更省空间。如果只需要统计数据的二值状态，例如商品有没有、用户在不在等，就可以使用 Bitmap，因为它只用一个 bit 位就能表示 0 或 1。</p>\n<p>2、Hyperloglog。HyperLogLog 是一种用于统计基数的数据集合类型，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大</p>\n<p>时，计算基数所需的空间总是固定 的、并且是很小的。每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。场景：统计网页的 UV（即 Unique Visitor，不重复访客，一个人访问某个网站多次，但是还是只计算为一次）。</p>\n<p>要注意，HyperLogLog 的统计规则是基于概率完成的，所以它给出的统计结果是有一定误差的，标准误算率是 0.81%。</p>\n<p>3、Geospatial ：主要用于存储地理位置信息，并对存储的信息进行操作，适用场景如朋友的定位、附近的人、打车距离计算等。</p>\n<h2 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h2>\n<h3 id=\"1-redis持久化机制\"><a class=\"anchor\" href=\"#1-redis持久化机制\">#</a> 1. Redis 持久化机制？</h3>\n<p>为了能够重用 Redis 数据，或者防止系统故障，我们需要将 Redis 中的数据写入到磁盘空间中，即持久化。</p>\n<p>Redis 提供了两种不同的持久化方法可以将数据存储在磁盘中，一种叫快照 <code>RDB</code> ，另一种叫只追加文件 <code>AOF</code> 。</p>\n<p><strong>RDB</strong></p>\n<p>在指定的时间间隔内将内存中的数据集快照写入磁盘 ( <code>Snapshot</code> )，它恢复时是将快照文件直接读到内存里。</p>\n<p><strong>优势</strong>：适合大规模的数据恢复；对数据完整性和一致性要求不高</p>\n<p><strong>劣势</strong>：在一定间隔时间做一次备份，所以如果 Redis 意外 <code>down</code>  掉的话，就会丢失最后一次快照后的所有修改。</p>\n<p><strong>AOF</strong></p>\n<p>以日志的形式来记录每个写操作，将 Redis 执行过的所有写指令记录下来 (读操作不记录)，只许追加文件但不可以改写文件，Redis 启动之初会读取该文件重新构建数据，换言之，Redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p>\n<p>AOF 采用文件追加方式，文件会越来越大，为避免出现此种情况，新增了重写机制，当 AOF 文件的大小超过所设定的阈值时， Redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集.。</p>\n<p><strong>优势</strong></p>\n<ul>\n<li>每修改同步： <code>appendfsync always</code>  同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差但数据完整性比较好</li>\n<li>每秒同步： <code>appendfsync everysec</code>  异步操作，每秒记录，如果一秒内宕机，有数据丢失</li>\n<li>不同步： <code>appendfsync no</code>  从不同步</li>\n</ul>\n<p><strong>劣势</strong></p>\n<ul>\n<li>相同数据集的数据而言 <code>aof</code>  文件要远大于 <code>rdb</code>  文件，恢复速度慢于 <code>rdb</code></li>\n<li><code>aof</code>  运行效率要慢于 <code>rdb</code> ，每秒同步策略效率较好，不同步效率和 <code>rdb</code>  相同</li>\n</ul>\n<h3 id=\"2-如何选择合适的持久化方式\"><a class=\"anchor\" href=\"#2-如何选择合适的持久化方式\">#</a> 2. 如何选择合适的持久化方式</h3>\n<ul>\n<li>如果是数据不那么敏感，且可以从其他地方重新生成补回的，那么可以关闭持久化。</li>\n<li>如果是数据比较重要，不想再从其他地方获取，且可以承受数分钟的数据丢失，比如缓存等，那么可以只使用 RDB。</li>\n<li>如果是用做内存数据库，要使用 Redis 的持久化，建议是 RDB 和 AOF 都开启，或者定期执行 bgsave 做快照备份，RDB 方式更适合做数据的备份，AOF 可以保证数据的不丢失。</li>\n</ul>\n<p><strong>补充：Redis4.0 对于持久化机制的优化</strong></p>\n<p>Redis4.0 相对与 3.X 版本其中一个比较大的变化是 4.0 添加了新的混合持久化方式。</p>\n<p>简单的说：新的 AOF 文件前半段是 RDB 格式的全量数据后半段是 AOF 格式的增量数据，如下图：</p>\n<p><img data-src=\"https://images2018.cnblogs.com/blog/1075473/201807/1075473-20180726181756270-1907770368.png\" alt=\"img\" /></p>\n<p><strong>优势</strong>：混合持久化结合了 RDB 持久化 和 AOF 持久化的优点， 由于绝大部分都是 RDB 格式，加载速度快，同时结合 AOF，增量的数据以 AOF 方式保存了，数据更少的丢失。</p>\n<p><strong>劣势</strong>：兼容性差，一旦开启了混合持久化，在 4.0 之前版本都不识别该 aof 文件，同时由于前部分是 RDB 格式，阅读性较差。</p>\n<h3 id=\"3-redis持久化数据和缓存怎么做扩容\"><a class=\"anchor\" href=\"#3-redis持久化数据和缓存怎么做扩容\">#</a> 3. Redis 持久化数据和缓存怎么做扩容？</h3>\n<ul>\n<li>如果 Redis 被当做缓存使用，使用一致性哈希实现动态扩容缩容。</li>\n<li>如果 Redis 被当做一个持久化存储使用，必须使用固定的 keys-to-nodes 映射关系，节点的数量一旦确定不能变化。否则的话 (即 Redis 节点需要动态变化的情况），必须使用可以在运行时进行数据再平衡的一套系统，而当前只有 Redis 集群可以做到这样。</li>\n</ul>\n<h2 id=\"过期键的删除策略-淘汰策略\"><a class=\"anchor\" href=\"#过期键的删除策略-淘汰策略\">#</a> 过期键的删除策略、淘汰策略</h2>\n<h3 id=\"1-redis过期键的删除策略\"><a class=\"anchor\" href=\"#1-redis过期键的删除策略\">#</a> 1. Redis 过期键的删除策略</h3>\n<p><strong>Redis 的过期删除策略就是：惰性删除和定期删除两种策略配合使用。</strong></p>\n<p><strong>惰性删除</strong>：惰性删除不会去主动删除数据，而是在访问数据的时候，再检查当前键值是否过期，如果过期则执行删除并返回 null 给客户端，如果没有过期则返回正常信息给客户端。它的优点是简单，不需要对过期的数据做额外的处理，只有在每次访问的时候才会检查键值是否过期，缺点是删除过期键不及时，造成了一定的空间浪费。</p>\n<p><strong>定期删除</strong>：Redis 会周期性的随机测试一批设置了过期时间的 key 并进行处理。测试到的已过期的 key 将被删除。</p>\n<p>附：删除 key 常见的三种处理方式。</p>\n<p><strong>1、定时删除</strong></p>\n<p>在设置某个 key 的过期时间同时，我们创建一个定时器，让定时器在该过期时间到来时，立即执行对其进行删除的操作。</p>\n<p>优点：定时删除对内存是最友好的，能够保存内存的 key 一旦过期就能立即从内存中删除。</p>\n<p>缺点：对 CPU 最不友好，在过期键比较多的时候，删除过期键会占用一部分 CPU 时间，对服务器的响应时间和吞吐量造成影响。</p>\n<p><strong>2、惰性删除</strong></p>\n<p>设置该 key 过期时间后，我们不去管它，当需要该 key 时，我们在检查其是否过期，如果过期，我们就删掉它，反之返回该 key。</p>\n<p>优点：对 CPU 友好，我们只会在使用该键时才会进行过期检查，对于很多用不到的 key 不用浪费时间进行过期检查。</p>\n<p>缺点：对内存不友好，如果一个键已经过期，但是一直没有使用，那么该键就会一直存在内存中，如果数据库中有很多这种使用不到的过期键，这些键便永远不会被删除，内存永远不会释放。从而造成内存泄漏。</p>\n<p><strong>3、定期删除</strong></p>\n<p>每隔一段时间，我们就对一些 key 进行检查，删除里面过期的 key。</p>\n<p>优点：可以通过限制删除操作执行的时长和频率来减少删除操作对 CPU 的影响。另外定期删除，也能有效释放过期键占用的内存。</p>\n<p>缺点：难以确定删除操作执行的时长和频率。如果执行的太频繁，定期删除策略变得和定时删除策略一样，对 CPU 不友好。如果执行的太少，那又和惰性删除一样了，过期键占用的内存不会及时得到释放。另外最重要的是，在获取某个键时，如果某个键的过期时间已经到了，但是还没执行定期删除，那么就会返回这个键的值，这是业务不能忍受的错误。</p>\n<h3 id=\"2-redis-key的过期时间和永久有效分别怎么设置\"><a class=\"anchor\" href=\"#2-redis-key的过期时间和永久有效分别怎么设置\">#</a> 2. Redis key 的过期时间和永久有效分别怎么设置？</h3>\n<p>通过 expire 或 pexpire 命令，客户端可以以秒或毫秒的精度为数据库中的某个键设置生存时间。</p>\n<p>与 expire 和 pexpire 命令类似，客户端可以通过 expireat 和 pexpireat 命令，以秒或毫秒精度给数据库中的某个键设置过期时间，可以理解为：让某个键在某个时间点过期。</p>\n<h3 id=\"3-redis内存淘汰策略\"><a class=\"anchor\" href=\"#3-redis内存淘汰策略\">#</a> 3. Redis 内存淘汰策略</h3>\n<p>Redis 是不断的删除一些过期数据，但是很多没有设置过期时间的数据也会越来越多，那么 Redis 内存不够用的时候是怎么处理的呢？答案就是淘汰策略。此类的</p>\n<p>当 Redis 的内存超过最大允许的内存之后，Redis 会触发内存淘汰策略，删除一些不常用的数据，以保证 Redis 服务器的正常运行。</p>\n<p><strong>Redisv4.0 前提供 6 种数据淘汰策略</strong>：</p>\n<ul>\n<li>volatile-lru：利用 LRU 算法移除设置过过期时间的 key (LRU: 最近使用 Least Recently Used)</li>\n<li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）</li>\n<li>volatile-ttl：从已设置过期时间的数据集（server.db [i].expires）中挑选将要过期的数据淘汰</li>\n<li>volatile-random：从已设置过期时间的数据集（server.db [i].expires）中任意选择数据淘汰</li>\n<li>allkeys-random：从数据集（server.db [i].dict）中任意选择数据淘汰</li>\n<li>no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！</li>\n</ul>\n<p><strong>Redisv4.0 后增加以下两种</strong>：</p>\n<ul>\n<li>volatile-lfu：从已设置过期时间的数据集 (server.db [i].expires) 中挑选最不经常使用的数据淘汰 (LFU (Least Frequently Used) 算法，也就是最频繁被访问的数据将来最有可能被访问到)</li>\n<li>allkeys-lfu：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。</li>\n</ul>\n<p>内存淘汰策略可以通过配置文件来修改，Redis.conf 对应的配置项是 maxmemory-policy 修改对应的值就行，默认是 noeviction。</p>\n<h2 id=\"缓存异常\"><a class=\"anchor\" href=\"#缓存异常\">#</a> 缓存异常</h2>\n<blockquote>\n<p>缓存异常有四种类型，分别是缓存和数据库的数据不一致、缓存雪崩、缓存击穿和缓存穿透。</p>\n</blockquote>\n<h3 id=\"1-如何保证缓存与数据库双写时的数据一致性\"><a class=\"anchor\" href=\"#1-如何保证缓存与数据库双写时的数据一致性\">#</a> 1. 如何保证缓存与数据库双写时的数据一致性？</h3>\n<blockquote>\n<p>背景：使用到缓存，无论是本地内存做缓存还是使用 Redis 做缓存，那么就会存在数据同步的问题，因为配置信息缓存在内存中，而内存时无法感知到数据在数据库的修改。这样就会造成数据库中的数据与缓存中数据不一致的问题。</p>\n</blockquote>\n<p>共有四种方案：</p>\n<ol>\n<li>先更新数据库，后更新缓存</li>\n<li>先更新缓存，后更新数据库</li>\n<li>先删除缓存，后更新数据库</li>\n<li>先更新数据库，后删除缓存</li>\n</ol>\n<p>第一种和第二种方案，没有人使用的，因为第一种方案存在问题是：并发更新数据库场景下，会将脏数据刷到缓存。</p>\n<p>第二种方案存在的问题是：如果先更新缓存成功，但是数据库更新失败，则肯定会造成数据不一致。</p>\n<p>目前主要用第三和第四种方案。</p>\n<h3 id=\"2-先删除缓存后更新数据库\"><a class=\"anchor\" href=\"#2-先删除缓存后更新数据库\">#</a> 2. 先删除缓存，后更新数据库</h3>\n<p>该方案也会出问题，此时来了两个请求，请求 A（更新操作） 和请求 B（查询操作）</p>\n<ol>\n<li>请求 A 进行写操作，删除缓存</li>\n<li>请求 B 查询发现缓存不存在</li>\n<li>请求 B 去数据库查询得到旧值</li>\n<li>请求 B 将旧值写入缓存</li>\n<li>请求 A 将新值写入数据库</li>\n</ol>\n<p>上述情况就会导致不一致的情形出现。而且，如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。</p>\n<p><strong>答案一：延时双删</strong></p>\n<p>最简单的解决办法延时双删</p>\n<p>使用伪代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token class-name\">Redis</span><span class=\"token punctuation\">.</span><span class=\"token function\">delKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t    db<span class=\"token punctuation\">.</span><span class=\"token function\">updateData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t    <span class=\"token class-name\">Redis</span><span class=\"token punctuation\">.</span><span class=\"token function\">delKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>转化为中文描述就是 （1）先淘汰缓存 （2）再写数据库（这两步和原来一样） （3）休眠 1 秒，再次淘汰缓存，这么做，可以将 1 秒内所造成的缓存脏数据，再次删除。确保读请求结束，写请求可以删除读请求造成的缓存脏数据。自行评估自己的项目的读数据业务逻辑的耗时，写数据的休眠时间则在读数据业务逻辑的耗时基础上，加几百 ms 即可。</p>\n<p>如果使用的是 Mysql 的读写分离的架构的话，那么其实主从同步之间也会有时间差。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/1735bb5881bbb1d4~tplv-t2oaga2asx-watermark.awebp\" alt=\"主从同步时间差\" /></p>\n<p>此时来了两个请求，请求 A（更新操作） 和请求 B（查询操作）</p>\n<ol>\n<li>请求 A 更新操作，删除了 Redis</li>\n<li>请求主库进行更新操作，主库与从库进行同步数据的操作</li>\n<li>请 B 查询操作，发现 Redis 中没有数据</li>\n<li>去从库中拿去数据</li>\n<li>此时同步数据还未完成，拿到的数据是旧数据</li>\n</ol>\n<p>此时的解决办法就是如果是对 Redis 进行填充数据的查询数据库操作，那么就强制将其指向主库进行查询。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/1735bb5881a19fec~tplv-t2oaga2asx-watermark.awebp\" alt=\"从主库中拿数据\" /></p>\n<p><strong>答案二： 更新与读取操作进行异步串行化</strong></p>\n<p>采用<strong>更新与读取操作进行异步串行化</strong></p>\n<p><strong>异步串行化</strong></p>\n<p>我在系统内部维护 n 个内存队列，更新数据的时候，根据数据的唯一标识，将该操作路由之后，发送到其中一个 jvm 内部的内存队列中（对同一数据的请求发送到同一个队列）。读取数据的时候，如果发现数据不在缓存中，并且此时队列里有更新库存的操作，那么将重新读取数据 + 更新缓存的操作，根据唯一标识路由之后，也将发送到同一个 jvm 内部的内存队列中。然后每个队列对应一个工作线程，每个工作线程串行地拿到对应的操作，然后一条一条的执行。</p>\n<p>这样的话，一个数据变更的操作，先执行删除缓存，然后再去更新数据库，但是还没完成更新的时候，如果此时一个读请求过来，读到了空的缓存，那么可以先将缓存更新的请求发送到队列中，此时会在队列中积压，排在刚才更新库的操作之后，然后同步等待缓存更新完成，再读库。</p>\n<p><strong>读操作去重</strong></p>\n<p>多个读库更新缓存的请求串在同一个队列中是没意义的，因此可以做过滤，如果发现队列中已经有了该数据的更新缓存的请求了，那么就不用再放进去了，直接等待前面的更新操作请求完成即可，待那个队列对应的工作线程完成了上一个操作（数据库的修改）之后，才会去执行下一个操作（读库更新缓存），此时会从数据库中读取最新的值，然后写入缓存中。</p>\n<p>如果请求还在等待时间范围内，不断轮询发现可以取到值了，那么就直接返回；如果请求等待的时间超过一定时长，那么这一次直接从数据库中读取当前的旧值。（返回旧值不是又导致缓存和数据库不一致了么？那至少可以减少这个情况发生，因为等待超时也不是每次都是，几率很小吧。这里我想的是，如果超时了就直接读旧值，这时候仅仅是读库后返回而不放缓存）</p>\n<h3 id=\"3-先更新数据库后删除缓存\"><a class=\"anchor\" href=\"#3-先更新数据库后删除缓存\">#</a> 3. 先更新数据库，后删除缓存</h3>\n<p>这一种情况也会出现问题，比如更新数据库成功了，但是在删除缓存的阶段出错了没有删除成功，那么此时再读取缓存的时候每次都是错误的数据了。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/1735bb5881fb4a1b~tplv-t2oaga2asx-watermark.awebp\" alt=\"先更新数据库，后删除缓存\" /></p>\n<p>此时解决方案就是利用消息队列进行删除的补偿。具体的业务逻辑用语言描述如下：</p>\n<ol>\n<li>请求 A 先对数据库进行更新操作</li>\n<li>在对 Redis 进行删除操作的时候发现报错，删除失败</li>\n<li>此时将 Redis 的 key 作为消息体发送到消息队列中</li>\n<li>系统接收到消息队列发送的消息后再次对 Redis 进行删除操作</li>\n</ol>\n<p>但是这个方案会有一个缺点就是会对业务代码造成大量的侵入，深深的耦合在一起，所以这时会有一个优化的方案，我们知道对 Mysql 数据库更新操作后再 binlog 日志中我们都能够找到相应的操作，那么我们可以订阅 Mysql 数据库的 binlog 日志对缓存进行操作。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/1735bb588215b298~tplv-t2oaga2asx-watermark.awebp\" alt=\"利用订阅 binlog 删除缓存\" /></p>\n<h3 id=\"4-什么是缓存击穿\"><a class=\"anchor\" href=\"#4-什么是缓存击穿\">#</a> 4. 什么是缓存击穿？</h3>\n<p>缓存击穿跟缓存雪崩有点类似，缓存雪崩是大规模的 key 失效，而缓存击穿是某个热点的 key 失效，大并发集中对其进行请求，就会造成大量请求读缓存没读到数据，从而导致高并发访问数据库，引起数据库压力剧增。这种现象就叫做缓存击穿。</p>\n<p>从两个方面解决，第一是否可以考虑热点 key 不设置过期时间，第二是否可以考虑降低打在数据库上的请求数量。</p>\n<p>解决方案：</p>\n<ul>\n<li>在缓存失效后，通过互斥锁或者队列来控制读数据写缓存的线程数量，比如某个 key 只允许一个线程查询数据和写缓存，其他线程等待。这种方式会阻塞其他的线程，此时系统的吞吐量会下降</li>\n<li>热点数据缓存永远不过期。永不过期实际包含两层意思：\n<ul>\n<li>物理不过期，针对热点 key 不设置过期时间</li>\n<li>逻辑过期，把过期时间存在 key 对应的 value 里，如果发现要过期了，通过一个后台的异步线程进行缓存的构建</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-什么是缓存穿透\"><a class=\"anchor\" href=\"#5-什么是缓存穿透\">#</a> 5. 什么是缓存穿透？</h3>\n<p>缓存穿透是指用户请求的数据在缓存中不存在即没有命中，同时在数据库中也不存在，导致用户每次请求该数据都要去数据库中查询一遍。如果有恶意攻击者不断请求系统中不存在的数据，会导致短时间大量请求落在数据库上，造成数据库压力过大，甚至导致数据库承受不住而宕机崩溃。</p>\n<blockquote>\n<p>缓存穿透的关键在于在 Redis 中查不到 key 值，它和缓存击穿的根本区别在于传进来的 key 在 Redis 中是不存在的。假如有黑客传进大量的不存在的 key，那么大量的请求打在数据库上是很致命的问题，所以在日常开发中要对参数做好校验，一些非法的参数，不可能存在的 key 就直接返回错误提示。</p>\n</blockquote>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/2021013117512340.png\" alt=\"img\" /></p>\n<p>解决方法：</p>\n<ul>\n<li>将无效的 key 存放进 Redis 中：</li>\n</ul>\n<p>当出现 Redis 查不到数据，数据库也查不到数据的情况，我们就把这个 key 保存到 Redis 中，设置 value=&quot;null&quot;，并设置其过期时间极短，后面再出现查询这个 key 的请求的时候，直接返回 null，就不需要再查询数据库了。但这种处理方式是有问题的，假如传进来的这个不存在的 Key 值每次都是随机的，那存进 Redis 也没有意义。</p>\n<ul>\n<li>使用布隆过滤器：</li>\n</ul>\n<p>如果布隆过滤器判定某个 key 不存在布隆过滤器中，那么就一定不存在，如果判定某个 key 存在，那么很大可能是存在 (存在一定的误判率)。于是我们可以在缓存之前再加一个布隆过滤器，将数据库中的所有 key 都存储在布隆过滤器中，在查询 Redis 前先去布隆过滤器查询 key 是否存在，如果不存在就直接返回，不让其访问数据库，从而避免了对底层存储系统的查询压力。</p>\n<blockquote>\n<p>如何选择：针对一些恶意攻击，攻击带过来的大量 key 是随机，那么我们采用第一种方案就会缓存大量不存在 key 的数据。那么这种方案就不合适了，我们可以先对使用布隆过滤器方案进行过滤掉这些 key。所以，针对这种 key 异常多、请求重复率比较低的数据，优先使用第二种方案直接过滤掉。而对于空数据的 key 有限的，重复率比较高的，则可优先采用第一种方式进行缓存。</p>\n</blockquote>\n<h3 id=\"6-什么是缓存雪崩\"><a class=\"anchor\" href=\"#6-什么是缓存雪崩\">#</a> 6. 什么是缓存雪崩？</h3>\n<p>如果缓在某一个时刻出现大规模的 key 失效，那么就会导致大量的请求打在了数据库上面，导致数据库压力巨大，如果在高并发的情况下，可能瞬间就会导致数据库宕机。这时候如果运维马上又重启数据库，马上又会有新的流量把数据库打死。这就是缓存雪崩。</p>\n<p>造成缓存雪崩的关键在于同一时间的大规模的 key 失效，主要有两种可能：第一种是 Redis 宕机，第二种可能就是采用了相同的过期时间。</p>\n<p>解决方案：</p>\n<p>1、事前：</p>\n<ul>\n<li>均匀过期：设置不同的过期时间，让缓存失效的时间尽量均匀，避免相同的过期时间导致缓存雪崩，造成大量数据库的访问。如把每个 Key 的失效时间都加个随机值， <code>setRedis（Key，value，time + Math.random() * 10000）；</code> ，保证数据不会在同一时间大面积失效。</li>\n<li>分级缓存：第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。</li>\n<li>热点数据缓存永远不过期。永不过期实际包含两层意思：\n<ul>\n<li>物理不过期，针对热点 key 不设置过期时间</li>\n<li>逻辑过期，把过期时间存在 key 对应的 value 里，如果发现要过期了，通过一个后台的异步线程进行缓存的构建</li>\n</ul>\n</li>\n<li>保证 Redis 缓存的高可用，防止 Redis 宕机导致缓存雪崩的问题。可以使用 主从 + 哨兵，Redis 集群来避免 Redis 全盘崩溃的情况。</li>\n</ul>\n<p>2、事中：</p>\n<ul>\n<li>互斥锁：在缓存失效后，通过互斥锁或者队列来控制读数据写缓存的线程数量，比如某个 key 只允许一个线程查询数据和写缓存，其他线程等待。这种方式会阻塞其他的线程，此时系统的吞吐量会下降</li>\n<li>使用熔断机制，限流降级。当流量达到一定的阈值，直接返回 “系统拥挤” 之类的提示，防止过多的请求打在数据库上将数据库击垮，至少能保证一部分用户是可以正常使用，其他用户多刷新几次也能得到结果。</li>\n</ul>\n<p>3、事后：</p>\n<p>开启 Redis 持久化机制，尽快恢复缓存数据，一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。</p>\n<h3 id=\"7-什么是缓存预热\"><a class=\"anchor\" href=\"#7-什么是缓存预热\">#</a> 7. 什么是缓存预热？</h3>\n<p>缓存预热是指系统上线后，提前将相关的缓存数据加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题，用户直接查询事先被预热的缓存数据。</p>\n<p>如果不进行预热，那么 Redis 初始状态数据为空，系统上线初期，对于高并发的流量，都会访问到数据库中， 对数据库造成流量的压力。</p>\n<p>缓存预热解决方案：</p>\n<ul>\n<li>数据量不大的时候，工程启动的时候进行加载缓存动作；</li>\n<li>数据量大的时候，设置一个定时任务脚本，进行缓存的刷新；</li>\n<li>数据量太大的时候，优先保证热点数据进行提前加载到缓存。</li>\n</ul>\n<h3 id=\"8-什么是缓存降级\"><a class=\"anchor\" href=\"#8-什么是缓存降级\">#</a> 8. 什么是缓存降级？</h3>\n<p>缓存降级是指缓存失效或缓存服务器挂掉的情况下，不去访问数据库，直接返回默认数据或访问服务的内存数据。降级一般是有损的操作，所以尽量减少降级对于业务的影响程度。</p>\n<p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：</p>\n<ul>\n<li>一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</li>\n<li>警告：有些服务在一段时间内成功率有波动（如在 95~100% 之间），可以自动降级或人工降级，并发送告警；</li>\n<li>错误：比如可用率低于 90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级；</li>\n<li>严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</li>\n</ul>\n<h2 id=\"线程模型\"><a class=\"anchor\" href=\"#线程模型\">#</a> 线程模型</h2>\n<h3 id=\"1-redis为何选择单线程\"><a class=\"anchor\" href=\"#1-redis为何选择单线程\">#</a> 1. Redis 为何选择单线程？</h3>\n<p>在 Redis 6.0 以前，Redis 的核心网络模型选择用单线程来实现。先来看下官方的回答：</p>\n<blockquote>\n<p>It's not very frequent that CPU becomes your bottleneck with Redis， as usually Redisis either memory or network bound. For instance， using pipelining Redisrunning on an average Linux system can deliver even 1 million requests per second， so if your application mainly uses O(N) or O(log(N)) commands， it is hardly going to use too much CPU.</p>\n</blockquote>\n<p>核心意思就是，对于一个 DB 来说，CPU 通常不会是瓶颈，因为大多数请求不会是 CPU 密集型的，而是 I/O 密集型。具体到 Redis 的话，如果不考虑 RDB/AOF 等持久化方案，Redis 是完全的纯内存操作，执行速度是非常快的，因此这部分操作通常不会是性能瓶颈，Redis 真正的性能瓶颈在于网络 I/O，也就是客户端和服务端之间的网络传输延迟，因此 Redis 选择了单线程的 I/O 多路复用来实现它的核心网络模型。</p>\n<p>实际上更加具体的选择单线程的原因如下：</p>\n<ul>\n<li>避免过多的上下文切换开销：如果是单线程则可以规避进程内频繁的线程切换开销，因为程序始终运行在进程中单个线程内，没有多线程切换的场景。</li>\n<li>避免同步机制的开销：如果 Redis 选择多线程模型，又因为 Redis 是一个数据库，那么势必涉及到底层数据同步的问题，则必然会引入某些同步机制，比如锁，而我们知道 Redis 不仅仅提供了简单的 key-value 数据结构，还有 list、set 和 hash 等等其他丰富的数据结构，而不同的数据结构对同步访问的加锁粒度又不尽相同，可能会导致在操作数据过程中带来很多加锁解锁的开销，增加程序复杂度的同时还会降低性能。</li>\n<li>简单可维护：如果 Redis 使用多线程模式，那么所有的底层数据结构都必须实现成线程安全的，这无疑又使得 Redis 的实现变得更加复杂。</li>\n</ul>\n<p>总而言之，Redis 选择单线程可以说是多方博弈之后的一种权衡：在保证足够的性能表现之下，使用单线程保持代码的简单和可维护性。</p>\n<h3 id=\"2-redis真的是单线程\"><a class=\"anchor\" href=\"#2-redis真的是单线程\">#</a> 2. Redis 真的是单线程？</h3>\n<p>讨论 这个问题前，先看下 Redis 的版本中两个重要的节点：</p>\n<ol>\n<li>Redisv4.0（引入多线程处理异步任务）</li>\n<li>Redis 6.0（在网络模型中实现多线程 I/O ）</li>\n</ol>\n<p>所以，网络上说的 Redis 是单线程，通常是指在 Redis 6.0 之前，其核心网络模型使用的是单线程。</p>\n<p>且 Redis6.0 引入<strong>多线程 I/O</strong>，只是用来<strong>处理网络数据的读写和协议的解析</strong>，而<strong>执行命令依旧是单线程</strong>。</p>\n<blockquote>\n<p>Redis 在 v4.0 版本的时候就已经引入了的多线程来做一些异步操作，此举主要针对的是那些非常耗时的命令，通过将这些命令的执行进行异步化，避免阻塞单线程的事件循环。</p>\n<p>在 Redisv4.0 之后增加了一些的非阻塞命令如  <code>UNLINK</code> 、 <code>FLUSHALL ASYNC</code> 、 <code>FLUSHDB ASYNC</code> 。</p>\n</blockquote>\n<h3 id=\"3-redis-60为何引入多线程\"><a class=\"anchor\" href=\"#3-redis-60为何引入多线程\">#</a> 3. Redis 6.0 为何引入多线程？</h3>\n<p>很简单，就是 Redis 的网络 I/O 瓶颈已经越来越明显了。</p>\n<p>随着互联网的飞速发展，互联网业务系统所要处理的线上流量越来越大，Redis 的单线程模式会导致系统消耗很多 CPU 时间在网络 I/O 上从而降低吞吐量，要提升 Redis 的性能有两个方向：</p>\n<ul>\n<li>优化网络 I/O 模块</li>\n<li>提高机器内存读写的速度</li>\n</ul>\n<p>后者依赖于硬件的发展，暂时无解。所以只能从前者下手，网络 I/O 的优化又可以分为两个方向：</p>\n<ul>\n<li>零拷贝技术或者 DPDK 技术</li>\n<li>利用多核优势</li>\n</ul>\n<p>零拷贝技术有其局限性，无法完全适配 Redis 这一类复杂的网络 I/O 场景，更多网络 I/O 对 CPU 时间的消耗和 Linux 零拷贝技术。而 DPDK 技术通过旁路网卡 I/O 绕过内核协议栈的方式又太过于复杂以及需要内核甚至是硬件的支持。</p>\n<p>总结起来，Redis 支持多线程主要就是两个原因：</p>\n<ul>\n<li>可以充分利用服务器 CPU 资源，目前主线程只能利用一个核</li>\n<li>多线程任务可以分摊 Redis 同步 IO 读写负荷</li>\n</ul>\n<h3 id=\"4-redis-60-采用多线程后性能的提升效果如何\"><a class=\"anchor\" href=\"#4-redis-60-采用多线程后性能的提升效果如何\">#</a> 4. Redis 6.0 采用多线程后，性能的提升效果如何？</h3>\n<p>Redis 作者 antirez 在 RedisConf 2019 分享时曾提到：Redis 6 引入的多线程 IO 特性对性能提升至少是一倍以上。</p>\n<p>国内也有大牛曾使用 unstable 版本在阿里云 esc 进行过测试，GET/SET 命令在 4 线程 IO 时性能相比单线程是几乎是翻倍了。</p>\n<h3 id=\"5-介绍下redis的线程模型\"><a class=\"anchor\" href=\"#5-介绍下redis的线程模型\">#</a> 5. 介绍下 Redis 的线程模型</h3>\n<p>Redis 的线程模型包括 Redis 6.0 之前和 Redis 6.0。</p>\n<p>下面介绍的是 Redis 6.0 之前。</p>\n<p>Redis 是基于 reactor 模式开发了网络事件处理器，这个处理器叫做文件事件处理器（file event handler）。由于这个文件事件处理器是单线程的，所以 Redis 才叫做单线程的模型。采用 IO 多路复用机制同时监听多个 Socket，根据 socket 上的事件来选择对应的事件处理器来处理这个事件。</p>\n<blockquote>\n<p>IO 多路复用是 IO 模型的一种，有时也称为异步阻塞 IO，是基于经典的 Reactor 设计模式设计的。多路指的是多个 Socket 连接，复用指的是复用一个线程。多路复用主要有三种技术：Select，Poll，Epoll。</p>\n<p>Epoll 是最新的也是目前最好的多路复用技术。</p>\n</blockquote>\n<p>模型如下图：</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/202105092153018231.png\" alt=\"202105092153018231.png\" /></p>\n<p>文件事件处理器的结构包含了四个部分：</p>\n<ul>\n<li>多个 Socket。Socket 会产生 AE_READABLE 和 AE_WRITABLE 事件：\n<ul>\n<li>当 socket 变得可读时或者有新的可以应答的 socket 出现时，socket 就会产生一个 AE_READABLE 事件</li>\n<li>当 socket 变得可写时，socket 就会产生一个 AE_WRITABLE 事件。</li>\n</ul>\n</li>\n<li>IO 多路复用程序</li>\n<li>文件事件分派器</li>\n<li>事件处理器。事件处理器包括：连接应答处理器、命令请求处理器、命令回复处理器，每个处理器对应不同的 socket 事件：\n<ul>\n<li>如果是客户端要连接 Redis，那么会为 socket 关联连接应答处理器</li>\n<li>如果是客户端要写数据到 Redis（读、写请求命令），那么会为 socket 关联命令请求处理器</li>\n<li>如果是客户端要从 Redis 读数据，那么会为 socket 关联命令回复处理器</li>\n</ul>\n</li>\n</ul>\n<p>多个 socket 会产生不同的事件，不同的事件对应着不同的操作，IO 多路复用程序监听着这些 Socket，当这些 Socket 产生了事件，IO 多路复用程序会将这些事件放到一个队列中，通过这个队列，以有序、同步、每次一个事件的方式向文件时间分派器中传送。当事件处理器处理完一个事件后，IO 多路复用程序才会继续向文件分派器传送下一个事件。</p>\n<p>下图是客户端与 Redis 通信的一次完整的流程：</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/202105092153019692.png\" alt=\"202105092153019692.png\" /></p>\n<ol>\n<li>Redis 启动初始化的时候，Redis 会将连接应答处理器与 AE_READABLE 事件关联起来。</li>\n<li>如果一个客户端跟 Redis 发起连接，此时 Redis 会产生一个 AE_READABLE 事件，由于开始之初 AE_READABLE 是与连接应答处理器关联，所以由连接应答处理器来处理该事件，这时连接应答处理器会与客户端建立连接，创建客户端响应的 socket，同时将这个 socket 的 AE_READABLE 事件与命令请求处理器关联起来。</li>\n<li>如果这个时间客户端向 Redis 发送一个命令（set k1 v1），这时 socket 会产生一个 AE_READABLE 事件，IO 多路复用程序会将该事件压入队列中，此时事件分派器从队列中取得该事件，由于该 socket 的 AE_READABLE 事件已经和命令请求处理器关联了，因此事件分派器会将该事件交给命令请求处理器处理，命令请求处理器读取事件中的命令并完成。操作完成后，Redis 会将该 socket 的 AE_WRITABLE 事件与命令回复处理器关联。</li>\n<li>如果客户端已经准备好接受数据后，Redis 中的该 socket 会产生一个 AE_WRITABLE 事件，同样会压入队列然后被事件派发器取出交给相对应的命令回复处理器，由该命令回复处理器将准备好的响应数据写入 socket 中，供客户端读取。</li>\n<li>命令回复处理器写完后，就会删除该 socket 的 AE_WRITABLE 事件与命令回复处理器的关联关系。</li>\n</ol>\n<h3 id=\"6-redis-60-多线程的实现机制\"><a class=\"anchor\" href=\"#6-redis-60-多线程的实现机制\">#</a> 6. Redis 6.0 多线程的实现机制？</h3>\n<p><strong>流程简述如下</strong>：</p>\n<ul>\n<li>主线程负责接收建立连接请求，获取 Socket 放入全局等待读处理队列。</li>\n<li>主线程处理完读事件之后，通过 RR（Round Robin）将这些连接分配给这些 IO 线程。</li>\n<li>主线程阻塞等待 IO 线程读取 Socket 完毕。</li>\n<li>主线程通过单线程的方式执行请求命令，请求数据读取并解析完成，但并不执行。</li>\n<li>主线程阻塞等待 IO 线程将数据回写 Socket 完毕。</li>\n</ul>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210828175543973.png\" alt=\"image-20210828175543973\" /></p>\n<p><strong>该设计有如下特点</strong>：</p>\n<ul>\n<li>IO 线程要么同时在读 Socket，要么同时在写，不会同时读或写。</li>\n<li>IO 线程只负责读写 Socket 解析命令，不负责命令处理。</li>\n</ul>\n<h3 id=\"7-redis-60开启多线程后是否会存在线程并发安全问题\"><a class=\"anchor\" href=\"#7-redis-60开启多线程后是否会存在线程并发安全问题\">#</a> 7. Redis 6.0 开启多线程后，是否会存在线程并发安全问题？</h3>\n<p>从实现机制可以看出，Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程顺序执行。</p>\n<p>所以我们不需要去考虑控制 Key、Lua、事务，LPUSH/LPOP 等等的并发及线程安全问题。</p>\n<h3 id=\"8-redis-60-与-memcached-多线程模型的对比\"><a class=\"anchor\" href=\"#8-redis-60-与-memcached-多线程模型的对比\">#</a> 8. Redis 6.0 与 Memcached 多线程模型的对比</h3>\n<ul>\n<li>\n<p>** 相同点：** 都采用了 Master 线程 -Worker 线程的模型。</p>\n</li>\n<li>\n<p><strong>不同点</strong>：Memcached 执行主逻辑也是在 Worker 线程里，模型更加简单，实现了真正的线程隔离，符合我们对线程隔离的常规理解。</p>\n<p>而 Redis 把处理逻辑交还给 Master 线程，虽然一定程度上增加了模型复杂度，但也解决了线程并发安全等问题。</p>\n</li>\n</ul>\n<h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<h3 id=\"1-redis事务的概念\"><a class=\"anchor\" href=\"#1-redis事务的概念\">#</a> 1. Redis 事务的概念</h3>\n<p>Redis 的事务并不是我们传统意义上理解的事务，我们都知道 单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis <strong>事务的执行并不是原子性的</strong>。</p>\n<p>事务可以理解为一个<strong>打包的批量执行脚本</strong>，但<strong>批量指令并非原子化</strong>的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</p>\n<p><strong>总结：</strong></p>\n<ol>\n<li>\n<p>Redis 事务中如果有某一条命令执行失败，之前的命令不会回滚，其后的命令仍然会被继续执行。<strong>鉴于这个原因，所以说 Redis 的事务严格意义上来说是不具备原子性的</strong>。</p>\n</li>\n<li>\n<p>Redis 事务中所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p>\n</li>\n<li>\n<p>在事务开启之前，如果客户端与服务器之间出现通讯故障并导致网络断开，其后所有待执行的语句都将不会被服务器执行。然而如果网络中断事件是发生在客户端执行 EXEC 命令之后，那么该事务中的所有命令都会被服务器执行。</p>\n</li>\n</ol>\n<blockquote>\n<p>当使用 Append-Only 模式时，Redis 会通过调用系统函数 write 将该事务内的所有写操作在本次调用中全部写入磁盘。然而如果在写入的过程中出现系统崩溃，如电源故障导致的宕机，那么此时也许只有部分数据被写入到磁盘，而另外一部分数据却已经丢失。Redis 服务器会在重新启动时执行一系列必要的一致性检测，一旦发现类似问题，就会立即退出并给出相应的错误提示。此时，我们就要充分利用 Redis 工具包中提供的 Redis-check-aof 工具，该工具可以帮助我们定位到数据不一致的错误，并将已经写入的部分数据进行回滚。修复之后我们就可以再次重新启动 Redis 服务器了。</p>\n</blockquote>\n<h3 id=\"2-redis事务的三个阶段\"><a class=\"anchor\" href=\"#2-redis事务的三个阶段\">#</a> 2. Redis 事务的三个阶段</h3>\n<ol>\n<li>multi 开启事务</li>\n<li>大量指令入队</li>\n<li>exec 执行事务块内命令，<strong>截止此处一个事务已经结束。</strong></li>\n<li>discard 取消事务</li>\n<li>watch 监视一个或多个 key，如果事务执行前 key 被改动，事务将打断。unwatch 取消监视。</li>\n</ol>\n<p>事务执行过程中，如果服务端收到有 EXEC、DISCARD、WATCH、MULTI 之外的请求，将会把请求放入队列中排队.</p>\n<h3 id=\"3-redis事务相关命令\"><a class=\"anchor\" href=\"#3-redis事务相关命令\">#</a> 3. Redis 事务相关命令</h3>\n<p>Redis 事务功能是通过 MULTI、EXEC、DISCARD 和 WATCH 四个原语实现的</p>\n<ul>\n<li>WATCH 命令是一个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。 可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到 EXEC 命令。</li>\n<li>MULTI 命令用于开启一个事务，它总是返回 OK。 MULTI 执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当 EXEC 命令被调用时，所有队列中的命令才会被执行。</li>\n<li>EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。 通过调用 DISCARD，客户端可以清空事务队列，并放弃执行事务， 并且客户端会从事务状态中退出。</li>\n<li>UNWATCH 命令可以取消 watch 对所有 key 的监控。</li>\n</ul>\n<h3 id=\"4-redis事务支持隔离性吗\"><a class=\"anchor\" href=\"#4-redis事务支持隔离性吗\">#</a> 4. Redis 事务支持隔离性吗？</h3>\n<p>Redis 是单进程程序，并且它保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完所有事务队列中的命令为止。因此，<strong>Redis 的事务是总是带有隔离性的</strong>。</p>\n<h3 id=\"5-redis为什么不支持事务回滚\"><a class=\"anchor\" href=\"#5-redis为什么不支持事务回滚\">#</a> 5. Redis 为什么不支持事务回滚？</h3>\n<ul>\n<li>Redis 命令只会因为错误的语法而失败，或是命令用在了错误类型的键上面，这些问题不能在入队时发现，这也就是说，从实用性的角度来说，失败的命令是由编程错误造成的，而这些错误应该在开发的过程中被发现，而不应该出现在生产环境中.</li>\n<li>因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。</li>\n</ul>\n<h3 id=\"6-redis事务其他实现\"><a class=\"anchor\" href=\"#6-redis事务其他实现\">#</a> 6. Redis 事务其他实现</h3>\n<ul>\n<li>基于 Lua 脚本，Redis 可以保证脚本内的命令一次性、按顺序地执行， 其同时也不提供事务运行错误的回滚，执行过程中如果部分命令运行错误，剩下的命令还是会继续运行完。</li>\n<li>基于中间标记变量，通过另外的标记变量来标识事务是否执行完成，读取数据时先读取该标记变量判断是否事务执行完成。但这样会需要额外写代码实现，比较繁琐。</li>\n</ul>\n<h2 id=\"主从-哨兵-集群\"><a class=\"anchor\" href=\"#主从-哨兵-集群\">#</a> 主从、哨兵、集群</h2>\n<h3 id=\"1-redis常见使用方式有哪些\"><a class=\"anchor\" href=\"#1-redis常见使用方式有哪些\">#</a> 1. Redis 常见使用方式有哪些？</h3>\n<p>Redis 的几种常见使用方式包括：</p>\n<ul>\n<li>Redis 单副本；</li>\n<li>Redis 多副本（主从）；</li>\n<li>Redis Sentinel（哨兵）；</li>\n<li>Redis Cluster；</li>\n<li>Redis 自研。</li>\n</ul>\n<p>使用场景：</p>\n<p>如果数据量很少，主要是承载高并发高性能的场景，比如缓存一般就几个 G 的话，单机足够了。</p>\n<p>主从模式：master 节点挂掉后，需要手动指定新的 master，可用性不高，基本不用。</p>\n<p>哨兵模式：master 节点挂掉后，哨兵进程会主动选举新的 master，可用性高，但是每个节点存储的数据是一样的，浪费内存空间。数据量不是很多，集群规模不是很大，需要自动容错容灾的时候使用。</p>\n<p>Redis cluster 主要是针对海量数据 + 高并发 + 高可用的场景，如果是海量数据，如果你的数据量很大，那么建议就用 Redis cluster，所有 master 的容量总和就是 Redis cluster 可缓存的数据容量。</p>\n<h3 id=\"2-介绍下redis单副本\"><a class=\"anchor\" href=\"#2-介绍下redis单副本\">#</a> 2. 介绍下 Redis 单副本</h3>\n<p>Redis 单副本，采用单个 Redis 节点部署架构，没有备用节点实时同步数据，不提供数据持久化和备份策略，适用于数据可靠性要求不高的纯缓存业务场景。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210829103307048.png\" alt=\"image-20210829103307048\" /></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>架构简单，部署方便；</li>\n<li>高性价比：缓存使用时无需备用节点（单实例可用性可以用 supervisor 或 crontab 保证），当然为了满足业务的高可用性，也可以牺牲一个备用节点，但同时刻只有一个实例对外提供服务；</li>\n<li>高性能。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>不保证数据的可靠性；</li>\n<li>在缓存使用，进程重启后，数据丢失，即使有备用的节点解决高可用性，但是仍然不能解决缓存预热问题，因此不适用于数据可靠性要求高的业务；</li>\n<li>高性能受限于单核 CPU 的处理能力（Redis 是单线程机制），CPU 为主要瓶颈，所以适合操作命令简单，排序、计算较少的场景。也可以考虑用 Memcached 替代。</li>\n</ul>\n<h3 id=\"3-介绍下redis多副本主从\"><a class=\"anchor\" href=\"#3-介绍下redis多副本主从\">#</a> 3. 介绍下 Redis 多副本（主从）</h3>\n<p>Redis 多副本，采用主从（replication）部署结构，相较于单副本而言最大的特点就是主从实例间数据实时同步，并且提供数据持久化和备份策略。主从实例部署在不同的物理服务器上，根据公司的基础环境配置，可以实现同时对外提供服务和读写分离策略。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210829103327631.png\" alt=\"image-20210829103327631\" /></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>高可靠性：一方面，采用双机主备架构，能够在主库出现故障时自动进行主备切换，从库提升为主库提供服务，保证服务平稳运行；另一方面，开启数据持久化功能和配置合理的备份策略，能有效的解决数据误操作和数据异常丢失的问题；</li>\n<li>读写分离策略：从节点可以扩展主库节点的读能力，有效应对大并发量的读操作。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>故障恢复复杂，如果没有 RedisHA 系统（需要开发），当主库节点出现故障时，需要手动将一个从节点晋升为主节点，同时需要通知业务方变更配置，并且需要让其它从库节点去复制新主库节点，整个过程需要人为干预，比较繁琐；</li>\n<li>主库的写能力受到单机的限制，可以考虑分片；</li>\n<li>主库的存储能力受到单机的限制，可以考虑 Pika；</li>\n<li>原生复制的弊端在早期的版本中也会比较突出，如：Redis 复制中断后，Slave 会发起 psync，此时如果同步不成功，则会进行全量同步，主库执行全量备份的同时可能会造成毫秒或秒级的卡顿；又由于 COW 机制，导致极端情况下的主库内存溢出，程序异常退出或宕机；主库节点生成备份文件导致服务器磁盘 IO 和 CPU（压缩）资源消耗；发送数 GB 大小的备份文件导致服务器出口带宽暴增，阻塞请求，建议升级到最新版本。</li>\n</ul>\n<h3 id=\"4-介绍下redis-sentinel哨兵\"><a class=\"anchor\" href=\"#4-介绍下redis-sentinel哨兵\">#</a> 4. 介绍下 Redis Sentinel（哨兵）</h3>\n<blockquote>\n<p>主从模式下，当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这种方式并不推荐，实际生产中，我们优先考虑哨兵模式。这种模式下，master 宕机，哨兵会自动选举 master 并将其他的 slave 指向新的 master。</p>\n</blockquote>\n<p>Redis Sentinel 是社区版本推出的原生高可用解决方案，其部署架构主要包括两部分：Redis Sentinel 集群和 Redis 数据集群。</p>\n<p>其中 Redis Sentinel 集群是由若干 Sentinel 节点组成的分布式集群，可以实现故障发现、故障自动转移、配置中心和客户端通知。Redis Sentinel 的节点数量要满足 2n+1（n&gt;=1）的奇数个。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210829103343110.png\" alt=\"image-20210829103343110\" /></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>Redis Sentinel 集群部署简单；</li>\n<li>能够解决 Redis 主从模式下的高可用切换问题；</li>\n<li>很方便实现 Redis 数据节点的线形扩展，轻松突破 Redis 自身单线程瓶颈，可极大满足 Redis 大容量或高性能的业务需求；</li>\n<li>可以实现一套 Sentinel 监控一组 Redis 数据节点或多组数据节点。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>部署相对 Redis 主从模式要复杂一些，原理理解更繁琐；</li>\n<li>资源浪费，Redis 数据节点中 slave 节点作为备份节点不提供服务；</li>\n<li>Redis Sentinel 主要是针对 Redis 数据节点中的主节点的高可用切换，对 Redis 的数据节点做失败判定分为主观下线和客观下线两种，对于 Redis 的从节点有对节点做主观下线操作，并不执行故障转移。</li>\n<li>不能解决读写分离问题，实现起来相对复杂。</li>\n</ul>\n<h3 id=\"5-介绍下redis-cluster\"><a class=\"anchor\" href=\"#5-介绍下redis-cluster\">#</a> 5. 介绍下 Redis Cluster</h3>\n<blockquote>\n<p>Redis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 Redis3.0 上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，对数据进行分片，也就是说每台 Redis 节点上存储不同的内容。</p>\n</blockquote>\n<p>Redis Cluster 是社区版推出的 Redis 分布式集群解决方案，主要解决 Redis 分布式方面的需求，比如，当遇到单机内存，并发和流量等瓶颈的时候，Redis Cluster 能起到很好的负载均衡的目的。</p>\n<p>Redis Cluster 集群节点最小配置 6 个节点以上（3 主 3 从），其中主节点提供读写操作，从节点作为备用节点，不提供请求，只作为故障转移使用。</p>\n<p>Redis Cluster 采用虚拟槽分区，所有的键根据哈希函数映射到 0～16383 个整数槽内，每个节点负责维护一部分槽以及槽所印映射的键值数据。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210829103444245.png\" alt=\"image-20210829103444245\" /></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>无中心架构；</li>\n<li>数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布；</li>\n<li>可扩展性：可线性扩展到 1000 多个节点，节点可动态添加或删除；</li>\n<li>高可用性：部分节点不可用时，集群仍可用。通过增加 Slave 做 standby 数据副本，能够实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave 到 Master 的角色提升；</li>\n<li>降低运维成本，提高系统的扩展性和可用性。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>Client 实现复杂，驱动要求实现 Smart Client，缓存 slots mapping 信息并及时更新，提高了开发难度，客户端的不成熟影响业务的稳定性。目前仅 JedisCluster 相对成熟，异常处理部分还不完善，比如常见的 “max redirect exception”。</li>\n<li>节点会因为某些原因发生阻塞（阻塞时间大于 clutser-node-timeout），被判断下线，这种 failover 是没有必要的。</li>\n<li>数据通过异步复制，不保证数据的强一致性。</li>\n<li>多个业务使用同一套集群时，无法根据统计区分冷热数据，资源隔离性较差，容易出现相互影响的情况。</li>\n<li>Slave 在集群中充当 “冷备”，不能缓解读压力，当然可以通过 SDK 的合理设计来提高 Slave 资源的利用率。</li>\n<li>Key 批量操作限制，如使用 mset、mget 目前只支持具有相同 slot 值的 Key 执行批量操作。对于映射为不同 slot 值的 Key 由于 Keys 不支持跨 slot 查询，所以执行 mset、mget、sunion 等操作支持不友好。</li>\n<li>Key 事务操作支持有限，只支持多 key 在同一节点上的事务操作，当多个 Key 分布于不同的节点上时无法使用事务功能。</li>\n<li>Key 作为数据分区的最小粒度，不能将一个很大的键值对象如 hash、list 等映射到不同的节点。</li>\n<li>不支持多数据库空间，单机下的 Redis 可以支持到 16 个数据库，集群模式下只能使用 1 个数据库空间，即 db 0。</li>\n<li>复制结构只支持一层，从节点只能复制主节点，不支持嵌套树状复制结构。</li>\n<li>避免产生 hot-key，导致主库节点成为系统的短板。</li>\n<li>避免产生 big-key，导致网卡撑爆、慢查询等。</li>\n<li>重试时间应该大于 cluster-node-time 时间。</li>\n<li>Redis Cluster 不建议使用 pipeline 和 multi-keys 操作，减少 max redirect 产生的场景。</li>\n</ul>\n<h3 id=\"6-介绍下redis自研\"><a class=\"anchor\" href=\"#6-介绍下redis自研\">#</a> 6. 介绍下 Redis 自研</h3>\n<p>Redis 自研的高可用解决方案，主要体现在配置中心、故障探测和 failover 的处理机制上，通常需要根据企业业务的实际线上环境来定制化。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210829103426922.png\" alt=\"image-20210829103426922\" /></p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>高可靠性、高可用性；</li>\n<li>自主可控性高；</li>\n<li>贴切业务实际需求，可缩性好，兼容性好。</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>实现复杂，开发成本高；</li>\n<li>需要建立配套的周边设施，如监控，域名服务，存储元数据信息的数据库等；</li>\n<li>维护成本高。</li>\n</ul>\n<h3 id=\"7-redis高可用方案具体怎么实施\"><a class=\"anchor\" href=\"#7-redis高可用方案具体怎么实施\">#</a> 7. Redis 高可用方案具体怎么实施？</h3>\n<p>使用官方推荐的哨兵 (sentinel) 机制就能实现，当主节点出现故障时，由 Sentinel 自动完成故障发现和转移，并通知应用方，实现高可用性。它有四个主要功能：</p>\n<ul>\n<li>集群监控，负责监控 Redis master 和 slave 进程是否正常工作。</li>\n<li>消息通知，如果某个 Redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。</li>\n<li>故障转移，如果 master node 挂掉了，会自动转移到 slave node 上。</li>\n<li>配置中心，如果故障转移发生了，通知 client 客户端新的 master 地址。</li>\n</ul>\n<h3 id=\"8-了解主从复制的原理吗\"><a class=\"anchor\" href=\"#8-了解主从复制的原理吗\">#</a> 8. 了解主从复制的原理吗？</h3>\n<p><strong>1、主从架构的核心原理</strong></p>\n<p>当启动一个 slave node 的时候，它会发送一个 PSYNC 命令给 master node</p>\n<p>如果这是 slave node 重新连接 master node，那么 master node 仅仅会复制给 slave 部分缺少的数据；否则如果是 slave node 第一次连接 master node，那么会触发一次 full resynchronization</p>\n<p>开始 full resynchronization 的时候，master 会启动一个后台线程，开始生成一份 RDB 快照文件，同时还会将从客户端收到的所有写命令缓存在内存中。RDB 文件生成完毕之后，master 会将这个 RDB 发送给 slave，slave 会先写入本地磁盘，然后再从本地磁盘加载到内存中。然后 master 会将内存中缓存的写命令发送给 slave，slave 也会同步这些数据。</p>\n<p>slave node 如果跟 master node 有网络故障，断开了连接，会自动重连。master 如果发现有多个 slave node 都来重新连接，仅仅会启动一个 rdb save 操作，用一份数据服务所有 slave node。</p>\n<p><strong>2、主从复制的断点续传</strong></p>\n<p>从 Redis 2.8 开始，就支持主从复制的断点续传，如果主从复制过程中，网络连接断掉了，那么可以接着上次复制的地方，继续复制下去，而不是从头开始复制一份</p>\n<p>master node 会在内存中常见一个 backlog，master 和 slave 都会保存一个 replica offset 还有一个 master id，offset 就是保存在 backlog 中的。如果 master 和 slave 网络连接断掉了，slave 会让 master 从上次的 replica offset 开始继续复制</p>\n<p>但是如果没有找到对应的 offset，那么就会执行一次 resynchronization</p>\n<p><strong>3、无磁盘化复制</strong></p>\n<p>master 在内存中直接创建 rdb，然后发送给 slave，不会在自己本地落地磁盘了</p>\n<p>repl-diskless-sync repl-diskless-sync-delay，等待一定时长再开始复制，因为要等更多 slave 重新连接过来</p>\n<p><strong>4、过期 key 处理</strong></p>\n<p>slave 不会过期 key，只会等待 master 过期 key。如果 master 过期了一个 key，或者通过 LRU 淘汰了一个 key，那么会模拟一条 del 命令发送给 slave。</p>\n<h3 id=\"9-由于主从延迟导致读取到过期数据怎么处理\"><a class=\"anchor\" href=\"#9-由于主从延迟导致读取到过期数据怎么处理\">#</a> 9. 由于主从延迟导致读取到过期数据怎么处理？</h3>\n<ol>\n<li>通过 scan 命令扫库：当 Redis 中的 key 被 scan 的时候，相当于访问了该 key，同样也会做过期检测，充分发挥 Redis 惰性删除的策略。这个方法能大大降低了脏数据读取的概率，但缺点也比较明显，会造成一定的数据库压力，否则影响线上业务的效率。</li>\n<li>Redis 加入了一个新特性来解决主从不一致导致读取到过期数据问题，增加了 key 是否过期以及对主从库的判断，如果 key 已过期，当前访问的 master 则返回 null；当前访问的是从库，且执行的是只读命令也返回 null。</li>\n</ol>\n<h3 id=\"10-主从复制的过程中如果因为网络原因停止复制了会怎么样\"><a class=\"anchor\" href=\"#10-主从复制的过程中如果因为网络原因停止复制了会怎么样\">#</a> 10. 主从复制的过程中如果因为网络原因停止复制了会怎么样？</h3>\n<p>如果出现网络故障断开连接了，会自动重连的，从 Redis 2.8 开始，就支持主从复制的断点续传，可以接着上次复制的地方，继续复制下去，而不是从头开始复制一份。</p>\n<p>master 如果发现有多个 slave node 都来重新连接，仅仅会启动一个 rdb save 操作，用一份数据服务所有 slave node。</p>\n<p>master node 会在内存中创建一个 <code>backlog</code> ，master 和 slave 都会保存一个 <code>replica offset</code> ，还有一个 <code>master id</code> ，offset 就是保存在 backlog 中的。如果 master 和 slave 网络连接断掉了，slave 会让 master 从上次的 replica offset 开始继续复制。</p>\n<p>但是如果没有找到对应的 offset，那么就会执行一次 <code>resynchronization</code>  全量复制。</p>\n<h3 id=\"11-redis主从架构数据会丢失吗为什么\"><a class=\"anchor\" href=\"#11-redis主从架构数据会丢失吗为什么\">#</a> 11. Redis 主从架构数据会丢失吗，为什么？</h3>\n<p>有两种数据丢失的情况：</p>\n<ol>\n<li>异步复制导致的数据丢失：因为 master -&gt; slave 的复制是异步的，所以可能有部分数据还没复制到 slave，master 就宕机了，此时这些部分数据就丢失了。</li>\n<li>脑裂导致的数据丢失：某个 master 所在机器突然脱离了正常的网络，跟其他 slave 机器不能连接，但是实际上 master 还运行着，此时哨兵可能就会认为 master 宕机了，然后开启选举，将其他 slave 切换成了 master。这个时候，集群里就会有两个 master，也就是所谓的脑裂。此时虽然某个 slave 被切换成了 master，但是可能 client 还没来得及切换到新的 master，还继续写向旧 master 的数据可能也丢失了。因此旧 master 再次恢复的时候，会被作为一个 slave 挂到新的 master 上去，自己的数据会清空，重新从新的 master 复制数据。</li>\n</ol>\n<h3 id=\"12-如何解决主从架构数据丢失的问题\"><a class=\"anchor\" href=\"#12-如何解决主从架构数据丢失的问题\">#</a> 12. 如何解决主从架构数据丢失的问题？</h3>\n<p>数据丢失的问题是不可避免的，但是我们可以尽量减少。</p>\n<p>在 Redis 的配置文件里设置参数</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>min-slaves-to-write 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>min-slaves-max-lag 10</pre></td></tr></table></figure><p><code>min-slaves-to-write</code>  默认情况下是 0， <code>min-slaves-max-lag</code>  默认情况下是 10。</p>\n<p>上面的配置的意思是要求至少有 1 个 slave，数据复制和同步的延迟不能超过 10 秒。如果说一旦所有的 slave，数据复制和同步的延迟都超过了 10 秒钟，那么这个时候，master 就不会再接收任何请求了。</p>\n<p>减小 <code>min-slaves-max-lag</code>  参数的值，这样就可以避免在发生故障时大量的数据丢失，一旦发现延迟超过了该值就不会往 master 中写入数据。</p>\n<p>那么对于 client，我们可以采取降级措施，将数据暂时写入本地缓存和磁盘中，在一段时间后重新写入 master 来保证数据不丢失；也可以将数据写入 kafka 消息队列，隔一段时间去消费 kafka 中的数据。</p>\n<h3 id=\"13-redis哨兵是怎么工作的\"><a class=\"anchor\" href=\"#13-redis哨兵是怎么工作的\">#</a> 13. Redis 哨兵是怎么工作的？</h3>\n<ol>\n<li>每个 Sentinel 以每秒钟一次的频率向它所知的 Master，Slave 以及其他 Sentinel 实例发送一个 PING 命令。</li>\n<li>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被当前 Sentinel 标记为主观下线。</li>\n<li>如果一个 Master 被标记为主观下线，则正在监视这个 Master 的所有 Sentinel 要以每秒一次的频率确认 Master 的确进入了主观下线状态。</li>\n<li>当有足够数量的 Sentinel（大于等于配置文件指定的值）在指定的时间范围内确认 Master 的确进入了主观下线状态， 则 Master 会被标记为客观下线 。</li>\n<li>当 Master 被 Sentinel 标记为客观下线时，Sentinel 向下线的 Master 的所有 Slave 发送 INFO 命令的频率会从 10 秒一次改为每秒一次 （在一般情况下， 每个 Sentinel 会以每 10 秒一次的频率向它已知的所有 Master，Slave 发送 INFO 命令 ）。</li>\n<li>若没有足够数量的 Sentinel 同意 Master 已经下线， Master 的客观下线状态就会变成主观下线。若 Master 重新向 Sentinel 的 PING 命令返回有效回复， Master 的主观下线状态就会被移除。</li>\n<li>sentinel 节点会与其他 sentinel 节点进行 “沟通”，投票选举一个 sentinel 节点进行故障处理，在从节点中选取一个主节点，其他从节点挂载到新的主节点上自动复制新主节点的数据。</li>\n</ol>\n<h3 id=\"14-故障转移时会从剩下的slave选举一个新的master被选举为master的标准是什么\"><a class=\"anchor\" href=\"#14-故障转移时会从剩下的slave选举一个新的master被选举为master的标准是什么\">#</a> 14. 故障转移时会从剩下的 slave 选举一个新的 master，被选举为 master 的标准是什么？</h3>\n<p>如果一个 master 被认为 odown 了，而且 majority 哨兵都允许了主备切换，那么某个哨兵就会执行主备切换操作，此时首先要选举一个 slave 来，会考虑 slave 的一些信息。</p>\n<ul>\n<li>跟 master 断开连接的时长。 如果一个 slave 跟 master 断开连接已经超过了 down-after-milliseconds 的 10 倍，外加 master 宕机的时长，那么 slave 就被认为不适合选举为 master.</li>\n</ul>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>( down-after-milliseconds * 10) + milliseconds_since_master_is_in_SDOWN_state</pre></td></tr></table></figure><ul>\n<li>slave 优先级。 按照 slave 优先级进行排序，slave priority 越低，优先级就越高</li>\n<li>复制 offset。 如果 slave priority 相同，那么看 replica offset，哪个 slave 复制了越多的数据，offset 越靠后，优先级就越高</li>\n<li>run id 如果上面两个条件都相同，那么选择一个 run id 比较小的那个 slave。</li>\n</ul>\n<h3 id=\"15-同步配置的时候其他哨兵根据什么更新自己的配置呢\"><a class=\"anchor\" href=\"#15-同步配置的时候其他哨兵根据什么更新自己的配置呢\">#</a> 15. 同步配置的时候其他哨兵根据什么更新自己的配置呢？</h3>\n<p>执行切换的那个哨兵，会从要切换到的新 master（salve-&gt;master）那里得到一个 configuration epoch，这就是一个 version 号，每次切换的 version 号都必须是唯一的。</p>\n<p>如果第一个选举出的哨兵切换失败了，那么其他哨兵，会等待 failover-timeout 时间，然后接替继续执行切换，此时会重新获取一个新的 configuration epoch 作为新的 version 号。</p>\n<p>这个 version 号就很重要了，因为各种消息都是通过一个 channel 去发布和监听的，所以一个哨兵完成一次新的切换之后，新的 master 配置是跟着新的 version 号的，其他的哨兵都是根据版本号的大小来更新自己的 master 配置的。</p>\n<h3 id=\"16-为什么redis哨兵集群只有2个节点无法正常工作\"><a class=\"anchor\" href=\"#16-为什么redis哨兵集群只有2个节点无法正常工作\">#</a> 16. 为什么 Redis 哨兵集群只有 2 个节点无法正常工作？</h3>\n<p>哨兵集群必须部署 2 个以上节点。</p>\n<p>如果两个哨兵实例，即两个 Redis 实例，一主一从的模式。</p>\n<p>则 Redis 的配置 quorum=1，表示一个哨兵认为 master 宕机即可认为 master 已宕机。</p>\n<p>但是如果是机器 1 宕机了，那哨兵 1 和 master 都宕机了，虽然哨兵 2 知道 master 宕机了，但是这个时候，需要 majority，也就是大多数哨兵都是运行的，2 个哨兵的 majority 就是 2（2 的 majority=2，3 的 majority=2，5 的 majority=3，4 的 majority=2），2 个哨兵都运行着，就可以允许执行故障转移。</p>\n<p>但此时哨兵 1 没了就只有 1 个哨兵了了，此时就没有 majority 来允许执行故障转移，所以故障转移不会执行。</p>\n<h3 id=\"17-redis-cluster中是如何实现数据分布的这种方式有什么优点\"><a class=\"anchor\" href=\"#17-redis-cluster中是如何实现数据分布的这种方式有什么优点\">#</a> 17. Redis cluster 中是如何实现数据分布的？这种方式有什么优点？</h3>\n<p>Redis cluster 有固定的 16384 个 hash slot（哈希槽），对每个 key 计算 CRC16 值，然后对 16384 取模，可以获取 key 对应的 hash slot。</p>\n<p>Redis cluster 中每个 master 都会持有部分 slot（槽），比如有 3 个 master，那么可能每个 master 持有 5000 多个 hash slot。</p>\n<p>hash slot 让 node 的增加和移除很简单，增加一个 master，就将其他 master 的 hash slot 移动部分过去，减少一个 master，就将它的 hash slot 移动到其他 master 上去。每次增加或减少 master 节点都是对 16384 取模，而不是根据 master 数量，这样原本在老的 master 上的数据不会因 master 的新增或减少而找不到。并且增加或减少 master 时 Redis cluster 移动 hash slot 的成本是非常低的。</p>\n<h3 id=\"18-redis-cluster节点间通信是什么机制\"><a class=\"anchor\" href=\"#18-redis-cluster节点间通信是什么机制\">#</a> 18. Redis cluster 节点间通信是什么机制？</h3>\n<p>Redis cluster 节点间采取 gossip 协议进行通信，所有节点都持有一份元数据，不同的节点如果出现了元数据的变更之后 U 不断地 i 将元数据发送给其他节点让其他节点进行数据变更。</p>\n<blockquote>\n<p>节点互相之间不断通信，保持整个集群所有节点的数据是完整的。 主要交换故障信息、节点的增加和移除、hash slot 信息等。</p>\n</blockquote>\n<p>这种机制的好处在于，元数据的更新比较分散，不是集中在一个地方，更新请求会陆陆续续，打到所有节点上去更新，有一定的延时，降低了压力；</p>\n<p>缺点，元数据更新有延时，可能导致集群的一些操作会有一些滞后。</p>\n<h2 id=\"分布式问题\"><a class=\"anchor\" href=\"#分布式问题\">#</a> 分布式问题</h2>\n<h3 id=\"1-什么是分布式锁为什么用分布式锁\"><a class=\"anchor\" href=\"#1-什么是分布式锁为什么用分布式锁\">#</a> 1. 什么是分布式锁？为什么用分布式锁？</h3>\n<p>锁在程序中的作用就是同步工具，保证共享资源在同一时刻只能被一个线程访问，Java 中的锁我们都很熟悉了，像 synchronized 、Lock 都是我们经常使用的，但是 Java 的锁只能保证单机的时候有效，分布式集群环境就无能为力了，这个时候我们就需要用到分布式锁。</p>\n<p>分布式锁，顾名思义，就是分布式项目开发中用到的锁，可以用来控制分布式系统之间同步访问共享资源。</p>\n<p>思路是：在整个系统提供一个<strong>全局、唯一</strong>的获取锁的 “东西”，然后每个系统在需要加锁时，都去问这个 “东西” 拿到一把锁，这样不同的系统拿到的就可以认为是同一把锁。至于这个 “东西”，可以是 Redis、Zookeeper，也可以是数据库。</p>\n<p>一般来说，分布式锁需要满足的特性有这么几点：</p>\n<p>1、互斥性：在任何时刻，对于同一条数据，只有一台应用可以获取到分布式锁；</p>\n<p>2、高可用性：在分布式场景下，一小部分服务器宕机不影响正常使用，这种情况就需要将提供分布式锁的服务以集群的方式部署；</p>\n<p>3、防止锁超时：如果客户端没有主动释放锁，服务器会在一段时间之后自动释放锁，防止客户端宕机或者网络不可达时产生死锁；</p>\n<p>4、独占性：加锁解锁必须由同一台服务器进行，也就是锁的持有者才可以释放锁，不能出现你加的锁，别人给你解锁了。</p>\n<h3 id=\"2-常见的分布式锁有哪些解决方案\"><a class=\"anchor\" href=\"#2-常见的分布式锁有哪些解决方案\">#</a> 2. 常见的分布式锁有哪些解决方案？</h3>\n<p>实现分布式锁目前有三种流行方案，即基于关系型数据库、Redis、ZooKeeper 的方案</p>\n<p>1、基于关系型数据库，如 MySQL 基于关系型数据库实现分布式锁，是依赖数据库的唯一性来实现资源锁定，比如主键和唯一索引等。</p>\n<p>缺点：</p>\n<ul>\n<li>这把锁强依赖数据库的可用性，数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用。</li>\n<li>这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁。</li>\n<li>这把锁只能是非阻塞的，因为数据的 insert 操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作。</li>\n<li>这把锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了。</li>\n</ul>\n<p>2、基于 Redis 实现</p>\n<p>优点：</p>\n<p>Redis 锁实现简单，理解逻辑简单，性能好，可以支撑高并发的获取、释放锁操作。</p>\n<p>缺点：</p>\n<ul>\n<li>Redis 容易单点故障，集群部署，并不是强一致性的，锁的不够健壮；</li>\n<li>key 的过期时间设置多少不明确，只能根据实际情况调整；</li>\n<li>需要自己不断去尝试获取锁，比较消耗性能。</li>\n</ul>\n<p>3、基于 zookeeper</p>\n<p>优点：</p>\n<p>zookeeper 天生设计定位就是分布式协调，强一致性，锁很健壮。如果获取不到锁，只需要添加一个监听器就可以了，不用一直轮询，性能消耗较小。</p>\n<p>缺点：</p>\n<p>在高请求高并发下，系统疯狂的加锁释放锁，最后 zk 承受不住这么大的压力可能会存在宕机的风险。</p>\n<h3 id=\"3-redis实现分布式锁\"><a class=\"anchor\" href=\"#3-redis实现分布式锁\">#</a> 3. Redis 实现分布式锁</h3>\n<p><strong>分布式锁的三个核心要素</strong></p>\n<p>1、加锁</p>\n<p>使用 setnx 来加锁。key 是锁的唯一标识，按业务来决定命名，value 这里设置为 test。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>setx key test</pre></td></tr></table></figure><p>当一个线程执行 setnx 返回 1，说明 key 原本不存在，该线程成功得到了锁；当一个线程执行 setnx 返回 0，说明 key 已经存在，该线程抢锁失败；</p>\n<p>2、解锁</p>\n<p>有加锁就得有解锁。当得到的锁的线程执行完任务，需要释放锁，以便其他线程可以进入。释放锁的最简单方式就是执行 del 指令。</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>del key</pre></td></tr></table></figure><p>释放锁之后，其他线程就可以继续执行 setnx 命令来获得锁。</p>\n<p>3、锁超时</p>\n<p>锁超时知道的是：如果一个得到锁的线程在执行任务的过程中挂掉，来不及显式地释放锁，这块资源将会永远被锁住，别的线程北向进来。</p>\n<p>所以，setnx 的 key 必须设置一个超时时间，以保证即使没有被显式释放，这把锁也要在一段时间后自动释放。setnx 不支持超时参数，所以需要额外指令，</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>expire key 30</pre></td></tr></table></figure><p><strong>上述分布式锁存在的问题</strong></p>\n<p><strong>通过上述 <code>setnx</code>  、 <code>del</code>  和 <code>expire</code>  实现的分布式锁还是存在着一些问题。</strong></p>\n<p>1、SETNX 和 EXPIRE 非原子性</p>\n<p>假设一个场景中，某一个线程刚执行 setnx，成功得到了锁。此时 setnx 刚执行成功，还未来得及执行 expire 命令，节点就挂掉了。此时这把锁就没有设置过期时间，别的线程就再也无法获得该锁。</p>\n<p><strong>解决措施:</strong></p>\n<p>由于 <code>setnx</code>  指令本身是不支持传入超时时间的，而在 Redis2.6.12 版本上为 <code>set</code>  指令增加了可选参数，用法如下：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SET key value [EX seconds][PX milliseconds] [NX|XX]</pre></td></tr></table></figure><ul>\n<li>EX second: 设置键的过期时间为 second 秒；</li>\n<li>PX millisecond：设置键的过期时间为 millisecond 毫秒；</li>\n<li>NX：只在键不存在时，才对键进行设置操作；</li>\n<li>XX：只在键已经存在时，才对键进行设置操作；</li>\n<li>SET 操作完成时，返回 OK，否则返回 nil。</li>\n</ul>\n<p>2、锁误解除</p>\n<p>如果线程 A 成功获取到了锁，并且设置了过期时间 30 秒，但线程 A 执行时间超过了 30 秒，锁过期自动释放，此时线程 B 获取到了锁；随后 A 执行完成，线程 A 使用 DEL 命令来释放锁，但此时线程 B 加的锁还没有执行完成，线程 A 实际释放的线程 B 加的锁。</p>\n<p><strong>解决办法：</strong></p>\n<p>在 del 释放锁之前加一个判断，验证当前的锁是不是自己加的锁。</p>\n<p>具体在加锁的时候把当前线程的 id 当做 value，可生成一个 UUID 标识当前线程，在删除之前验证 key 对应的 value 是不是自己线程的 id。</p>\n<p>还可以使用 lua 脚本做验证标识和解锁操作。</p>\n<p>3、超时解锁导致并发</p>\n<p>如果线程 A 成功获取锁并设置过期时间 30 秒，但线程 A 执行时间超过了 30 秒，锁过期自动释放，此时线程 B 获取到了锁，线程 A 和线程 B 并发执行。</p>\n<p>A、B 两个线程发生并发显然是不被允许的，一般有两种方式解决该问题：</p>\n<ul>\n<li>将过期时间设置足够长，确保代码逻辑在锁释放之前能够执行完成。</li>\n<li>为获取锁的线程增加守护线程，为将要过期但未释放的锁增加有效时间。</li>\n</ul>\n<p>4、不可重入</p>\n<p>当线程在持有锁的情况下再次请求加锁，如果一个锁支持一个线程多次加锁，那么这个锁就是可重入的。如果一个不可重入锁被再次加锁，由于该锁已经被持有，再次加锁会失败。Redis 可通过对锁进行重入计数，加锁时加 1，解锁时减 1，当计数归 0 时释放锁。</p>\n<p>5、无法等待锁释放</p>\n<p>上述命令执行都是立即返回的，如果客户端可以等待锁释放就无法使用。</p>\n<ul>\n<li>可以通过客户端轮询的方式解决该问题，当未获取到锁时，等待一段时间重新获取锁，直到成功获取锁或等待超时。这种方式比较消耗服务器资源，当并发量比较大时，会影响服务器的效率。</li>\n<li>另一种方式是使用 Redis 的发布订阅功能，当获取锁失败时，订阅锁释放消息，获取锁成功后释放时，发送锁释放消息。</li>\n</ul>\n<p>具体实现参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly94aWFvbWktaW5mby5naXRodWIuaW8vMjAxOS8xMi8xNy9SZWRpcy1kaXN0cmlidXRlZC1sb2NrLw==\">https://xiaomi-info.github.io/2019/12/17/Redis-distributed-lock/</span></p>\n<h3 id=\"4-了解redlock吗\"><a class=\"anchor\" href=\"#4-了解redlock吗\">#</a> 4. 了解 RedLock 吗？</h3>\n<p>Redlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 Redis 的分布式锁。</p>\n<p>RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。</p>\n<p>此种方式具有以下特性：</p>\n<ul>\n<li>互斥访问：即永远只有一个 client 能拿到锁</li>\n<li>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。</li>\n<li>容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务</li>\n</ul>\n<h3 id=\"5-redlock的原理\"><a class=\"anchor\" href=\"#5-redlock的原理\">#</a> 5. RedLock 的原理</h3>\n<p>假设有 5 个完全独立的 Redis 主服务器</p>\n<ol>\n<li>获取当前时间戳</li>\n<li>client 尝试按照顺序使用相同的 key,value 获取所有 Redis 服务的锁，在获取锁的过程中的获取时间比锁过期时间短很多，这是为了不要过长时间等待已经关闭的 Redis 服务。并且试着获取下一个 Redis 实例。</li>\n</ol>\n<p>比如：TTL 为 5s, 设置获取锁最多用 1s，所以如果一秒内无法获取锁，就放弃获取这个锁，从而尝试获取下个锁</p>\n<ol>\n<li>client 通过获取所有能获取的锁后的时间减去第一步的时间，这个时间差要小于 TTL 时间并且至少有 3 个 Redis 实例成功获取锁，才算真正的获取锁成功</li>\n<li>如果成功获取锁，则锁的真正有效时间是 TTL 减去第三步的时间差 的时间；比如：TTL 是 5s, 获取所有锁用了 2s, 则真正锁有效时间为 3s (其实应该再减去时钟漂移);</li>\n<li>如果客户端由于某些原因获取锁失败，便会开始解锁所有 Redis 实例；因为可能已经获取了小于 3 个锁，必须释放，否则影响其他 client 获取锁</li>\n</ol>\n<p>算法示意图如下：</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210829131128229.png\" alt=\"image-20210829131128229\" /></p>\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n<h3 id=\"1-redis如何做内存优化\"><a class=\"anchor\" href=\"#1-redis如何做内存优化\">#</a> 1. Redis 如何做内存优化？</h3>\n<ul>\n<li><strong>控制 key 的数量</strong>。当使用 Redis 存储大量数据时，通常会存在大量键，过多的键同样会消耗大量内存。Redis 本质是一个数据结构服务器，它为我们提供多种数据结构，如 hash，list，set，zset 等结构。使用 Redis 时不要进入一个误区，大量使用 get/set 这样的 API，把 Redis 当成 Memcached 使用。对于存储相同的数据内容利用 Redis 的数据结构降低外层键的数量，也可以节省大量内存。</li>\n<li><strong>缩减键值对象</strong>，降低 Redis 内存使用最直接的方式就是缩减键（key）和值（value）的长度。\n<ul>\n<li>key 长度：如在设计键时，在完整描述业务情况下，键值越短越好。</li>\n<li>value 长度：值对象缩减比较复杂，常见需求是把业务对象序列化成二进制数组放入 Redis。首先应该在业务上精简业务对象，去掉不必要的属性避免存储无效数据。其次在序列化工具选择上，应该选择更高效的序列化工具来降低字节数组大小。</li>\n</ul>\n</li>\n<li><strong>编码优化</strong>。Redis 对外提供了 string,list,hash,set,zet 等类型，但是 Redis 内部针对不同类型存在编码的概念，所谓编码就是具体使用哪种底层数据结构来实现。编码不同将直接影响数据的内存占用和读写效率。可参考文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMTYyMjEz\">https://cloud.tencent.com/developer/article/1162213</span></li>\n</ul>\n<h3 id=\"2-如果现在有个读超高并发的系统用redis来抗住大部分读请求你会怎么设计\"><a class=\"anchor\" href=\"#2-如果现在有个读超高并发的系统用redis来抗住大部分读请求你会怎么设计\">#</a> 2. 如果现在有个读超高并发的系统，用 Redis 来抗住大部分读请求，你会怎么设计？</h3>\n<p>如果是读高并发的话，先看读并发的数量级是多少，因为 Redis 单机的读 QPS 在万级，每秒几万没问题，使用一主多从 + 哨兵集群的缓存架构来承载每秒 10W + 的读并发，主从复制，读写分离。</p>\n<p>使用哨兵集群主要是提高缓存架构的可用性，解决单点故障问题。主库负责写，多个从库负责读，支持水平扩容，根据读请求的 QPS 来决定加多少个 Redis 从实例。如果读并发继续增加的话，只需要增加 Redis 从实例就行了。</p>\n<p>如果需要缓存 1T + 的数据，选择 Redis cluster 模式，每个主节点存一部分数据，假设一个 master 存 32G，那只需要 n*32G&gt;=1T，n 个这样的 master 节点就可以支持 1T + 的海量数据的存储了。</p>\n<blockquote>\n<p>Redis 单主的瓶颈不在于读写的并发，而在于内存容量，即使是一主多从也是不能解决该问题，因为一主多从架构下，多个 slave 的数据和 master 的完全一样。假如 master 是 10G 那 slave 也只能存 10G 数据。所以数据量受单主的影响。 而这个时候又需要缓存海量数据，那就必须得有多主了，并且多个主保存的数据还不能一样。Redis 官方给出的 Redis cluster 模式完美的解决了这个问题。</p>\n</blockquote>\n",
            "tags": [
                "数据库",
                "Redis"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/database/sql/mysql/Java%E9%9D%A2%E8%AF%95%E9%A2%98-06-Mysql%E7%AF%87/",
            "url": "https://sbysg.github.io/2023/10/22/database/sql/mysql/Java%E9%9D%A2%E8%AF%95%E9%A2%98-06-Mysql%E7%AF%87/",
            "title": "mysql",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<h1 id=\"java面试题-mysql篇\"><a class=\"anchor\" href=\"#java面试题-mysql篇\">#</a> Java 面试题 - Mysql 篇</h1>\n<h2 id=\"mysql常见\"><a class=\"anchor\" href=\"#mysql常见\">#</a> Mysql 常见</h2>\n<h3 id=\"1-mysql中myisam与innodb的区别\"><a class=\"anchor\" href=\"#1-mysql中myisam与innodb的区别\">#</a> 1. MySQL 中 myisam 与 innodb 的区别？</h3>\n<ul>\n<li>InnoDB 支持事物，而 MyISAM 不支持事物</li>\n<li>InnoDB 支持行级锁，而 MyISAM 支持表级锁</li>\n<li>InnoDB 支持 MVCC, 而 MyISAM 不支持</li>\n<li>InnoDB 支持外键，而 MyISAM 不支持</li>\n<li>InnoDB 不支持全文索引，而 MyISAM 支持。</li>\n</ul>\n<h3 id=\"2-事务的特性\"><a class=\"anchor\" href=\"#2-事务的特性\">#</a> 2. 事务的特性</h3>\n<ul>\n<li>原子性：是指事务包含所有操作要么全部成功，要么全部失败回滚。</li>\n<li>一致性：指事务必须使数据库从一个一致性状态变换成另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。 拿转账来说，假设用户 A 和用户 B 两者的钱加起来一共是 5000，那么不管 A 和 B 之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是 5000，这就是事务的一致性。</li>\n<li>隔离性：是当多个用户并发访问数据库时，比如操作同一张表时，数据表为每个用户开启的事务，不能被其他事务所干扰，多个并发事务之间要相互隔离。</li>\n<li>持久性：持久性是指一个事务一旦被提交，那么对数据库中的数据的改变就是永久的，即便是在数据库系统遇到故障的性况下也不会丢失提交事务的操作。</li>\n</ul>\n<h3 id=\"3-并发操作问题\"><a class=\"anchor\" href=\"#3-并发操作问题\">#</a> 3. 并发操作问题</h3>\n<ul>\n<li>脏读：脏读是指在一个事务处理过程中读取到了另外一个未提交事务中的数据。</li>\n<li>不可重复读：不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</li>\n<li>虚读 (幻读)：幻读发生在当两个完全相同的查询执行时，第二次查询所返回的结果集跟第一个查询不相同。 比如两个事务操作，A 事务查询状态为 1 的记录时，这时 B 事务插入了一条状态为 1 的记录，A 事务再次查询返回的结果不一样。</li>\n</ul>\n<h3 id=\"4-事务的隔离级别\"><a class=\"anchor\" href=\"#4-事务的隔离级别\">#</a> 4. 事务的隔离级别</h3>\n<ul>\n<li>Serializable (串行化)：可避免脏读、不可重复读、幻读。（就是串行化读数据）</li>\n<li>Repeatable read (可重复读)：可避免脏读、不可重复读的发生。</li>\n<li>Read committed (读已提交)：可避免脏读的发生。</li>\n<li>Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</li>\n</ul>\n<p>在 MySQL 数据库中，支持上面四种隔离级别，默认的为 Repeatable read (可重复读)；而在 Oracle 数据库中，只支持 Serializable (串行化) 级别和 Read committed (读已提交) 这两种级别，其中默认的为 Read committed 级别。##</p>\n<h3 id=\"5-索引是什么\"><a class=\"anchor\" href=\"#5-索引是什么\">#</a> 5. 索引是什么？</h3>\n<p>索引是表的目录，在查找内容之前可以先在目录中查找索引位置，以此快速定位查询数据。对于索引，会保存在额外的文件中。</p>\n<p>索引是帮助 MySQL 高效获取数据的数据结构。</p>\n<h3 id=\"6-索引能干什么有什么好处\"><a class=\"anchor\" href=\"#6-索引能干什么有什么好处\">#</a> 6. 索引能干什么？有什么好处？</h3>\n<p>当表中的数据量越来越大时，索引对于性能的影响愈发重要。索引能够轻易将查询性能提高好几个数量级，总的来说就是可以明显的提高查询效率。</p>\n<h3 id=\"7-索引的种类有哪些\"><a class=\"anchor\" href=\"#7-索引的种类有哪些\">#</a> 7. 索引的种类有哪些？</h3>\n<p>1、从存储结构上来划分：BTree 索引（B-Tree 或 B+Tree 索引），Hash 索引，full-index 全文索引，R-Tree 索引。这里所描述的是索引存储时保存的形式，</p>\n<p>2、从应用层次来分：普通索引，唯一索引，复合索引</p>\n<p>3、根据中数据的物理顺序与键值的逻辑（索引）顺序关系：聚集索引，非聚集索引。</p>\n<p>平时讲的索引类型一般是指在应用层次的划分。</p>\n<ul>\n<li>普通索引：即一个索引只包含单个列，一个表可以有多个单列索引</li>\n<li>复合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</li>\n<li>唯一索引：索引列的值必须唯一，但允许有空值</li>\n</ul>\n<h3 id=\"8-为什么-mysql-的索引要使用-b树而不是其它树形结构比如-b-树\"><a class=\"anchor\" href=\"#8-为什么-mysql-的索引要使用-b树而不是其它树形结构比如-b-树\">#</a> 8. 为什么 MySQL 的索引要使用 B + 树而不是其它树形结构？比如 B 树？</h3>\n<p>B-tree：因为 B 树不管叶子节点还是非叶子节点，都会保存数据，这样导致在非叶子节点中能保存的指针数量变少（有些资料也称为扇出），指针少的情况下要保存大量数据，只能增加树的高度，导致 IO 操作变多，查询性能变低；</p>\n<p>Hash：虽然可以快速定位，但是没有顺序，IO 复杂度高。</p>\n<p>二叉树：树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且 IO 代价高。</p>\n<p>红黑树：树的高度随着数据量增加而增加，IO 代价高。</p>\n<p><strong>不使用平衡二叉树的原因如下</strong>：</p>\n<p>最大原因：深度太大 (因为一个节点最多只有 2 个子节点)，一次查询需要的 I/O 复杂度为 O (lgN), 而 b+tree 只需要 O (log_mN), 而其出度 m 非常大，其深度一般不会超过 4 平衡二叉树逻辑上很近的父子节点，物理上可能很远，无法充分发挥磁盘顺序读和预读的高效特性。</p>\n<h3 id=\"9-myisam和innodb实现btree索引方式的区别\"><a class=\"anchor\" href=\"#9-myisam和innodb实现btree索引方式的区别\">#</a> 9. MyISAM 和 InnoDB 实现 BTree 索引方式的区别</h3>\n<p><strong>MyISAM</strong></p>\n<p>B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为 “非聚簇索引”。 索引文件和数据文件是分离的</p>\n<p><strong>InnoDB</strong></p>\n<ul>\n<li>InnoDB 的 B+Tree 索引分为主索引（聚集索引）和辅助索引 (非聚集索引)。一张表一定包含一个聚集索引构成的 B+ 树以及若干辅助索引的构成的 B+ 树。</li>\n<li>辅助索引的存在并不会影响聚集索引，因为聚集索引构成的 B+ 树是数据实际存储的形式，而辅助索引只用于加速数据的查找，所以一张表上往往有多个辅助索引以此来提升数据库的性能。</li>\n<li>就很容易明白为什么不建议使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。再例如，用非单调的字段作为主键在 InnoDB 中不是个好主意，因为 InnoDB 数据文件本身是一颗 B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持 B+Tree 的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。</li>\n</ul>\n<h3 id=\"10-什么是最左匹配原则\"><a class=\"anchor\" href=\"#10-什么是最左匹配原则\">#</a> 10. 什么是最左匹配原则？</h3>\n<p>最左优先，以最左边的为起点任何连续的索引都能匹配上。同时遇到范围查询 (&gt;、&lt;、between、like) 就会停止匹配。 例如：b = 2 如果建立 (a,b) 顺序的索引，是匹配不到 (a,b) 索引的；但是如果查询条件是 a = 1 and b = 2, 就可以，因为<strong>优化器会自动调整 a,b 的顺序</strong>。再比如 a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立 (a,b,c,d) 顺序的索引，d 是用不到索引的，因为 c 字段是一个范围查询，它之后的字段会停止匹配。</p>\n<p><strong>最左匹配原则的原理</strong></p>\n<p>MySQL 中的索引可以以一定顺序引用多列，这种索引叫作联合索引。最左匹配原则都是针对联合索引来说的</p>\n<ul>\n<li>我们都知道索引的底层是一颗 B + 树，那么联合索引当然还是一颗 B + 树，只不过联合索引的健值数量不是一个，而是多个。构建一颗 B + 树只能根据一个值来构建，因此数据库依据联合索引最左的字段来构建 B + 树。 例子：假如创建一个（a,b) 的联合索引，那么它的索引树是这样的可以看到 a 的值是有顺序的，1，1，2，2，3，3，而 b 的值是没有顺序的 1，2，1，4，1，2。所以 b = 2 这种查询条件没有办法利用索引，因为联合索引首先是按 a 排序的，b 是无序的。</li>\n</ul>\n<p>同时我们还可以发现在 a 值相等的情况下，b 值又是按顺序排列的，但是这种顺序是相对的。所以最左匹配原则遇上范围查询就会停止，剩下的字段都无法使用索引。例如 a = 1 and b = 2 a,b 字段都可以使用索引，因为在 a 值确定的情况下 b 是相对有序的，而 a&gt;1and b=2，a 字段可以匹配上索引，但 b 值不可以，因为 a 的值是一个范围，在这个范围中 b 是无序的。</p>\n<p>优点：最左前缀原则的利用也可以显著提高查询效率，是常见的 MySQL 性能优化手段。</p>\n<h3 id=\"11-哪些列上适合创建索引创建索引有哪些开销\"><a class=\"anchor\" href=\"#11-哪些列上适合创建索引创建索引有哪些开销\">#</a> 11. 哪些列上适合创建索引？创建索引有哪些开销？</h3>\n<p>经常需要作为条件查询的列上适合创建索引，并且该列上也必须有一定的区分度。创建索引需要维护，在插入数据的时候会重新维护各个索引树（数据页的分裂与合并），对性能造成影响</p>\n<h3 id=\"12-索引这么多优点为什么不对表中的每一个列创建一个索引呢\"><a class=\"anchor\" href=\"#12-索引这么多优点为什么不对表中的每一个列创建一个索引呢\">#</a> 12. 索引这么多优点，为什么不对表中的每一个列创建一个索引呢？</h3>\n<ol>\n<li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</li>\n<li>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</li>\n<li>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</li>\n</ol>\n<h3 id=\"13-mysql建表的约束条件有哪些\"><a class=\"anchor\" href=\"#13-mysql建表的约束条件有哪些\">#</a> 13. <strong>MySQL 建表的约束条件有哪些</strong>？</h3>\n<ul>\n<li>主键约束（Primay Key Coustraint） 唯一性，非空性</li>\n<li>唯一约束 （Unique Counstraint）唯一性，可以空，但只能有一个</li>\n<li>检查约束 (Check Counstraint) 对该列数据的范围、格式的限制</li>\n<li>默认约束 (Default Counstraint) 该数据的默认值</li>\n<li>外键约束 (Foreign Key Counstraint) 需要建立两表间的关系并引用主表的列</li>\n</ul>\n<h3 id=\"14-mysql执行查询的过程\"><a class=\"anchor\" href=\"#14-mysql执行查询的过程\">#</a> 14. MySQL 执行查询的过程？</h3>\n<ol>\n<li>客户端通过 TCP 连接发送连接请求到 mysql 连接器，连接器会对该请求进行权限验证及连接资源分配</li>\n<li>查缓存。（当判断缓存是否命中时，MySQL 不会进行解析查询语句，而是直接使用 SQL 语句和客户端发送过来的其他原始信息。所以，任何字符上的不同，例如空格、注解等都会导致缓存的不命中。）</li>\n<li>语法分析（SQL 语法是否写错了）。 如何把语句给到预处理器，检查数据表和数据列是否存在，解析别名看是否存在歧义。</li>\n<li>优化。是否使用索引，生成执行计划。</li>\n<li>交给执行器，将数据保存到结果集中，同时会逐步将数据缓存到查询缓存中，最终将结果集返回给客户端。</li>\n</ol>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210220120155334.png\" alt=\"img\" /></p>\n<h3 id=\"15-mysql的binlog有有几种录入格式分别有什么区别\"><a class=\"anchor\" href=\"#15-mysql的binlog有有几种录入格式分别有什么区别\">#</a> 15. MySQL 的 binlog 有有几种录入格式？分别有什么区别？</h3>\n<p>有三种格式，statement,row 和 mixed.</p>\n<ul>\n<li>statement 模式下，记录单元为语句。即每一个 sql 造成的影响会记录。由于 sql 的执行是有上下文的，因此在保存的时候需要保存相关的信息，同时还有一些使用了函数之类的语句无法被记录复制.</li>\n<li>row 级别下，记录单元为每一行的改动，基本是可以全部记下来但是由于很多操作，会导致大量行的改动 (比如 alter table), 因此这种模式的文件保存的信息太多，日志量太大。</li>\n<li>mixed. 一种折中的方案，普通操作使用 statement 记录，当无法使用 statement 的时候使用 row. 此外，新版的 MySQL 中对 row 级别也做了一些优化，当表结构发生变化的时候，会记录语句而不是逐行记录.</li>\n</ul>\n<div class=\"note info\">\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210822210317322.png\" alt=\"image-20210822210317322\" /></p>\n<h3 id=\"16-数据库的三范式是什么\"><a class=\"anchor\" href=\"#16-数据库的三范式是什么\">#</a> 16. 数据库的三范式是什么？</h3>\n<ul>\n<li>第一范式：强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。</li>\n<li>第二范式：要求实体的属性完全依赖于主关键字。所谓完全 依赖是指不能存在仅依赖主关键字一部分的属性。</li>\n<li>第三范式：任何非主属性不依赖于其它非主属性。</li>\n</ul>\n<h3 id=\"17-mysql-支持哪些存储引擎\"><a class=\"anchor\" href=\"#17-mysql-支持哪些存储引擎\">#</a> 17. MySQL 支持哪些存储引擎？</h3>\n<p>MySQL 支持多种存储引擎，比如 InnoDB,MyISAM,Memory,Archive 等等。在大多数的情况下，直接选择使用 InnoDB 引擎都是最合适的，InnoDB 也是 MySQL 的默认存储引擎。</p>\n<p>MyISAM 和 InnoDB 的区别有哪些：</p>\n<ul>\n<li>InnoDB 支持事务，MyISAM 不支持</li>\n<li>InnoDB 支持外键，而 MyISAM 不支持</li>\n<li>InnoDB 是聚集索引，数据文件是和索引绑在一起的，必须要有主键，通过主键索引效率很高；MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的。</li>\n<li>Innodb 不支持全文索引，而 MyISAM 支持全文索引，查询效率上 MyISAM 要高；</li>\n<li>InnoDB 不保存表的具体行数，MyISAM 用一个变量保存了整个表的行数。</li>\n<li>MyISAM 采用表级锁 (table-level locking)；InnoDB 支持行级锁 (row-level locking) 和表级锁，默认为行级锁。</li>\n</ul>\n<h3 id=\"18-超键-候选键-主键-外键分别是什么\"><a class=\"anchor\" href=\"#18-超键-候选键-主键-外键分别是什么\">#</a> 18. 超键、候选键、主键、外键分别是什么？</h3>\n<ul>\n<li>超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</li>\n<li>候选键：是最小超键，即没有冗余元素的超键。</li>\n<li>主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。</li>\n<li>外键：在一个表中存在的另一个表的主键称此表的外键。</li>\n</ul>\n<h3 id=\"19-sql-约束有哪几种\"><a class=\"anchor\" href=\"#19-sql-约束有哪几种\">#</a> 19. SQL 约束有哪几种？</h3>\n<ul>\n<li>NOT NULL: 用于控制字段的内容一定不能为空（NULL）。</li>\n<li>UNIQUE: 控件字段内容不能重复，一个表允许有多个 Unique 约束。</li>\n<li>PRIMARY KEY: 也是用于控件字段内容不能重复，但它在一个表只允许出现一个。</li>\n<li>FOREIGN KEY: 用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</li>\n<li>CHECK: 用于控制字段的值范围。</li>\n</ul>\n<h3 id=\"20-mysql-中的-varchar-和-char-有什么区别\"><a class=\"anchor\" href=\"#20-mysql-中的-varchar-和-char-有什么区别\">#</a> 20. MySQL 中的 varchar 和 char 有什么区别？</h3>\n<p>char 是一个定长字段，假如申请了 <code>char(10)</code>  的空间，那么无论实际存储多少内容。该字段都占用 10 个字符，而 varchar 是变长的，也就是说申请的只是最大长度，占用的空间为实际字符长度 + 1, 最后一个字符存储使用了多长的空间.</p>\n<p>在检索效率上来讲，char &gt; varchar, 因此在使用中，如果确定某个字段的值的长度，可以使用 char, 否则应该尽量使用 varchar. 例如存储用户 MD5 加密后的密码，则应该使用 char。</p>\n<h3 id=\"21-mysql中-in-和-exists-区别\"><a class=\"anchor\" href=\"#21-mysql中-in-和-exists-区别\">#</a> 21. MySQL 中 in 和 exists 区别</h3>\n<p>MySQL 中的 in 语句是把外表和内表作 hash 连接，而 exists 语句是对外表作 loop 循环，每次 loop 循环再对内表进行查询。一直大家都认为 exists 比 in 语句的效率要高，这种说法其实是不准确的。这个是要区分环境的。</p>\n<p>如果查询的两个表大小相当，那么用 in 和 exists 差别不大。 如果两个表中一个较小，一个是大表，则子查询表大的用 exists，子查询表小的用 in。 not in 和 not exists：如果查询语句使用了 not in，那么内外表都进行全表扫描，没有用到索引；而 not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用 not exists 都比 not in 要快。</p>\n<h3 id=\"22-drop-delete与truncate的区别\"><a class=\"anchor\" href=\"#22-drop-delete与truncate的区别\">#</a> 22. drop、delete 与 truncate 的区别</h3>\n<p>三者都表示删除，但是三者有一些差别：</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210822203927822.png\" alt=\"image-20210822203927822\" /></p>\n<h3 id=\"23-什么是存储过程有哪些优缺点\"><a class=\"anchor\" href=\"#23-什么是存储过程有哪些优缺点\">#</a> 23. 什么是存储过程？有哪些优缺点？</h3>\n<p>存储过程是一些预编译的 SQL 语句。</p>\n<p>1、更加直白的理解：存储过程可以说是一个记录集，它是由一些 T-SQL 语句组成的代码块，这些 T-SQL 语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了。</p>\n<p>2、存储过程是一个预编译的代码块，执行效率比较高，一个存储过程替代大量 T_SQL 语句 ，可以降低网络通信量，提高通信速率，可以一定程度上确保数据安全</p>\n<p>但是，在互联网项目中，其实是不太推荐存储过程的，比较出名的就是阿里的《Java 开发手册》中禁止使用存储过程，我个人的理解是，在互联网项目中，迭代太快，项目的生命周期也比较短，人员流动相比于传统的项目也更加频繁，在这样的情况下，存储过程的管理确实是没有那么方便，同时，复用性也没有写在服务层那么好。</p>\n<h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<h3 id=\"1-什么是数据库事务\"><a class=\"anchor\" href=\"#1-什么是数据库事务\">#</a> 1. 什么是数据库事务？</h3>\n<p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。</p>\n<p>事务最经典也经常被拿出来说例子就是转账了。</p>\n<p>假如小明要给小红转账 1000 元，这个转账会涉及到两个关键操作就是：将小明的余额减少 1000 元，将小红的余额增加 1000 元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p>\n<h3 id=\"2-介绍一下事务具有的四个特征\"><a class=\"anchor\" href=\"#2-介绍一下事务具有的四个特征\">#</a> 2. 介绍一下事务具有的四个特征</h3>\n<p>事务就是一组原子性的操作，这些操作要么全部发生，要么全部不发生。事务把数据库从一种一致性状态转换成另一种一致性状态。</p>\n<ul>\n<li>原子性。事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做</li>\n<li>一致性。事 务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。</li>\n<li>隔离性。一个事务的执行不能其它事务干扰。即一个事务内部的 // 操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</li>\n<li>持续性。也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。</li>\n</ul>\n<h3 id=\"3-说一下mysql-的四种隔离级别\"><a class=\"anchor\" href=\"#3-说一下mysql-的四种隔离级别\">#</a> 3. 说一下 MySQL 的四种隔离级别</h3>\n<ul>\n<li>Read Uncommitted（读取未提交内容）</li>\n</ul>\n<p>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p>\n<ul>\n<li>Read Committed（读取提交内容）</li>\n</ul>\n<p>这是大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓 的 不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的 commit，所以同一 select 可能返回不同结果。</p>\n<ul>\n<li>Repeatable Read（可重读）</li>\n</ul>\n<p>这是 MySQL 的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。</p>\n<ul>\n<li>Serializable（可串行化）</li>\n</ul>\n<p>通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210822180308501.png\" alt=\"image-20210822180308501\" /></p>\n<p>MySQL 默认采用的 REPEATABLE_READ 隔离级别 Oracle 默认采用的 READ_COMMITTED 隔离级别</p>\n<p>事务隔离机制的实现基于锁机制和并发调度。其中并发调度使用的是 MVVC（多版本并发控制），通过保存修改的旧版本信息来支持并发一致性读和回滚等特性。</p>\n<p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 READ-COMMITTED (读取提交内容):，但是你要知道的是 InnoDB 存储引擎默认使用 **REPEATABLE-READ（可重读）** 并不会有任何性能损失。</p>\n<p>InnoDB 存储引擎在 分布式事务 的情况下一般会用到 **SERIALIZABLE (可串行化)** 隔离级别。</p>\n<h3 id=\"4-什么是脏读幻读不可重复读\"><a class=\"anchor\" href=\"#4-什么是脏读幻读不可重复读\">#</a> 4. 什么是脏读？幻读？不可重复读？</h3>\n<p>1、脏读：事务 A 读取了事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据</p>\n<p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务 A 多次读取同一数据时，结果 不一致。</p>\n<p>3、幻读：系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p>\n<p>不可重复读侧重于修改，幻读侧重于新增或删除（多了或少量行），脏读是一个事务回滚影响另外一个事务。</p>\n<h3 id=\"5-事务的实现原理\"><a class=\"anchor\" href=\"#5-事务的实现原理\">#</a> 5. 事务的实现原理</h3>\n<p>事务是基于重做日志文件 (redo log) 和回滚日志 (undo log) 实现的。</p>\n<p>每提交一个事务必须先将该事务的所有日志写入到重做日志文件进行持久化，数据库就可以通过重做日志来保证事务的原子性和持久性。</p>\n<p>每当有修改事务时，还会产生 undo log，如果需要回滚，则根据 undo log 的反向语句进行逻辑操作，比如 insert 一条记录就 delete 一条记录。undo log 主要实现数据库的一致性。</p>\n<h3 id=\"6-mysql事务日志介绍下\"><a class=\"anchor\" href=\"#6-mysql事务日志介绍下\">#</a> 6. MySQL 事务日志介绍下？</h3>\n<p>innodb 事务日志包括 redo log 和 undo log。</p>\n<p>undo log 指事务开始之前，在操作任何数据之前，首先将需操作的数据备份到一个地方。redo log 指事务中操作的任何数据，将最新的数据备份到一个地方。</p>\n<p>事务日志的目的：实例或者介质失败，事务日志文件就能派上用场。</p>\n<p><strong>redo log</strong></p>\n<p>redo log 不是随着事务的提交才写入的，而是在事务的执行过程中，便开始写入 redo 中。具体的落盘策略可以进行配置 。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启 MySQL 服务的时候，根据 redo log 进行重做，从而达到事务的未入磁盘数据进行持久化这一特性。RedoLog 是为了实现事务的持久性而出现的产物。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210822181340692.png\" alt=\"image-20210822181340692\" /></p>\n<p><strong>undo log</strong></p>\n<p>undo log 用来回滚行记录到某个版本。事务未提交之前，Undo 保存了未提交之前的版本数据，Undo 中的数据可作为数据旧版本快照供其他并发事务进行快照读。是为了实现事务的原子性而出现的产物，在 MySQL innodb 存储引擎中用来实现多版本并发控制。</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/image-20210822181416382.png\" alt=\"image-20210822181416382\" /></p>\n<h3 id=\"7-什么是mysql的-binlog\"><a class=\"anchor\" href=\"#7-什么是mysql的-binlog\">#</a> 7. 什么是 MySQL 的 binlog？</h3>\n<p>MySQL 的 binlog 是记录所有数据库表结构变更（例如 CREATE、ALTER TABLE）以及表数据修改（INSERT、UPDATE、DELETE）的二进制日志。binlog 不会记录 SELECT 和 SHOW 这类操作，因为这类操作对数据本身并没有修改，但你可以通过查询通用日志来查看 MySQL 执行过的所有语句。</p>\n<p>MySQL binlog 以事件形式记录，还包含语句所执行的消耗的时间，MySQL 的二进制日志是事务安全型的。binlog 的主要目的是复制和恢复。</p>\n<p>binlog 有三种格式，各有优缺点：</p>\n<ul>\n<li><strong>statement：</strong> 基于 SQL 语句的模式，某些语句和函数如 UUID, LOAD DATA INFILE 等在复制过程可能导致数据不一致甚至出错。</li>\n<li><strong>row：</strong> 基于行的模式，记录的是行的变化，很安全。但是 binlog 会比其他两种模式大很多，在一些大表中清除大量数据时在 binlog 中会生成很多条语句，可能导致从库延迟变大。</li>\n<li><strong>mixed：</strong> 混合模式，根据语句来选用是 statement 还是 row 模式。</li>\n</ul>\n<h3 id=\"8-在事务中可以混合使用存储引擎吗\"><a class=\"anchor\" href=\"#8-在事务中可以混合使用存储引擎吗\">#</a> <strong>8. 在事务中可以混合使用存储引擎吗？</strong></h3>\n<p>尽量不要在同一个事务中使用多种存储引擎，MySQL 服务器层不管理事务，事务是由下层的存储引擎实现的。</p>\n<p>如果在事务中混合使用了事务型和非事务型的表（例如 InnoDB 和 MyISAM 表）, 在正常提交的情况下不会有什么问题。</p>\n<p>但如果该事务需要回滚，非事务型的表上的变更就无法撤销，这会导致数据库处于不一致的状态，这种情况很难修复，事务的最终结果将无法确定。所以，为每张表选择合适的存储引擎非常重要。</p>\n<h3 id=\"9-mysql中是如何实现事务隔离的\"><a class=\"anchor\" href=\"#9-mysql中是如何实现事务隔离的\">#</a> 9. MySQL 中是如何实现事务隔离的？</h3>\n<p>读未提交和串行化基本上是不需要考虑的隔离级别，前者不加锁限制，后者相当于单线程执行，效率太差。</p>\n<p>MySQL 在可重复读级别解决了幻读问题，是通过行锁和间隙锁的组合 Next-Key 锁实现的。</p>\n<p>详细原理看这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWljb2Rlci5uZXQvbm90ZS9NeVNRTC1pbnRlcnZpZXcvTXlTUUwtaW50ZXJ2aWV3LU15U1FMLXRyYW5zLWxldmVsLmh0bWw=\">https://haicoder.net/note/MySQL-interview/MySQL-interview-MySQL-trans-level.html</span></p>\n<h3 id=\"10-什么是-mvcc\"><a class=\"anchor\" href=\"#10-什么是-mvcc\">#</a> 10. 什么是 MVCC？</h3>\n<p>MVCC， 即多版本并发控制。MVCC 的实现，是通过保存数据在某个时间点的快照来实现的。根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。</p>\n<h3 id=\"11-mvcc-的实现原理\"><a class=\"anchor\" href=\"#11-mvcc-的实现原理\">#</a> 11. MVCC 的实现原理</h3>\n<p>对于 InnoDB ，聚簇索引记录中包含 3 个隐藏的列：</p>\n<ul>\n<li>ROW ID：隐藏的自增 ID，如果表没有主键，InnoDB 会自动按 ROW ID 产生一个聚集索引树。</li>\n<li>事务 ID：记录最后一次修改该记录的事务 ID。</li>\n<li>回滚指针：指向这条记录的上一个版本。</li>\n</ul>\n<p>我们拿上面的例子，对应解释下 MVCC 的实现原理，如下图：</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/modb_95751916-225c-11eb-b0bb-5254001c05fe.png\" alt=\"img\" /></p>\n<p>如图，首先 insert 语句向表 t1 中插入了一条数据，a 字段为 1，b 字段为 1， ROW ID 也为 1 ，事务 ID 假设为 1，回滚指针假设为 null。当执行 update t1 set b=666 where a=1 时，大致步骤如下：</p>\n<ul>\n<li>数据库会先对满足 a=1 的行加排他锁；</li>\n<li>然后将原记录复制到 undo 表空间中；</li>\n<li>修改 b 字段的值为 666，修改事务 ID 为 2；</li>\n<li>并通过隐藏的回滚指针指向 undo log 中的历史记录；</li>\n<li>事务提交，释放前面对满足 a=1 的行所加的排他锁。</li>\n</ul>\n<p>在前面实验的第 6 步中，session2 查询的结果是 session1 修改之前的记录，这个记录就是<strong>来自 undolog</strong> 中。</p>\n<p>因此可以总结出 MVCC 实现的原理大致是：</p>\n<p>InnoDB 每一行数据都有一个隐藏的回滚指针，用于指向该行修改前的最后一个历史版本，这个历史版本存放在 undo log 中。如果要执行更新操作，会将原记录放入 undo log 中，并通过隐藏的回滚指针指向 undo log 中的原记录。其它事务此时需要查询时，就是查询 undo log 中这行数据的最后一个历史版本。</p>\n<p>MVCC 最大的好处是读不加锁，读写不冲突，极大地增加了 MySQL 的并发性。通过 MVCC，保证了事务 ACID 中的 I（隔离性）特性。</p>\n<h2 id=\"锁\"><a class=\"anchor\" href=\"#锁\">#</a> 锁</h2>\n<h3 id=\"1-为什么要加锁\"><a class=\"anchor\" href=\"#1-为什么要加锁\">#</a> 1. 为什么要加锁？</h3>\n<p>当多个用户并发地存取数据时，在数据库 (opens new window) 中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。</p>\n<p>保证多用户环境下保证数据库完整性和一致性。</p>\n<h3 id=\"2-按照锁的粒度分数据库锁有哪些\"><a class=\"anchor\" href=\"#2-按照锁的粒度分数据库锁有哪些\">#</a> 2. 按照锁的粒度分数据库锁有哪些？</h3>\n<p>在关系型数据库中，可以<strong>按照锁的粒度把数据库锁分</strong>为行级锁 (INNODB 引擎)、表级锁 (MYISAM 引擎) 和页级锁 (BDB 引擎 )。</p>\n<p>行级锁</p>\n<ul>\n<li>行级锁是 MySQL (opens new window) 中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。行级锁分为共享锁 和 排他锁。</li>\n<li>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li>\n</ul>\n<p>表级锁</p>\n<ul>\n<li>表级锁是 MySQL 中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分 MySQL 引擎支持。最常使用的 MYISAM 与 INNODB 都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。</li>\n<li>开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低。</li>\n</ul>\n<p>页级锁</p>\n<ul>\n<li>页级锁是 MySQL 中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。BDB 支持页级锁</li>\n<li>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</li>\n</ul>\n<p><strong>MyISAM 和 InnoDB 存储引擎使用的锁：</strong></p>\n<ul>\n<li>MyISAM 采用表级锁 (table-level locking)。</li>\n<li>InnoDB 支持行级锁 (row-level locking) 和表级锁，默认为行级锁</li>\n</ul>\n<h3 id=\"3-从锁的类别上分mysql都有哪些锁呢\"><a class=\"anchor\" href=\"#3-从锁的类别上分mysql都有哪些锁呢\">#</a> 3. 从锁的类别上分 MySQL 都有哪些锁呢？</h3>\n<p>从锁的类别上来讲，有共享锁和排他锁。</p>\n<ul>\n<li>共享锁：又叫做读锁。 当用户要进行数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。</li>\n<li>排他锁：又叫做写锁。 当用户要进行数据的写入时，对数据加上排他锁。排他锁只可以加一个，他和其他的排他锁，共享锁都相斥。</li>\n</ul>\n<p>用上面的例子来说就是用户的行为有两种，一种是来看房，多个用户一起看房是可以接受的。 一种是真正的入住一晚，在这期间，无论是想入住的还是想看房的都不可以。</p>\n<p>锁的粒度取决于具体的存储引擎，InnoDB 实现了行级锁，页级锁，表级锁。</p>\n<p>他们的加锁开销从大到小，并发能力也是从大到小。</p>\n<h3 id=\"4-数据库的乐观锁和悲观锁是什么怎么实现的\"><a class=\"anchor\" href=\"#4-数据库的乐观锁和悲观锁是什么怎么实现的\">#</a> 4. 数据库的乐观锁和悲观锁是什么？怎么实现的？</h3>\n<p>数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。乐观并发控制（乐观锁）和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p>\n<ul>\n<li>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。在查询完数据的时候就把事务锁起来，直到提交事务。实现方式：使用数据库中的锁机制</li>\n<li>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。在修改数据的时候把事务锁起来，通过 version 的方式来进行锁定。实现方式：乐一般会使用版本号机制或 CAS 算法实现。</li>\n</ul>\n<p><strong>两种锁的使用场景</strong></p>\n<p>从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。</p>\n<p>但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行 retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。</p>\n<h3 id=\"5-innodb引擎的行锁是怎么实现的\"><a class=\"anchor\" href=\"#5-innodb引擎的行锁是怎么实现的\">#</a> 5. InnoDB 引擎的行锁是怎么实现的？</h3>\n<p>InnoDB 是基于索引来完成行锁</p>\n<p>例: select * from tab_with_index where id = 1 for update;</p>\n<p>for update 可以根据条件来完成行锁锁定，并且 id 是有索引键的列，如果 id 不是索引键那么 InnoDB 将完成表锁，并发将无从谈起</p>\n<h3 id=\"6-什么是死锁怎么解决\"><a class=\"anchor\" href=\"#6-什么是死锁怎么解决\">#</a> 6. 什么是死锁？怎么解决？</h3>\n<p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象。</p>\n<p>常见的解决死锁的方法</p>\n<p>1、如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。</p>\n<p>2、在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；</p>\n<p>3、对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；</p>\n<p>如果业务处理不好可以用分布式事务锁或者使用乐观锁</p>\n<h3 id=\"7-隔离级别与锁的关系\"><a class=\"anchor\" href=\"#7-隔离级别与锁的关系\">#</a> 7. 隔离级别与锁的关系</h3>\n<p>在 Read Uncommitted 级别下，读取数据不需要加共享锁，这样就不会跟被修改的数据上的排他锁冲突</p>\n<p>在 Read Committed 级别下，读操作需要加共享锁，但是在语句执行完以后释放共享锁；</p>\n<p>在 Repeatable Read 级别下，读操作需要加共享锁，但是在事务提交之前并不释放共享锁，也就是必须等待事务执行完毕以后才释放共享锁。</p>\n<p>SERIALIZABLE 是限制性最强的隔离级别，因为该级别锁定整个范围的键，并一直持有锁，直到事务完成。</p>\n<h3 id=\"8-优化锁方面的意见\"><a class=\"anchor\" href=\"#8-优化锁方面的意见\">#</a> 8. 优化锁方面的意见？</h3>\n<ul>\n<li>使用较低的隔离级别</li>\n<li>设计索引，尽量使用索引去访问数据，加锁更加精确，从而减少锁冲突</li>\n<li>选择合理的事务大小，给记录显示加锁时，最好一次性请求足够级别的锁。列如，修改数据的话，最好申请排他锁，而不是先申请共享锁，修改时在申请排他锁，这样会导致死锁</li>\n<li>不同的程序访问一组表的时候，应尽量约定一个相同的顺序访问各表，对于一个表而言，尽可能的固定顺序的获取表中的行。这样大大的减少死锁的机会。</li>\n<li>尽量使用相等条件访问数据，这样可以避免间隙锁对并发插入的影响</li>\n<li>不要申请超过实际需要的锁级别</li>\n<li>数据查询的时候不是必要，不要使用加锁。MySQL 的 MVCC 可以实现事务中的查询不用加锁，优化事务性能：MVCC 只在 committed read（读提交）和 repeatable read （可重复读）两种隔离级别</li>\n<li>对于特定的事务，可以使用表锁来提高处理速度活着减少死锁的可能。</li>\n</ul>\n<h2 id=\"分库分表\"><a class=\"anchor\" href=\"#分库分表\">#</a> 分库分表</h2>\n<h3 id=\"1-为什么要分库分表\"><a class=\"anchor\" href=\"#1-为什么要分库分表\">#</a> 1. 为什么要分库分表？</h3>\n<p><strong>分表</strong></p>\n<p>比如你单表都几千万数据了，你确定你能扛住么？绝对不行，单表数据量太大，会极大影响你的 sql 执行的性能，到了后面你的 sql 可能就跑的很慢了。一般来说，就以我的经验来看，单表到几百万的时候，性能就会相对差一些了，你就得分表了。</p>\n<p>分表就是把一个表的数据放到多个表中，然后查询的时候你就查一个表。比如按照用户 id 来分表，将一个用户的数据就放在一个表中。然后操作的时候你对一个用户就操作那个表就好了。这样可以控制每个表的数据量在可控的范围内，比如每个表就固定在 200 万以内。</p>\n<p><strong>分库</strong></p>\n<p>分库就是你一个库一般我们经验而言，最多支撑到并发 2000，一定要扩容了，而且一个健康的单库并发值你最好保持在每秒 1000 左右，不要太大。那么你可以将一个库的数据拆分到多个库中，访问的时候就访问一个库好了。</p>\n<p>这就是所谓的分库分表。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/14266602-ae74054f45f44e3d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"img\" /></p>\n<h3 id=\"2-用过哪些分库分表中间件不同的分库分表中间件都有什么优点和缺点\"><a class=\"anchor\" href=\"#2-用过哪些分库分表中间件不同的分库分表中间件都有什么优点和缺点\">#</a> 2. 用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？</h3>\n<p>这个其实就是看看你了解哪些分库分表的中间件，各个中间件的优缺点是啥？然后你用过哪些分库分表的中间件。</p>\n<p>比较常见的包括：</p>\n<ul>\n<li>cobar</li>\n<li>TDDL</li>\n<li>atlas</li>\n<li>sharding-jdbc</li>\n<li>mycat</li>\n</ul>\n<p><strong>cobar</strong></p>\n<p>阿里 b2b 团队开发和开源的，属于 proxy 层方案。早些年还可以用，但是最近几年都没更新了，基本没啥人用，差不多算是被抛弃的状态吧。而且不支持读写分离、存储过程、跨库 join 和分页等操作。</p>\n<p><strong>TDDL</strong></p>\n<p>淘宝团队开发的，属于 client 层方案。支持基本的 crud 语法和读写分离，但不支持 join、多表查询等语法。目前使用的也不多，因为还依赖淘宝的 diamond 配置管理系统。</p>\n<p><strong>atlas</strong></p>\n<p>360 开源的，属于 proxy 层方案，以前是有一些公司在用的，但是确实有一个很大的问题就是社区最新的维护都在 5 年前了。所以，现在用的公司基本也很少了。</p>\n<p><strong>sharding-jdbc</strong></p>\n<p>当当开源的，属于 client 层方案。确实之前用的还比较多一些，因为 SQL 语法支持也比较多，没有太多限制，而且目前推出到了 2.0 版本，支持分库分表、读写分离、分布式 id 生成、柔性事务（最大努力送达型事务、TCC 事务）。而且确实之前使用的公司会比较多一些（这个在官网有登记使用的公司，可以看到从 2017 年一直到现在，是有不少公司在用的），目前社区也还一直在开发和维护，还算是比较活跃，个人认为算是一个现在也<strong>可以选择的方案</strong>。</p>\n<p><strong>mycat</strong></p>\n<p>基于 cobar 改造的，属于 proxy 层方案，支持的功能非常完善，而且目前应该是非常火的而且不断流行的数据库中间件，社区很活跃，也有一些公司开始在用了。但是确实相比于 sharding jdbc 来说，年轻一些，经历的锤炼少一些。</p>\n<h3 id=\"3-如何对数据库如何进行垂直拆分或水平拆分的\"><a class=\"anchor\" href=\"#3-如何对数据库如何进行垂直拆分或水平拆分的\">#</a> 3. 如何对数据库如何进行垂直拆分或水平拆分的？</h3>\n<p><strong>水平拆分</strong>的意思，就是把一个表的数据给弄到多个库的多个表里去，但是每个库的表结构都一样，只不过每个库表放的数据是不同的，所有库表的数据加起来就是全部数据。水平拆分的意义，就是将数据均匀放更多的库里，然后用多个库来抗更高的并发，还有就是用多个库的存储容量来进行扩容。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/10089464-0e01dfe246b5c7ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/474/format/webp\" alt=\"img\" /></p>\n<p><strong>垂直拆分</strong>的意思，就是<strong>把一个有很多字段的表给拆分成多个表</strong>，<strong>或者是多个库上去</strong>。每个库表的结构都不一样，每个库表都包含部分字段。一般来说，会<strong>将较少的访问频率很高的字段放到一个表里去</strong>，然后<strong>将较多的访问频率很低的字段放到另外一个表里去</strong>。因为数据库是有缓存的，你访问频率高的行字段越少，就可以在缓存里缓存更多的行，性能就越好。这个一般在表层面做的较多一些。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/10089464-ab3069913c0f097c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320/format/webp\" alt=\"img\" /></p>\n<p>两种<strong>分库分表的方式</strong>：</p>\n<ul>\n<li>一种是按照 range 来分，就是每个库一段连续的数据，这个一般是按比如<strong>时间范围</strong>来的，但是这种一般较少用，因为很容易产生热点问题，大量的流量都打在最新的数据上了。</li>\n<li>或者是按照某个字段 hash 一下均匀分散，这个较为常用。</li>\n</ul>\n<p>range 来分，好处在于说，扩容的时候很简单，因为你只要预备好，给每个月都准备一个库就可以了，到了一个新的月份的时候，自然而然，就会写新的库了；缺点，但是大部分的请求，都是访问最新的数据。实际生产用 range，要看场景。</p>\n<p>hash 分发，好处在于说，可以平均分配每个库的数据量和请求压力；坏处在于说扩容起来比较麻烦，会有一个数据迁移的过程，之前的数据需要重新计算 hash 值重新分配到不同的库或表</p>\n<h2 id=\"读写分离-主从同步\"><a class=\"anchor\" href=\"#读写分离-主从同步\">#</a> 读写分离、主从同步</h2>\n<h3 id=\"1-什么是mysql主从同步\"><a class=\"anchor\" href=\"#1-什么是mysql主从同步\">#</a> 1. 什么是 MySQL 主从同步？</h3>\n<p>主从同步使得数据可以从一个数据库服务器复制到其他服务器上，在复制数据时，一个服务器充当主服务器（master），其余的服务器充当从服务器（slave）。</p>\n<p>因为复制是异步进行的，所以从服务器不需要一直连接着主服务器，从服务器甚至可以通过拨号断断续续地连接主服务器。通过配置文件，可以指定复制所有的数据库，某个数据库，甚至是某个数据库上的某个表。</p>\n<h3 id=\"2-mysql主从同步的目的为什么要做主从同步\"><a class=\"anchor\" href=\"#2-mysql主从同步的目的为什么要做主从同步\">#</a> 2. MySQL 主从同步的目的？为什么要做主从同步？</h3>\n<ol>\n<li>通过增加从服务器来提高数据库的性能，在主服务器上执行写入和更新，在从服务器上向外提供读功能，可以动态地调整从服务器的数量，从而调整整个数据库的性能。</li>\n<li>提高数据安全 - 因为数据已复制到从服务器，从服务器可以终止复制进程，所以，可以在从服务器上备份而不破坏主服务器相应数据</li>\n<li>在主服务器上生成实时数据，而在从服务器上分析这些数据，从而提高主服务器的性能</li>\n<li>数据备份。一般我们都会做数据备份，可能是写定时任务，一些特殊行业可能还需要手动备份，有些行业要求备份和原数据不能在同一个地方，所以主从就能很好的解决这个问题，不仅备份及时，而且还可以多地备份，保证数据的安全</li>\n</ol>\n<h3 id=\"3-如何实现mysql的读写分离\"><a class=\"anchor\" href=\"#3-如何实现mysql的读写分离\">#</a> 3. 如何实现 MySQL 的读写分离？</h3>\n<p>其实很简单，就是基于主从复制架构，简单来说，就搞一个主库，挂多个从库，然后我们就单单只是写主库，然后主库会自动把数据给同步到从库上去。</p>\n<h3 id=\"4-mysql主从复制流程和原理\"><a class=\"anchor\" href=\"#4-mysql主从复制流程和原理\">#</a> 4. MySQL 主从复制流程和原理？</h3>\n<p>基本原理流程，是 3 个线程以及之间的关联</p>\n<p>主：binlog 线程 —— 记录下所有改变了数据库数据的语句，放进 master 上的 binlog 中；</p>\n<p>从：io 线程 —— 在使用 start slave 之后，负责从 master 上拉取 binlog 内容，放进自己的 relay log 中；</p>\n<p>从：sql 执行线程 —— 执行 relay log 中的语句；</p>\n<p><strong>复制过程如下</strong>：</p>\n<p><img data-src=\"http://blog-img.coolsen.cn/img/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC85LzIxLzE2NWZiNjgzMjIyMDViMmU\" alt=\"img\" /></p>\n<p>Binary log：主数据库的二进制日志</p>\n<p>Relay log：从服务器的中继日志</p>\n<p>第一步：master 在每个事务更新数据完成之前，将该操作记录串行地写入到 binlog 文件中。</p>\n<p>第二步：salve 开启一个 I/O Thread，该线程在 master 打开一个普通连接，主要工作是 binlog dump process。如果读取的进度已经跟上了 master，就进入睡眠状态并等待 master 产生新的事件。I/O 线程最终的目的是将这些事件写入到中继日志中。</p>\n<p>第三步：SQL Thread 会读取中继日志，并顺序执行该日志中的 SQL 事件，从而与主数据库中的数据保持一致。</p>\n<h3 id=\"5-mysql主从同步延时问题如何解决\"><a class=\"anchor\" href=\"#5-mysql主从同步延时问题如何解决\">#</a> 5. MySQL 主从同步延时问题如何解决？</h3>\n<p>MySQL 实际上在有两个同步机制，一个是半同步复制，用来 解决主库数据丢失问题；一个是并行复制，用来 解决主从同步延时问题。</p>\n<ul>\n<li>半同步复制，也叫 semi-sync 复制，指的就是主库写入 binlog 日志之后，就会将强制此时立即将数据同步到从库，从库将日志写入自己本地的 relay log 之后，接着会返回一个 ack 给主库，主库接收到至少一个从库的 ack 之后才会认为写操作完成了。</li>\n<li>并行复制，指的是从库开启多个线程，并行读取 relay log 中不同库的日志，然后并行重放不同库的日志，这是库级别的并行。</li>\n</ul>\n<h2 id=\"mysql优化\"><a class=\"anchor\" href=\"#mysql优化\">#</a> MySQL 优化</h2>\n<h3 id=\"1-如何定位及优化sql语句的性能问题\"><a class=\"anchor\" href=\"#1-如何定位及优化sql语句的性能问题\">#</a> 1. 如何定位及优化 SQL 语句的性能问题？</h3>\n<p>对于低性能的 SQL 语句的定位，最重要也是最有效的方法就是使用执行计划，MySQL 提供了 explain 命令来查看语句的执行计划。 我们知道，不管是哪种数据库，或者是哪种数据库引擎，在对一条 SQL 语句进行执行的过程中都会做很多相关的优化，对于查询语句，最重要的优化方式就是使用索引。</p>\n<p>而执行计划，就是显示数据库引擎对于 SQL 语句的执行的详细情况，其中包含了是否使用索引，使用什么索引，使用的索引的相关信息等。 <img data-src=\"http://blog-img.coolsen.cn/img/image-20210822204026552.png\" alt=\"image-20210822204026552\" /></p>\n<h3 id=\"2-大表数据查询怎么优化\"><a class=\"anchor\" href=\"#2-大表数据查询怎么优化\">#</a> 2. 大表数据查询，怎么优化</h3>\n<ul>\n<li>优化 shema、sql 语句 + 索引；</li>\n<li>第二加缓存，memcached, redis；</li>\n<li>主从复制，读写分离；</li>\n<li>垂直拆分，根据你模块的耦合度，将一个大的系统分为多个小的系统，也就是分布式系统；</li>\n<li>水平切分，针对数据量大的表，这一步最麻烦，最能考验技术水平，要选择一个合理的 sharding key, 为了有好的查询效率，表结构也要改动，做一定的冗余，应用也要改，sql 中尽量带 sharding key，将数据定位到限定的表上去查，而不是扫描全部的表；</li>\n</ul>\n<h3 id=\"3-超大分页怎么处理\"><a class=\"anchor\" href=\"#3-超大分页怎么处理\">#</a> 3. 超大分页怎么处理？</h3>\n<p>数据库层面，这也是我们主要集中关注的 (虽然收效没那么大), 类似于 <code>select * from table where age &gt; 20 limit 1000000</code> ,10 这种查询其实也是有可以优化的余地的。这条语句需要 load1000000 数据然后基本上全部丢弃，只取 10 条当然比较慢。当时我们可以修改为 <code>select * from table where id in (select id from table where age &gt; 20 limit 1000000,10)</code> . 这样虽然也 load 了一百万的数据，但是由于索引覆盖，要查询的所有字段都在索引中，所以速度会很快。</p>\n<p>解决超大分页，其实主要是靠缓存，可预测性的提前查到内容，缓存至 redis 等 k-V 数据库中，直接返回即可.</p>\n<p>在阿里巴巴《Java 开发手册》中，对超大分页的解决办法是类似于上面提到的第一种.</p>\n<blockquote>\n<p>【推荐】利用延迟关联或者子查询优化超多分页场景。</p>\n<p>说明：MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。</p>\n<p>正例：先快速定位需要获取的 id 段，然后再关联：</p>\n<p>SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20) b where <span class=\"exturl\" data-url=\"aHR0cDovL2EuaWQ9Yi5pZA==\">a.id=b.id</span></p>\n</blockquote>\n<h3 id=\"4-统计过慢查询吗对慢查询都怎么优化过\"><a class=\"anchor\" href=\"#4-统计过慢查询吗对慢查询都怎么优化过\">#</a> 4. 统计过慢查询吗？对慢查询都怎么优化过？</h3>\n<p>在业务系统中，除了使用主键进行的查询，其他的我都会在测试库上测试其耗时，慢查询的统计主要由运维在做，会定期将业务中的慢查询反馈给我们。</p>\n<p>慢查询的优化首先要搞明白慢的原因是什么？ 是查询条件没有命中索引？是 load 了不需要的数据列？还是数据量太大？</p>\n<p>所以优化也是针对这三个方向来的，</p>\n<ul>\n<li>首先分析语句，看看是否 load 了额外的数据，可能是查询了多余的行并且抛弃掉了，可能是加载了许多结果中并不需要的列，对语句进行分析以及重写。</li>\n<li>分析语句的执行计划，然后获得其使用索引的情况，之后修改语句或者修改索引，使得语句可以尽可能的命中索引。</li>\n<li>如果对语句的优化已经无法进行，可以考虑表中的数据量是否太大，如果是的话可以进行横向或者纵向的分表。</li>\n</ul>\n<h3 id=\"5-如何优化查询过程中的数据访问\"><a class=\"anchor\" href=\"#5-如何优化查询过程中的数据访问\">#</a> 5. 如何优化查询过程中的数据访问</h3>\n<ul>\n<li>访问数据太多导致查询性能下降</li>\n<li>确定应用程序是否在检索大量超过需要的数据，可能是太多行或列</li>\n<li>确认 MySQL 服务器是否在分析大量不必要的数据行</li>\n<li>查询不需要的数据。解决办法：使用 limit 解决</li>\n<li>多表关联返回全部列。解决办法：指定列名</li>\n<li>总是返回全部列。解决办法：避免使用 SELECT *</li>\n<li>重复查询相同的数据。解决办法：可以缓存数据，下次直接读取缓存</li>\n<li>是否在扫描额外的记录。解决办法： 使用 explain 进行分析，如果发现查询需要扫描大量的数据，但只返回少数的行，可以通过如下技巧去优化： 使用索引覆盖扫描，把所有的列都放到索引中，这样存储引擎不需要回表获取对应行就可以返回结果。</li>\n<li>改变数据库和表的结构，修改数据表范式</li>\n<li>重写 SQL 语句，让优化器可以以更优的方式执行查询。</li>\n</ul>\n<h3 id=\"6-如何优化关联查询\"><a class=\"anchor\" href=\"#6-如何优化关联查询\">#</a> 6. 如何优化关联查询</h3>\n<ul>\n<li>确定 ON 或者 USING 子句中是否有索引。</li>\n<li>确保 GROUP BY 和 ORDER BY 只有一个表中的列，这样 MySQL 才有可能使用索引。</li>\n</ul>\n<h3 id=\"7-数据库结构优化\"><a class=\"anchor\" href=\"#7-数据库结构优化\">#</a> 7. 数据库结构优化</h3>\n<p>一个好的数据库设计方案对于数据库的性能往往会起到事半功倍的效果。</p>\n<p>需要考虑数据冗余、查询和更新的速度、字段的数据类型是否合理等多方面的内容。</p>\n<ol>\n<li><strong>将字段很多的表分解成多个表</strong></li>\n</ol>\n<p>对于字段较多的表，如果有些字段的使用频率很低，可以将这些字段分离出来形成新表。</p>\n<p>因为当一个表的数据量很大时，会由于使用频率低的字段的存在而变慢。</p>\n<ol>\n<li><strong>增加中间表</strong></li>\n</ol>\n<p>对于需要经常联合查询的表，可以建立中间表以提高查询效率。</p>\n<p>通过建立中间表，将需要通过联合查询的数据插入到中间表中，然后将原来的联合查询改为对中间表的查询。</p>\n<ol>\n<li><strong>增加冗余字段</strong></li>\n</ol>\n<p>设计数据表时应尽量遵循范式理论的规约，尽可能的减少冗余字段，让数据库设计看起来精致、优雅。但是，合理的加入冗余字段可以提高查询速度。</p>\n<p>表的规范化程度越高，表和表之间的关系越多，需要连接查询的情况也就越多，性能也就越差。</p>\n<p>注意：</p>\n<p>冗余字段的值在一个表中修改了，就要想办法在其他表中更新，否则就会导致数据不一致的问题。</p>\n<h3 id=\"8-mysql数据库cpu飙升到500的话他怎么处理\"><a class=\"anchor\" href=\"#8-mysql数据库cpu飙升到500的话他怎么处理\">#</a> 8. MySQL 数据库 cpu 飙升到 500% 的话他怎么处理？</h3>\n<p>当 cpu 飙升到 500% 时，先用操作系统命令 top 命令观察是不是 MySQLd 占用导致的，如果不是，找出占用高的进程，并进行相关处理。</p>\n<p>如果是 MySQLd 造成的， show processlist，看看里面跑的 session 情况，是不是有消耗资源的 sql 在运行。找出消耗高的 sql，看看执行计划是否准确， index 是否缺失，或者实在是数据量太大造成。</p>\n<p>一般来说，肯定要 kill 掉这些线程 (同时观察 cpu 使用率是否下降)，等进行相应的调整 (比如说加索引、改 sql、改内存参数) 之后，再重新跑这些 SQL。</p>\n<p>也有可能是每个 sql 消耗资源并不多，但是突然之间，有大量的 session 连进来导致 cpu 飙升，这种情况就需要跟应用一起来分析为何连接数会激增，再做出相应的调整，比如说限制连接数等。</p>\n<h3 id=\"9-大表怎么优化\"><a class=\"anchor\" href=\"#9-大表怎么优化\">#</a> 9. 大表怎么优化？</h3>\n<p>类似的问题：某个表有近千万数据，CRUD 比较慢，如何优化？分库分表了是怎么做的？分表分库了有什么问题？有用到中间件么？他们的原理知道么？</p>\n<p>当 MySQL 单表记录数过大时，数据库的 CRUD 性能会明显下降，一些常见的优化措施如下：</p>\n<ul>\n<li>限定数据的范围： 务必禁止不带任何限制数据范围条件的查询语句。比如：我们当用户在查询订单历史的时候，我们可以控制在一个月的范围内；</li>\n<li>读 / 写分离： 经典的数据库拆分方案，主库负责写，从库负责读；</li>\n<li>缓存： 使用 MySQL 的缓存，另外对重量级、更新少的数据可以考虑；</li>\n<li>通过分库分表的方式进行优化，主要有垂直分表和水平分表。</li>\n</ul>\n</div>\n",
            "tags": [
                "数据库",
                "mysql"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/linux/docker/docker/Docker/",
            "url": "https://sbysg.github.io/2023/10/22/linux/docker/docker/Docker/",
            "title": "docker",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<h2 id=\"一-docker\"><a class=\"anchor\" href=\"#一-docker\">#</a> 一、Docker</h2>\n<h3 id=\"11-docker\"><a class=\"anchor\" href=\"#11-docker\">#</a> 1.1 Docker</h3>\n<p>Docker 是一个开源的容器引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。</p>\n<p>容器化引擎，新型虚拟机</p>\n<p>Docker 使用 Google 公司推出的 Go 语言进行开发实现，属于操作系统层面的虚拟化技术。</p>\n<p>由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p>\n<p>用户可以方便地创建和使用容器，把自己的应用放入容器。</p>\n<p>容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>\n<p>容器就是将软件打包成标准化单元，以用于开发、交付和部署。</p>\n<p>容器的镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。</p>\n<h3 id=\"12-docker的特点\"><a class=\"anchor\" href=\"#12-docker的特点\">#</a> 1.2 Docker 的特点</h3>\n<p>轻量，在一台机器上运行的多个 Docker 容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。</p>\n<p>标准，Docker 容器基于开放式标准，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。</p>\n<p>安全，Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。</p>\n<h3 id=\"13-docker的组成\"><a class=\"anchor\" href=\"#13-docker的组成\">#</a> 1.3 Docker 的组成</h3>\n<p><img data-src=\"Docker.assets/202303100947243.png\" alt=\"image-20230310094755104\" /></p>\n<p>镜像（ Image ）   软件安装包，是一套软件集合，需要的其他的软件都在里面，比如 Tomcat 镜像，就包含 Jdk+tomcat</p>\n<p>容器（ Container ）基于镜像安装之后的实例</p>\n<p>数据卷（Data Volumes）容器存储数据的地方，类似磁盘（虚拟的）</p>\n<p>网络（Network）可以实现容器的网络分配，每个容器都有自己的网络（ip + 端口）</p>\n<p>仓库（ Repository ）存储镜像的地方，国内建议使用第三方镜像仓库</p>\n<h3 id=\"14-docker安装\"><a class=\"anchor\" href=\"#14-docker安装\">#</a> 1.4 Docker 安装</h3>\n<p>执行命令，先查看是否有 Docker</p>\n<p>docker --version</p>\n<p><img data-src=\"Docker.assets/202303100952267.png\" alt=\"image-20230310095223175\" /></p>\n<p>如果想要删除：yum -y remove docker-ce</p>\n<p>如果没有需要安装：</p>\n<p>1. 执行命令，实现 Docker 安装</p>\n<p>yum install -y yum-utils</p>\n<p>yum-config-manager --add-repo <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS9kb2NrZXItY2UvbGludXgvY2VudG9zL2RvY2tlci1jZS5yZXBv\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></p>\n<p>yum makecache fast</p>\n<p>yum -y install docker-ce</p>\n<p><img data-src=\"Docker.assets/202303101001414.png\" alt=\"image-20230310100129361\" /></p>\n<p><img data-src=\"Docker.assets/202303101001317.png\" alt=\"image-20230310100151294\" /></p>\n<p>2. 验证</p>\n<p>docker --version</p>\n<p><img data-src=\"Docker.assets/202303101003454.png\" alt=\"image-20230310100313385\" /></p>\n<p>3. 启动 Docker</p>\n<p>启动：systemctl start docker</p>\n<p>停止：systemctl stop docker</p>\n<p>查看状态：systemctl status docker</p>\n<p>重启：systemctl restart docker</p>\n<p><img data-src=\"Docker.assets/202303101005820.png\" alt=\"image-20230310100525763\" /></p>\n<h2 id=\"二-docker命令\"><a class=\"anchor\" href=\"#二-docker命令\">#</a> 二、Docker 命令</h2>\n<h3 id=\"21-docker镜像仓库\"><a class=\"anchor\" href=\"#21-docker镜像仓库\">#</a> 2.1 Docker 镜像仓库</h3>\n<p><img data-src=\"Docker.assets/202303101006184.png\" alt=\"image-20230310100605142\" /></p>\n<p>需要配置镜像加速器：</p>\n<p>1. 执行命令，编辑文件</p>\n<p>vi /etc/docker/daemon.json</p>\n<p>2. 输入一下内容，并保存退出</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"registry-mirrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://registry.docker-cn.com\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3. 执行命令，让配置生效</p>\n<p>systemctl daemon-reload<br />\nsystemctl restart docker</p>\n<p><img data-src=\"Docker.assets/202303101009704.png\" alt=\"image-20230310100921628\" /></p>\n<h3 id=\"22-docker常用命令\"><a class=\"anchor\" href=\"#22-docker常用命令\">#</a> 2.2 Docker 常用命令</h3>\n<p><strong>1. 搜索镜像：docker search</strong></p>\n<p>docker search tomcat</p>\n<p><img data-src=\"Docker.assets/202303101048640.png\" alt=\"image-20230310104844611\" /></p>\n<p><strong>2. 查看本地镜像：docker images</strong></p>\n<p>docker images</p>\n<p><img data-src=\"Docker.assets/202303101049042.png\" alt=\"image-20230310104937000\" /></p>\n<p><strong>3. 下载镜像：docker pull</strong></p>\n<p>docker pull tomcat</p>\n<p>docker pull mysql:8.0</p>\n<p><img data-src=\"Docker.assets/202303101047385.png\" alt=\"image-20230310104750289\" /></p>\n<p><img data-src=\"Docker.assets/202303101050489.png\" alt=\"image-20230310105057432\" /></p>\n<p><strong>4. 创建容器：docker create</strong></p>\n<p>docker create --name tomcat8081 -p 8081:8080 tomcat</p>\n<p>参数说明：</p>\n<p>1.--name 为容器起个名字</p>\n<p>2.-p 设置端口号 访问端口号：软件本身的端口号</p>\n<p><img data-src=\"Docker.assets/202303101054894.png\" alt=\"image-20230310105418847\" /></p>\n<p><strong>5. 创建并运行容器：docker run</strong></p>\n<p>docker run -d --name tomcat8082 -p 8082:8080 tomcat</p>\n<p>参数说明：</p>\n<p>1.-d 后台启动</p>\n<p>2.--name 为容器起个名字</p>\n<p>3.-p 设置端口号 访问端口号：软件本身的端口号</p>\n<p>run 命令：1. 镜像不存在，会自动下载 2. 创建容器 3. 启动容器</p>\n<p>等价于：pull+create+start 命令组合</p>\n<p><img data-src=\"Docker.assets/202303101059021.png\" alt=\"image-20230310105944985\" /></p>\n<p><strong>6. 启动容器：docker start</strong></p>\n<p>docker start tomcat8081</p>\n<p><img data-src=\"Docker.assets/202303101100596.png\" alt=\"image-20230310110042546\" /></p>\n<p><strong>7. 停止容器：docker stop</strong></p>\n<p>docker stop tomcat8081</p>\n<p><img data-src=\"Docker.assets/202303101100467.png\" alt=\"image-20230310110018425\" /></p>\n<p><strong>8. 删除容器：docker rm</strong></p>\n<p>docker rm tomcat8081</p>\n<p><em>注意：删除容器，容器必须先停止</em></p>\n<p><img data-src=\"Docker.assets/202303101102238.png\" alt=\"image-20230310110228205\" /></p>\n<p><strong>9. 查看容器：docker ps</strong></p>\n<p>docker ps -a 查看创建的所有的容器</p>\n<p>docker ps 查看运行中的容器</p>\n<p><img data-src=\"Docker.assets/202303101056623.png\" alt=\"image-20230310105626567\" /></p>\n<p><strong>10. 删除镜像：docker rmi</strong></p>\n<p>docker rmi tomcat:8.5</p>\n<p><img data-src=\"Docker.assets/202303101109031.png\" alt=\"image-20230310110947965\" /></p>\n<p><strong>11. 查看容器日志：docker logs</strong></p>\n<p>docker logs tomcat8082</p>\n<p><img data-src=\"Docker.assets/202303101103616.png\" alt=\"image-20230310110314580\" /></p>\n<p><strong>12. 进入到容器内部：docker exec</strong></p>\n<p>docker exec -it tomcat8082 bash</p>\n<p>参数说明：</p>\n<p>1.-it 交互</p>\n<p>2.bash 命令</p>\n<p>退出容器，采用 exit</p>\n<p><img data-src=\"Docker.assets/202303101105264.png\" alt=\"image-20230310110510207\" /></p>\n<p><strong>13. 查看容器详情：docker inspect</strong></p>\n<p>docker inspect tomcat8082</p>\n<p><img data-src=\"Docker.assets/202303101107971.png\" alt=\"image-20230310110749928\" /></p>\n<h2 id=\"三-docker命令配置环境\"><a class=\"anchor\" href=\"#三-docker命令配置环境\">#</a> 三、Docker 命令配置环境</h2>\n<p>按部就班</p>\n<h3 id=\"31-docker配置tomcat\"><a class=\"anchor\" href=\"#31-docker配置tomcat\">#</a> 3.1 Docker 配置 Tomcat</h3>\n<p><strong>1. 创建文件夹，作为映射文件夹</strong></p>\n<p>mkdir -p /usr/docker/tomcat8081/webapps</p>\n<p>mkdir -p /usr/docker/tomcat8081/logs</p>\n<p><strong>2. 执行命令，创建 Tomcat 容器</strong></p>\n<p>docker run -d --name tomcat8081 -p 8081:8080 -v /usr/docker/tomcat8081/webapps:/usr/local/tomcat/webapps -v /usr/docker/tomcat8081/logs:/usr/local/tomcat/logs  tomcat:9.0.33</p>\n<p>参数说明：</p>\n<p>1.-d 后台启动</p>\n<p>2.--name 容器的名称 (唯一)</p>\n<p>3.-p 映射端口号设置 格式：访问端口号：软件本身端口号</p>\n<p>4.-v 映射路径设置  格式：真实路径：容器内部的默认路径</p>\n<p><em>注意：上述的命令是一个命令，不能换行！</em></p>\n<p><img data-src=\"Docker.assets/202303101115501.png\" alt=\"image-20230310111526443\" /></p>\n<p><strong>3. 访问测试</strong></p>\n<p>需要在 /usr/docker/tomcat8081/webapps 创建文件夹 ROOT, 同时在 ROOT 里面创建 index.html</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEwMS40My4xOTUuNDo4MDgxLw==\">http://101.43.195.4:8081/</span></p>\n<p><img data-src=\"Docker.assets/202303101121046.png\" alt=\"image-20230310112112990\" /></p>\n<h3 id=\"32-docker配置mysql\"><a class=\"anchor\" href=\"#32-docker配置mysql\">#</a> 3.2 Docker 配置 Mysql</h3>\n<p><strong>1. 创建文件夹</strong></p>\n<p>mkdir -p /usr/docker/mysql3307/conf</p>\n<p>mkdir -p /usr/docker/mysql3307/data</p>\n<p>同时在 conf 目录下，创建 my.cnf 文件</p>\n<p>vim /usr/docker/mysql3307/conf/my.cnf</p>\n<p>输入以下内容：</p>\n<pre><code>[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\nsymbolic-links=0\nlog-error=/var/log/mysqld.log\npid-file=/var/run/mysqld/mysqld.pid\nlower_case_table_names=1\n</code></pre>\n<p><img data-src=\"Docker.assets/202303101131458.png\" alt=\"image-20230310113124410\" /></p>\n<p><strong>2. 执行命令，创建 Mysql 容器</strong></p>\n<p>docker run -d --name mysql3307 -p 3307:3306 -v /usr/docker/mysql3307/conf/my.cnf:/etc/mysql/my.cnf -v /usr/docker/mysql3307/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=qfjava  mysql:5.7</p>\n<p><img data-src=\"Docker.assets/202303101131559.png\" alt=\"image-20230310113104518\" /></p>\n<p><strong>3. 连接测试</strong></p>\n<p><img data-src=\"Docker.assets/202303101130552.png\" alt=\"image-20230310113026490\" /></p>\n<h3 id=\"33-docker配置redis\"><a class=\"anchor\" href=\"#33-docker配置redis\">#</a> 3.3 Docker 配置 Redis</h3>\n<p>1. 创建文件夹</p>\n<p>mkdir -p /usr/docker/redis6379/data</p>\n<p>mkdir -p /usr/docker/redis6379/conf</p>\n<p>vim /usr/docker/redis6379/conf/redis.conf</p>\n<p>输入以下内容：</p>\n<pre><code>requirepass 123456\n</code></pre>\n<p><img data-src=\"Docker.assets/202303101147744.png\" alt=\"image-20230310114707692\" /></p>\n<p>2. 执行命令，创建容器</p>\n<p>docker run -d --name redis6380 -p 6380:6379  -v /usr/docker/redis6379/conf/redis.conf:/etc/redis/redis.conf -v /usr/docker/redis6379/data:/data  redis:7.0.9 redis-server /etc/redis/redis.conf</p>\n<p><img data-src=\"Docker.assets/202303101146621.png\" alt=\"image-20230310114644564\" /></p>\n<p>3. 访问测试</p>\n<p><img data-src=\"Docker.assets/202303101513112.png\" alt=\"image-20230310151336038\" /></p>\n<p data,conf,log=\"\">mkdir -p /usr/docker/rabbitmq5673/</p>\n<p>chmod -R 777 /usr/docker/rabbitmq5673 #   授权</p>\n<p>docker run -d --name rabbitmq5673-p 15672:15672 -p 5673:5672 rabbitmq:management -v /usr/docker/rabbitmq5673/data:/etc/rabbitmq -v /usr/docker/rabbitmq5673/conf:/etc/rabbitmq</p>\n<h2 id=\"四-docker-compose\"><a class=\"anchor\" href=\"#四-docker-compose\">#</a> 四、Docker-Compose</h2>\n<h3 id=\"41-docker-compose\"><a class=\"anchor\" href=\"#41-docker-compose\">#</a> 4.1 Docker-Compose</h3>\n<p>Docker-Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，可以使用 YML 文件来配置应用程序需要的所有容器。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有容器。</p>\n<p>Compose 使用的三个步骤：</p>\n<ul>\n<li>使用 Dockerfile 定义应用程序的环境。</li>\n<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们就可以在隔离环境中一起运行。</li>\n<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>\n</ul>\n<p>容器编排技术，可以一次性创建多个容器，通过自定义 yml 文件</p>\n<p>比如 Docker-Compose 更高级的是 K8s（<span class=\"exturl\" data-url=\"aHR0cDovL2t1YmVybmV0ZXMucDJocC5jb20vJUVGJUJDJTg5\">http://kubernetes.p2hp.com/）</span></p>\n<h3 id=\"42-docker-compose作用\"><a class=\"anchor\" href=\"#42-docker-compose作用\">#</a> 4.2 Docker-Compose 作用</h3>\n<p>可以通过一定语法格式，定义要创建的容器的 yml 文件，然后通过 up 命令，解析 yml 文件，最终可以创建多个容器</p>\n<p>Docker-Compose 的 yml 文件的语法格式：</p>\n<p>yml 文件使用 key: value 方式来指定配置信息 ，key: value 冒号后面必须有个空格</p>\n<p>配置信息通过缩进表示层级关系，缩进使用的是两个空格，不是制表符</p>\n<h3 id=\"43-docker-compose安装\"><a class=\"anchor\" href=\"#43-docker-compose安装\">#</a> 4.3 Docker-Compose 安装</h3>\n<p>1. 下载</p>\n<p>curl -L <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nZXQuZGFvY2xvdWQuaW8vZG9ja2VyL2NvbXBvc2UvcmVsZWFzZXMvZG93bmxvYWQvMS4yNi4yL2RvY2tlci1jb21wb3NlLSU2MHVuYW1l\">https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname</span> -s <code>-</code> uname -m` &gt; /usr/local/bin/docker-compose</p>\n<p><img data-src=\"Docker.assets/202303101451285.png\" alt=\"image-20230310145114231\" /></p>\n<p>2. 设置权限</p>\n<p>chmod 777 /usr/local/bin/docker-compose</p>\n<p>3. 验证</p>\n<p>docker-compose -version</p>\n<p><img data-src=\"Docker.assets/202303101452965.png\" alt=\"image-20230310145203934\" /></p>\n<h2 id=\"五-docker-compose配置环境\"><a class=\"anchor\" href=\"#五-docker-compose配置环境\">#</a> 五、Docker-Compose 配置环境</h2>\n<h3 id=\"51-docker-compose配置tomcat\"><a class=\"anchor\" href=\"#51-docker-compose配置tomcat\">#</a> 5.1 Docker-Compose 配置 Tomcat</h3>\n<p><strong>1. 准备文件夹</strong></p>\n<p>mkdir -p /usr/docker/tomcat8801/webapps</p>\n<p>mkdir -p /usr/docker/tomcat8802/webapps</p>\n<p>mkdir -p /usr/docker/tomcat8803/webapps</p>\n<p><strong>2. 创建 yml 文件</strong></p>\n<p>vim /usr/local/tomcat3.yml</p>\n<p>内容如下所示：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">tomcat1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>9.0.33</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> tomcat8801</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> 8801<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">-</span> /usr/docker/tomcat8801/webapps<span class=\"token punctuation\">:</span>/usr/local/tomcat/webapps</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">tomcat2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>9.0.33</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> tomcat8802</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">-</span> 8802<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">-</span> /usr/docker/tomcat8802/webapps<span class=\"token punctuation\">:</span>/usr/local/tomcat/webapps</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token key atrule\">tomcat3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>9.0.33</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> tomcat8803</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">-</span> 8803<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">-</span> /usr/docker/tomcat8803/webapps<span class=\"token punctuation\">:</span>/usr/local/tomcat/webapps</pre></td></tr></table></figure><p><strong>3. 执行创建对应的容器</strong></p>\n<p>docker-compose -f /usr/local/tomcat3.yml   up  -d</p>\n<p><img data-src=\"Docker.assets/202303101502058.png\" alt=\"image-20230310150210015\" /></p>\n<p><strong>4. 访问测试</strong></p>\n<p>在对应的 webapps 创建文件夹 ROOT, 在 test 创建 index.html 文件</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEwMS40My4xOTUuNDo4ODAx\">http://101.43.195.4:8801</span></p>\n<p><img data-src=\"Docker.assets/202306061027011.png\" alt=\"image-20230606102736949\" /></p>\n<h3 id=\"51-docker-compose配置mysql\"><a class=\"anchor\" href=\"#51-docker-compose配置mysql\">#</a> 5.1 Docker-Compose 配置 Mysql</h3>\n<p>1. 创建文件夹</p>\n<p>mkdir -p /usr/docker/mysql3308/conf</p>\n<p>mkdir -p /usr/docker/mysql3309/conf</p>\n<p>mkdir -p /usr/docker/mysql3310/conf</p>\n<p>以此类推创建对应的 my.cnf 文件</p>\n<p>2. 创建对应的 yml 文件</p>\n<p>vim /usr/local/mysql3.yml</p>\n<p>内容如下所示：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">mysql1</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 服务的名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always   <span class=\"token comment\"># 代表只要 docker 启动，那么这个容器就跟着一起启动</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>  <span class=\"token comment\"># 指定镜像路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mysql3308  <span class=\"token comment\"># 指定容器名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> 3308<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>   <span class=\"token comment\">#  指定端口号的映射</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> root   <span class=\"token comment\"># 指定 MySQL 的 ROOT 用户登录密码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai        <span class=\"token comment\"># 指定时区</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token punctuation\">-</span> /usr/docker/mysql3308/conf/my.cnf<span class=\"token punctuation\">:</span>/etc/mysql/my.cnf    <span class=\"token comment\"># 映射数据卷</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">mysql2</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 服务的名称</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always   <span class=\"token comment\"># 代表只要 docker 启动，那么这个容器就跟着一起启动</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>  <span class=\"token comment\"># 指定镜像路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mysql3309  <span class=\"token comment\"># 指定容器名称</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">-</span> 3309<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>   <span class=\"token comment\">#  指定端口号的映射</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> root   <span class=\"token comment\"># 指定 MySQL 的 ROOT 用户登录密码</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai        <span class=\"token comment\"># 指定时区</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     <span class=\"token punctuation\">-</span> /usr/docker/mysql3309/conf/my.cnf<span class=\"token punctuation\">:</span>/etc/mysql/my.cnf    <span class=\"token comment\"># 映射数据卷</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token key atrule\">mysql3</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 服务的名称</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always   <span class=\"token comment\"># 代表只要 docker 启动，那么这个容器就跟着一起启动</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span>  <span class=\"token comment\"># 指定镜像路径</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mysql3310  <span class=\"token comment\"># 指定容器名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">-</span> 3310<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span>   <span class=\"token comment\">#  指定端口号的映射</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> root   <span class=\"token comment\"># 指定 MySQL 的 ROOT 用户登录密码</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token key atrule\">TZ</span><span class=\"token punctuation\">:</span> Asia/Shanghai        <span class=\"token comment\"># 指定时区</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     <span class=\"token punctuation\">-</span> /usr/docker/mysql3310/conf/my.cnf<span class=\"token punctuation\">:</span>/etc/mysql/my.cnf    <span class=\"token comment\"># 映射数据卷</span></pre></td></tr></table></figure><p>3. 执行命令，创建容器</p>\n<p>docker-compose -f /usr/local/mysql3.yml   up  -d</p>\n<p><img data-src=\"Docker.assets/202303101509818.png\" alt=\"image-20230310150959767\" /></p>\n<p>4. 连接测试</p>\n<p><img data-src=\"Docker.assets/202306061031081.png\" alt=\"image-20230606103139012\" /></p>\n",
            "tags": [
                "Linux",
                "Docker",
                "Docker"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/linux/docker/rabbitMQ/RabbitMQ/",
            "url": "https://sbysg.github.io/2023/10/22/linux/docker/rabbitMQ/RabbitMQ/",
            "title": "rabbitMQ",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<h2 id=\"一-mq\"><a class=\"anchor\" href=\"#一-mq\">#</a> 一、MQ</h2>\n<h3 id=\"11-mq\"><a class=\"anchor\" href=\"#11-mq\">#</a> 1.1 MQ</h3>\n<ul>\n<li>消息队列（Message Queue，简称 MQ），从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是 message 而已。<br />\n其主要用途：不同进程 Process / 线程 Thread 之间通信。</li>\n</ul>\n<p>RabbitMQ 是轻量级的，易于在本地部署 在云中。它支持多种消息传递 协议和<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL3N0cmVhbXMuaHRtbA==\">流式处理</span>。RabbitMQ 可以部署在分布式和 联合配置，满足大规模、 高可用性要求。</p>\n<h3 id=\"12-rabbitmq\"><a class=\"anchor\" href=\"#12-rabbitmq\">#</a> 1.2 RabbitMQ</h3>\n<p>本地地址 + 端口号</p>\n<p>端口号：可视化页面：15672 代码中 5672</p>\n<p>默认账号：guest</p>\n<p>默认密码：guest</p>\n<h3 id=\"13-初体验\"><a class=\"anchor\" href=\"#13-初体验\">#</a> 1.3 初体验</h3>\n<p>1. 依赖 jar</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--        RabbitMQ --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2. 实现配置</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 110.40.192.129</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> guest</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> guest</pre></td></tr></table></figure><p>3. 编写代码</p>\n<p>​\t创建队列</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span> <span class=\"token comment\">// 配置 类似 beans 标签</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RabbitMQConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 创建队列</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span> <span class=\"token comment\">// IOC bean 标签</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">createQ1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"j2310-lx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t消息发送</p>\n<pre><code class=\"language-Java\">@RestController\npublic class MqSendController &#123;\n    @Resource\n    private RabbitTemplate template;\n\n    @GetMapping(&quot;send1&quot;)\n    public String send1(String msg)&#123;\n        //发送消息\n        template.convertAndSend(&quot;&quot;,&quot;j2310-lx&quot;,msg);\n        return &quot;OK&quot;;\n    &#125;\n&#125;\n</code></pre>\n<p>​\t消息接收</p>\n<pre><code class=\"language-Java\">@Slf4j\n@Component //IOC\npublic class MsgListener &#123;\n    @RabbitListener(queues = &quot;j2310-lx&quot;)\n    public void hander(String msg)&#123;\n        log.info(&quot;消费者获取消息&#123;&#125;&quot;,msg);\n    &#125;\n&#125;\n</code></pre>\n<p>4. 运行测试</p>\n<p><img data-src=\"/RabbitMQ.assets/image-20231013114715480.png\" alt=\"image-20231013114715480\" /></p>\n<p><img data-src=\"RabbitMQ.assets/image-20231013114726677.png\" alt=\"image-20231013114726677\" /></p>\n<h2 id=\"二-rabbitmq核心\"><a class=\"anchor\" href=\"#二-rabbitmq核心\">#</a> 二、RabbitMQ 核心</h2>\n<h3 id=\"21-消息模式-简单消息\"><a class=\"anchor\" href=\"#21-消息模式-简单消息\">#</a> 2.1 消息模式 - 简单消息</h3>\n<p>简单消息：</p>\n<p>特点：一个队列对应一个消费端，一个消息只能被消费 1 次</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231101124636431.png\" alt=\"image-20231101124636431\" /></p>\n<p>示例：</p>\n<p>1. 定义队列</p>\n<p>2. 发送消息 --- 到 --- 队列中</p>\n<p>3. 监听消息 --- 从 --- 队列中</p>\n<p>代码：</p>\n<pre><code class=\"language-Java\">//简单消息\n@Bean // IOC bean标签\npublic Queue createQ2()&#123;\n    return new Queue(&quot;lx-p2p-1&quot;);\n&#125;\n\n@Resource\nprivate RabbitTemplate template;\n@GetMapping(&quot;send2&quot;)\npublic String send2(String msg)&#123;\n        //发送消息\n        template.convertAndSend(&quot;&quot;,&quot;lx-p2p-1&quot;,msg);\n        return &quot;OK&quot;;\n&#125;\n \n    @RabbitListener(queues = &quot;lx-p2p-1&quot;)\n    public void hander2(String msg)&#123;\n        log.info(&quot;普通消息，消费者，获取消息，&#123;&#125;&quot;,msg);\n    &#125;\n</code></pre>\n<h3 id=\"22-消息模式-work消息\"><a class=\"anchor\" href=\"#22-消息模式-work消息\">#</a> 2.2 消息模式 - Work 消息</h3>\n<p>Work 消息：一个队列可以有多个消费端，1 个消息只能消费 1 次，多个消费者是按照轮询的形式轮流获取消息</p>\n<p>可以解决：消息堆积（发的快，消费的慢）</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231013141853817.png\" alt=\"image-20231013141853817\" /></p>\n<p>示例：</p>\n<pre><code class=\"language-Java\">//Work消息\n@Bean // IOC bean标签\npublic Queue createQ3()&#123;\n    return new Queue(&quot;lx-work-1&quot;);\n&#125;\n\n@Resource\n    private RabbitTemplate template;\n    @GetMapping(&quot;send3&quot;)\n    public String send3(String msg)&#123;\n        //发送消息\n        template.convertAndSend(&quot;&quot;,&quot;lx-work-1&quot;,msg);\n        return &quot;OK&quot;;\n    &#125;\n@RabbitListener(queues = &quot;lx-work-1&quot;)\n    public void hander3(String msg)&#123;\n        log.info(&quot;Work消息，消费者01，获取消息：&#123;&#125;&quot;,msg);\n    &#125;\n    @RabbitListener(queues = &quot;lx-work-1&quot;)\n    public void hander4(String msg)&#123;\n        log.info(&quot;Work消息，消费者02，获取消息：&#123;&#125;&quot;,msg);\n    &#125;\n</code></pre>\n<h3 id=\"23消息模式-发布订阅\"><a class=\"anchor\" href=\"#23消息模式-发布订阅\">#</a> 2.3. 消息模式 - 发布订阅</h3>\n<p>发布订阅：就是消息发送到 Exchange (交换器)，交换器再把消息发送到交换器绑定的队列上，1 个消息可以给多个消费者（多个队列中）获取</p>\n<p>Exchange: 交换器，是 RabbitMQ 一个组成，可以接收消息，然后根据交换器的类型，选择对应的匹配模式，把匹配到的消息转发到对应的队列中。</p>\n<p>交换器的类型：</p>\n<p>1.fanout 直接转发，不对消息做匹配处理</p>\n<p>2.direct 路由匹配，发送消息指定 RoutingKey (精确)，交换器绑定队列的时候，也需要指定 RoutingKey</p>\n<p>3.topic  路由匹配，发送消息指定 RoutingKey (模糊，支持 * #)，交换器绑定队列的时候，也需要指定 RoutingKey，* 一个单词 #任意个单词</p>\n<p>4.header 消息头匹配模式，发送消息的时候指定消息的请求消息头，交换器绑定队列的时候，也需要指定对应的请求消息头，any 任意一个 all 所有</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231101125635096.png\" alt=\"image-20231101125635096\" /></p>\n<p>示例：</p>\n<p>1. 创建队列</p>\n<p>2. 创建交换器</p>\n<p>3. 创建交换器和队列的绑定</p>\n<p>4. 发送消息</p>\n<p>5. 监听消息</p>\n<p>代码：</p>\n<pre><code class=\"language-Java\">@Configuration\npublic class FanoutConfig &#123;\n    //1创建队列\n    @Bean\n    public Queue createQfanout1()&#123;\n        return new Queue(&quot;q-fanout-01&quot;);\n    &#125;\n    @Bean\n    public Queue createQfanout2()&#123;\n        return new Queue(&quot;q-fanout-02&quot;);\n    &#125;\n    //2.创建交换器\n    @Bean\n    public FanoutExchange createFe()&#123;\n        return new FanoutExchange(&quot;ex-fanout-lx&quot;);\n    &#125;\n    //3.实现绑定\n    @Bean\n    public Binding createBf1(FanoutExchange fe)&#123;\n        return  BindingBuilder.bind(createQfanout1()).to(fe);\n    &#125;\n    @Bean\n    public Binding createBf2(FanoutExchange fe)&#123;\n        return  BindingBuilder.bind(createQfanout2()).to(fe);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"language-Java\">@RestController\npublic class FanoutController &#123;\n    @Resource\n    private RabbitTemplate template;\n\n    @GetMapping(&quot;fanout1&quot;)\n    public String f1(String msg)&#123;\n        template.convertAndSend(&quot;ex-fanout-lx&quot;,&quot;&quot;,msg);\n        return &quot;ok&quot;;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"language-Java\">@RabbitListener(queues = &quot;q-fanout-01&quot;)\npublic void hander5(String msg)&#123;\n    log.info(&quot;fanout消息，01队列，消费者，获取消息：&#123;&#125;&quot;,msg);\n&#125;\n@RabbitListener(queues = &quot;q-fanout-02&quot;)\npublic void hander6(String msg)&#123;\n    log.info(&quot;fanout消息，02队列，消费者02，获取消息：&#123;&#125;&quot;,msg);\n&#125;\n</code></pre>\n<p><img data-src=\"RabbitMQ.assets/image-20231013150514443.png\" alt=\"image-20231013150514443\" /></p>\n<h3 id=\"24-消息模式-路由匹配\"><a class=\"anchor\" href=\"#24-消息模式-路由匹配\">#</a> 2.4 消息模式 - 路由匹配</h3>\n<p>路由消息：消息被发送到交换器，交换器的类型为 direct，可以根据消息的路由关键字进行匹配，转发到匹配的所有的队列</p>\n<p>RoutingKey: 路由关键字，只支持精确的值</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231013142052195.png\" alt=\"image-20231013142052195\" /></p>\n<p>示例：</p>\n<p>1. 创建队列</p>\n<p>2. 创建交换器 direct</p>\n<p>3. 创建交换器和队列的绑定 指定 RK</p>\n<p>4. 发送消息 指定 RK</p>\n<p>5. 监听消息</p>\n<p>代码：</p>\n<pre><code class=\"language-Java\">@Configuration\npublic class DirectConfig &#123;\n    //1创建队列\n    @Bean\n    public Queue createQdirect1()&#123;\n        return new Queue(&quot;q-direct-01&quot;);\n    &#125;\n    @Bean\n    public Queue createQdirect2()&#123;\n        return new Queue(&quot;q-direct-02&quot;);\n    &#125;\n    @Bean\n    public Queue createQdirect3()&#123;\n        return new Queue(&quot;q-direct-03&quot;);\n    &#125;\n    //2.创建交换器\n    @Bean\n    public DirectExchange createDe()&#123;\n        return new DirectExchange(&quot;ex-direct-lx&quot;);\n    &#125;\n    //3.实现绑定\n    @Bean\n    public Binding createBd1(DirectExchange fe)&#123;\n        return  BindingBuilder.bind(createQdirect1()).to(fe).with(&quot;error&quot;);\n    &#125;\n    @Bean\n    public Binding createBd2(DirectExchange fe)&#123;\n        return  BindingBuilder.bind(createQdirect2()).to(fe).with(&quot;info&quot;);\n    &#125;\n    @Bean\n    public Binding createBd3(DirectExchange fe)&#123;\n        return  BindingBuilder.bind(createQdirect3()).to(fe).with(&quot;info&quot;);\n    &#125;\n\n&#125;\n</code></pre>\n<pre><code class=\"language-Java\">@GetMapping(&quot;direct1&quot;)\npublic String d1(String msg,String type)&#123;\n    template.convertAndSend(&quot;ex-direct-lx&quot;,type,msg);\n    return &quot;ok&quot;;\n&#125;\n</code></pre>\n<p><img data-src=\"RabbitMQ.assets/image-20231013162331523.png\" alt=\"image-20231013162331523\" /></p>\n<h3 id=\"25-消息模式-主题消息\"><a class=\"anchor\" href=\"#25-消息模式-主题消息\">#</a> 2.5 消息模式 - 主题消息</h3>\n<p>主题消息，就是交换器的类型为 Topic, 跟路由模式的消息一样，都是通过 RoutingKey 匹配队列</p>\n<p>区别：</p>\n<p>主题消息 的 RK 支持模糊</p>\n<p>特殊符号： 区分单词是通过。区分的</p>\n<p>* 一个单词，单词内容任意</p>\n<p>#任意个单词，单词内容任意</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231013142127724.png\" alt=\"image-20231013142127724\" /></p>\n<p>示例：</p>\n<p>1. 创建队列</p>\n<p>2. 创建交换器 topic</p>\n<p>3. 创建交换器和队列的绑定 指定 RK (支持模糊)</p>\n<p>4. 发送消息 指定 RK</p>\n<p>5. 监听消息</p>\n<pre><code class=\"language-Java\">@Configuration\npublic class TopicConfig &#123;\n    //1创建队列\n    @Bean\n    public Queue createQtopic1()&#123;\n        return new Queue(&quot;q-topic-01&quot;);\n    &#125;\n    @Bean\n    public Queue createQtopic2()&#123;\n        return new Queue(&quot;q-topic-02&quot;);\n    &#125;\n    //2.创建交换器\n    @Bean\n    public TopicExchange createTe()&#123;\n        return new TopicExchange(&quot;ex-topic-lx&quot;);\n    &#125;\n    //3.实现绑定\n    @Bean\n    public Binding createBt1(TopicExchange fe)&#123;\n        //* 一个单词\n        return  BindingBuilder.bind(createQtopic1()).to(fe).with(&quot;error.*&quot;);\n    &#125;\n    @Bean\n    public Binding createBt2(TopicExchange fe)&#123;\n        //# 任意个单词 0-多个\n        return  BindingBuilder.bind(createQtopic2()).to(fe).with(&quot;info.#&quot;);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"language-Java\">@RestController\npublic class TopicController &#123;\n    @Resource\n    private RabbitTemplate template;\n\n    @GetMapping(&quot;topic1&quot;)\n    public String f1(String msg,String rk)&#123;\n        template.convertAndSend(&quot;ex-topic-lx&quot;,rk,msg);\n        return &quot;ok&quot;;\n    &#125;\n&#125;\n</code></pre>\n<p><img data-src=\"RabbitMQ.assets/image-20231013164017687.png\" alt=\"image-20231013164017687\" /></p>\n<h3 id=\"26-死信延迟消息\"><a class=\"anchor\" href=\"#26-死信延迟消息\">#</a> 2.6 死信 + 延迟消息</h3>\n<p>死信：RabbitMQ 的队列中的消息，满足以下条件任意其一，就会成为死信消息</p>\n<p>​\t\t\t1. 消息被拒绝</p>\n<p>​\t\t\t2. 消息过期</p>\n<p>​\t\t\t3. 队列已满</p>\n<p>死信交换器：专门用来转发队列中的死信消息，将死信消息转发到指定的队列中</p>\n<p>我们可以通过死信 + 死信交换器实现延迟消息处理</p>\n<p>RabbitMQ 实现延迟消息处理🈶2 种方式：</p>\n<p>1. 死信 + 死信交换器 代码实现</p>\n<p>2. 延迟消息插件</p>\n<p>RabbitMQ 基于死信和死信交换器实现延迟：</p>\n<p>&lt;img src=&quot;RabbitMQ.assets/image-20231016113011364.png&quot; alt=&quot;image-20231016113011364&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>1. 定义需要的队列、交换器、绑定</p>\n<pre><code class=\"language-Java\">@Configuration\npublic class RabbitMQConfig &#123;\n    //1.创建2个队列\n    @Bean\n    public Queue createQ1()&#123;\n        //1.设置队列 内部消息有效期 设置死信交换器 设置RK\n        Map&lt;String,Object&gt; params=new HashMap&lt;&gt;();\n        //设置队列中每个消息的有效期 单位 毫秒\n        params.put(&quot;x-message-ttl&quot;,3000);\n        //设置对应的死信交换器\n        params.put(&quot;x-dead-letter-exchange&quot;,&quot;dead-ex-lx&quot;);\n        //设置交换器匹配的路由名称\n        params.put(&quot;x-dead-letter-routing-key&quot;,&quot;test&quot;);\n        return QueueBuilder.durable(&quot;dl-q01&quot;).withArguments(params).build();\n    &#125;\n    @Bean\n    public Queue createQ2()&#123;\n        return new Queue(&quot;dl-q02&quot;);\n    &#125;\n    //2.创建1个交换器（1.fanout 2.direct 3.topic 4.header）-死信交换器direct类型\n    @Bean\n    public DirectExchange createDe()&#123;\n        return new DirectExchange(&quot;dead-ex-lx&quot;);\n    &#125;\n    //3.创建1个绑定\n    @Bean\n    public Binding createBd1(DirectExchange de)&#123;\n        return BindingBuilder.bind(createQ2()).to(de).with(&quot;test&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>2. 发送消息 消息给到第一个队列</p>\n<pre><code class=\"language-Java\">@RestController\n@RequestMapping(&quot;/api/mq/&quot;)\npublic class DeadController &#123;\n    \n    @Resource\n    private RabbitTemplate template;\n\n    @GetMapping(&quot;send&quot;)\n    public String sendDead(String msg)&#123;\n        System.err.println(&quot;发送消息，&quot;+msg+&quot;，发送时间：&quot;+System.currentTimeMillis());\n        template.convertAndSend(&quot;&quot;,&quot;dl-q01&quot;,msg);\n        return &quot;OK&quot;;\n    &#125;\n&#125;\n</code></pre>\n<p>3. 监听消息 消费 监听第二个队列</p>\n<pre><code class=\"language-Java\">@Component\npublic class DeadListener &#123;\n\n    @RabbitListener(queues = &quot;dl-q02&quot;)\n    public void hanlder(String m)&#123;\n        System.err.println(&quot;延迟消息，&quot;+m+&quot;，接收时间：&quot;+System.currentTimeMillis());\n    &#125;\n&#125;\n</code></pre>\n<p>4. 运行测试</p>\n<p><img data-src=\"/RabbitMQ.assets/image-20231016112942920.png\" alt=\"image-20231016112942920\" /></p>\n<h3 id=\"27-事务\"><a class=\"anchor\" href=\"#27-事务\">#</a> 2.7 事务</h3>\n<p>数据库中事务：保证数据⼀致性，特别是多个操作要么都成功，要么都失败 RabbitMQ 也有⾃⼰的事务，如果本次操作没有抛异常，就正常发送，如果出现异常，就会回滚，也是 保证消息发送的⼀致性</p>\n<p>使⽤步骤：</p>\n<p>1. 创建配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RabbitMQTranConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 准备 1 个队列</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">createQ3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lx-tran-q01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 创建事务管理器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RabbitTransactionManager</span> <span class=\"token function\">createTran</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConnectionFactory</span> factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RabbitTransactionManager</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 使⽤基于事务的发送</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TranController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RabbitTemplate</span> template<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span> <span class=\"token comment\">// 需要开启 SpringBoot 的事务机制</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendmsg\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sendMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 开启 RabbitMQ 的通道的事务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setChannelTransacted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token comment\">// 发送消息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   \t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        \ttemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lx-tran-q01\"</span><span class=\"token punctuation\">,</span>msg<span class=\"token operator\">+</span><span class=\"token string\">\"--\"</span><span class=\"token operator\">+</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        \t<span class=\"token comment\">// 出错，看看 事务是否⽣效</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        \t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3. 监听消息</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"lx-tran-q01\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handler2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"监听消息：\"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4. 运⾏测试</p>\n<p>⼀定要测试事务的回滚</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231103190838252.png\" alt=\"image-20231103190838252\" /></p>\n<h3 id=\"28-消费消息的手动应答\"><a class=\"anchor\" href=\"#28-消费消息的手动应答\">#</a> 2.8 消费消息的⼿动应答</h3>\n<p>RabbitMQ 默认的消费者消息获取模式采⽤的使⽤⾃动应答</p>\n<p>但是这种有缺陷，可能会出现，消息获取了但是业务处理问题，导致 MQ 也⾃动删除了消息，最终导致 业务没有执⾏</p>\n<p>所以为了解决这种问题，可以开启⼿动应答模式，结合⾃⼰的业务执⾏情况，如果业务执⾏成功，那么 就成功应答</p>\n<p>如果失败，就拒绝消息，同时把消息再加回队列，这样就可以再次消息再次处理（最好加个上限）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"lx-ack-q01\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handler3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Channel</span> channel<span class=\"token punctuation\">,</span><span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AmqpHeaders</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELIVERY_TAG</span><span class=\"token punctuation\">)</span> \t\t\t\t<span class=\"token keyword\">long</span> tag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 消费者获取消息，默认采⽤的⾃动应答，就是获取就应答，这样 MQ 服务器就删除消息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 还可以⼿动应答：结果：1. 成功（MQ 删除） 2. 失败 (MQ 消息)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到ACK消息，监听消息：\"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 拒绝消息 参数说明：1. 消息 id 2. 结果 true 成功 false 拒绝 3. 是否把消息添加回队列中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// ⼀般需要设置个上限，⽐如最多 3 次</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicNack</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 成功消息 参数说明：1. 消息 id 2. 结果 true 成功 false 拒绝</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// channel.basicAck(tag,true);</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 处理业务逻辑 出错了</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"29-rabbitmq如何防止消息丢失\"><a class=\"anchor\" href=\"#29-rabbitmq如何防止消息丢失\">#</a> 2.9 RabbitMQ 如何防⽌消息丢失</h3>\n<p>1. 发送端如何保证消息不丢失</p>\n<p>事务机制和 Confirm 机制，注意：事务机制和 Confirm 机制是互斥的，两者不能共存，会导致 RabbitMQ 报错。</p>\n<p>2.RabbitMQ 服务器端如何保证消息不丢失</p>\n<p>持久化、集群、普通模式、镜像模式。</p>\n<p>3. 消费端如何保证消息不丢失</p>\n<p>basicAck 机制、死信队列、消息补偿机制</p>\n<h3 id=\"210-rabbitmq如何保证消息的幂等性\"><a class=\"anchor\" href=\"#210-rabbitmq如何保证消息的幂等性\">#</a> 2.10 RabbitMQ 如何保证消息的幂等性</h3>\n<p>在编程中⼀个幂等操作的特点是其任意多次执⾏所产⽣的结果与⼀次执⾏的产⽣的结果相同，在 mq 中 由于⽹络故障或客户端延迟消费 mq ⾃动重试过程中可能会导致消息的重复消费，那我们如何保证消息 的幂等问题</p>\n<p>1、⽣成全局 id (雪花算法)，存⼊ redis 或者数据库，在消费者消费消息之前，查询⼀下该消息是否有消费 过。 2、如果该消息已经消费过，则告诉 mq 消息已经消费，将该消息丢弃（⼿动 ack）。</p>\n<p>3、如果没有消费过，将该消息进⾏消费并将消费记录写进 redis 或者数据库中。</p>\n<h3 id=\"211-rabbitmq集群模式\"><a class=\"anchor\" href=\"#211-rabbitmq集群模式\">#</a> 2.11 RabbitMQ 集群模式</h3>\n<p>RabbitMQ 有三种模式： 单机模式 ， 普通集群模式 ， 镜像集群模式 。</p>\n<p><strong>单机模式</strong>：就是 demo 级别的，⼀般就是你本地启动了玩玩⼉的，没⼈⽣产⽤单机模式</p>\n<p><strong>普通集群模式</strong>：意思就是在多台机器上启动多个 RabbitMQ 实例，每个机器启动⼀个。</p>\n<p><strong>镜像集群模式</strong>：这种模式，才是所谓的 RabbitMQ 的⾼可⽤模式，跟普通集群模式不⼀样的是，你创建 的 queue，⽆论元数据 (元数据指 RabbitMQ 的配置数据) 还是 queue ⾥的消息都会存在于多个实例上，然 后每次你写消息到 queue 的时候，都会⾃动把消息到多个实例的 queue ⾥进⾏消息同步。</p>\n<h3 id=\"212-rabbitmq应用场景\"><a class=\"anchor\" href=\"#212-rabbitmq应用场景\">#</a> 2.12 RabbitMQ 应⽤场景</h3>\n<p>RabbitMQ 是一个功能强大的消息队列中间件，广泛应用于各种不同的应用场景。下面是一些常见的 RabbitMQ 应用场景：</p>\n<ol>\n<li>异步任务处理：RabbitMQ 可以作为任务队列使用，将需要异步处理的任务发送到消息队列中，然后由消费者从队列中取出任务并进行处理。这样可以有效地解耦任务的生产者和消费者，提高系统的可伸缩性和稳定性。</li>\n<li>分布式系统集成：在分布式系统中，不同的服务之间需要进行通信和协调。RabbitMQ 可以作为消息中间件，实现不同服务之间的消息传递，包括请求 - 响应模式、发布 - 订阅模式等，从而实现松耦合的分布式系统架构。</li>\n<li>日志收集与分发：在大规模的系统中，日志收集和分发是一个重要的需求。可以使用 RabbitMQ 将日志消息发送到消息队列中，然后由消费者进行实时处理、存储或者分发到其他系统进行进一步的分析和处理。</li>\n<li>广播通知：RabbitMQ 的发布 - 订阅模式可以用于广播通知的场景。当某个事件发生时，可以将通知消息发送到交换机中，然后交换机将消息广播给所有订阅了该交换机的队列。这样可以实现实时的广播通知功能。</li>\n<li>应用解耦和削峰填谷：通过使用 RabbitMQ，不同的应用程序或服务可以通过消息队列进行解耦，提高系统的灵活性和可维护性。同时，消息队列还可以用于平滑处理系统的峰值请求，避免系统过载。</li>\n</ol>\n<p>总之，RabbitMQ 适用于许多不同的应用场景，包括任务处理、分布式系统集成、日志处理、广播通知等。通过合理地使用 RabbitMQ，可以提高系统的可靠性、可伸缩性和可维护性。</p>\n<h2 id=\"扩展\"><a class=\"anchor\" href=\"#扩展\">#</a> 扩展</h2>\n<h3 id=\"1任务调度框架\"><a class=\"anchor\" href=\"#1任务调度框架\">#</a> 1. 任务调度框架</h3>\n<p>Java 中如何实现定时任务？</p>\n<p>比如：</p>\n<p>1. 每天早上 6 点定时执行</p>\n<p>2. 每月最后一个工作日，考勤统计</p>\n<p>3. 每个月 25 号信用卡还款</p>\n<p>4. 会员生日祝福</p>\n<p>5. 每隔 3 秒，自动提醒</p>\n<p>我们可以通过任务调度框架实现上述的需求</p>\n<p>任务调度框架：可以实现定时任务，实现间隔多少时间的重复执行，实现指定日期的重复执行</p>\n<p>Java 中任务调度框架：</p>\n<p>1.Spring Task</p>\n<p>2.Quartz</p>\n<p>3.XXL-Job</p>\n<p>4. 第三云平台：阿里云 - SchedulerX 等等</p>\n<p>选择一个：Spring Task（Spring Scheduled）</p>\n<p>2 个注解 + 1 个表达式</p>\n<p>使用步骤：</p>\n<p>1. 开关类 使用注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableScheduling</span> <span class=\"token comment\">// 开启任务调度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringTask01Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringTask01Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 定义任务 - 重复执行</p>\n<pre><code class=\"language-Java\">@Component\npublic class HelloTask &#123;\n    //定时任务，需要重复执行的方法，并设置触发的规则\n    //每隔3秒，重复执行\n    //CRON表达式 就是设置定时任务的时间关系的特殊的字符串\n    //语法格式：秒 分 时 日 月 星期几 年 其中，只有年可以省略\n    @Scheduled(cron = &quot;0/3 * * * * ?&quot;)\n    public void task1()&#123;\n        System.err.println(&quot;每隔3秒，查看同桌状态！&quot;+System.currentTimeMillis());\n    &#125;\n&#125;\n</code></pre>\n<p>3. 运行查看效果</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231016101548712.png\" alt=\"image-20231016101548712\" /></p>\n<p>CRON 表达式：特殊字符串，主要用来描述时间的，用于任务调度等</p>\n<p><img data-src=\"RabbitMQ.assets/image-20231016102801441.png\" alt=\"image-20231016102801441\" /></p>\n<p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p>\n<blockquote>\n<p>（1）* ：表示匹配该域的任意值。假如在 Minutes 域使用 *，即表示每分钟都会触发事件。</p>\n<p>（2）?：只能用在 DayofMonth 和 DayofWeek 两个域。它也匹配域的任意值，但实际不会。因为 DayofMonth 和 DayofWeek 会相互影响。</p>\n<p>例如：想在每月的 20 日触发调度，不管 20 日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?，其中最后一位只能用？，而不能使用 *，如果使用 * 表示不管星期几都会触发，实际上并不是这样。</p>\n<p>（3）-：表示范围。例如在 Minutes 域使用 5-20，表示从 5 分到 20 分钟每分钟触发一次</p>\n<p>（4）/：表示起始时间开始触发，然后每隔固定时间触发一次。例如在 Minutes 域使用 5/20，则意味着 5 分钟触发一次，而 25，45 等分别触发一次.。</p>\n<p>（5）,：表示列出枚举值。例如：在 Minutes 域使用 5,20，则意味着在 5 和 20 分每分钟触发一次。</p>\n<p>（6）L：表示最后，只能出现在 DayofWeek 和 DayofMonth 域。如果在 DayofWeek 域使用 5L，意味着在最后的一个星期四触发。</p>\n<p>（7）W：表示有效工作日 (周一到周五)，只能出现在 DayofMonth 域，系统将在离指定日期的最近的有效工作日触发事件。</p>\n<p>例如：在 DayofMonth 使用 5W，如果 5 日是星期六，则将在最近的工作日：星期五，即 4 日触发。如果 5 日是星期天，则在 6 日 (周一) 触发；如果 5 日在星期一到星期五中的一天，则就在 5 日触发。另外一点，W 的最近寻找不会跨过月份 。</p>\n<p>（8）LW：这两个字符可以连用，表示在某个月最后一个工作日。</p>\n<p>（9）#：用于确定每个月第几个星期几，只能出现在 DayofWeek 域。例如在 4#2，表示某月的第二个星期三。</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcm9uLnFxZTIuY29tLw==\">https://cron.qqe2.com/</span></p>\n<p><img data-src=\"RabbitMQ.assets/image-20231016103550581.png\" alt=\"image-20231016103550581\" /></p>\n",
            "tags": [
                "Linux",
                "Docker",
                "RabbitMQ",
                "Linux"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/frontend/vue/vue3/Vue3%E9%80%9F%E6%88%90/",
            "url": "https://sbysg.github.io/2023/10/22/frontend/vue/vue3/Vue3%E9%80%9F%E6%88%90/",
            "title": "vue3",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<h1 id=\"vue3速成\"><a class=\"anchor\" href=\"#vue3速成\">#</a> Vue3 速成</h1>\n<h2 id=\"0-vue2-vs-vue3\"><a class=\"anchor\" href=\"#0-vue2-vs-vue3\">#</a> 0、Vue2 VS Vue3</h2>\n<h2 id=\"1-vue3js\"><a class=\"anchor\" href=\"#1-vue3js\">#</a> 1、Vue3.js</h2>\n<p>Vue: 是一款用于构建用户界面的 JavaScript 框架，提供了一套声明式的、组件化的编程模型</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcv\">https://cn.vuejs.org/</span></p>\n<p><strong>Vue3 特有的语法：</strong></p>\n<p><strong>1.setup：</strong></p>\n<p>vue3 中新增了 setup，它的出现是为了解决组件内容庞大后，理解和维护组件变得困难的问题。即 vue 中 data、computed、methods、watch 等内容非常多以后，同一业务逻辑的 data 中的数据和 methods 中的方法在 vue 文件中 “相隔甚远”，看代码时，经常需要根据 data 中的数据去搜索找到对应的 methods 方法，上下跳跃查看代码，非常不方便。而在 setup 中，则可以把 data 中的数据和 methods 方法写在相临的位置，方便查看和维护。</p>\n<p>开启了 setup 就不需要在定义 data 或 methods 了，直接在 script 标签写就行</p>\n<p>直接在 script 标签上使用 setup</p>\n<pre><code>&lt;!--js代码--&gt;\n&lt;script setup&gt;\n</code></pre>\n<p>**const：** 定义常量，在 vue3 中被用来定义变量或函数</p>\n<p>定义变量时，因为要保证 vue 的响应式，所以配合 ref 函数使用</p>\n<p><strong>ref 函数：</strong><br />\n作用：定义一个响应式的数据<br />\n语法: const xxx = ref (initValue)<br />\n 创建一个包含响应式数据的引用对象（reference 对象，简称 ref 对象）。<br />\nJS 中操作数据： xxx.value<br />\n 模板中读取数据：不需要.value，直接：div  /div<br />\n 备注：<br />\n接收的数据可以是：基本类型、也可以是对象类型。<br />\n基本类型的数据：响应式依然是靠 Object.defineProperty () 的 get 与 set 完成的。<br />\n对象类型的数据：内部 “求助” 了 Vue3.0 中的一个新函数 —— reactive 函数。</p>\n<p>适用于：基本类型 (数字、字符串、布尔值)</p>\n<p><strong>reactive 函数：</strong></p>\n<ul>\n<li>\n<p><code>reactive</code>  是 Vue3 中提供的实现响应式数据的方法。</p>\n</li>\n<li>\n<p>reactive 参数必须是对象 (json /arr)</p>\n</li>\n<li>\n<p>如果给 reactive 传递了其它对象</p>\n<ul>\n<li>默认情况下，修改对象无法实现界面的数据绑定更新。</li>\n<li>如果需要更新，需要进行重新赋值。(即不允许直接操作数据，需要放个新的数据来替代原数据)</li>\n</ul>\n<p>适用于 对象或数组</p>\n</li>\n</ul>\n<p>核心的语法知识：</p>\n<p>**1. 模板语法：** 插值语法</p>\n<p>语法格式：&lt;标签&gt;&lt;/ 标签 &gt;</p>\n<p>**2. 事件绑定：** 实现标签的事件的设置</p>\n<p>语法格式：&lt;标签 v-on: 事件名 =&quot;方法名&quot;&gt;&lt;/ 标签 &gt;  简写 &lt; 标签 @事件名 =&quot;方法名&quot;&gt;&lt;/ 标签 &gt;</p>\n<p>**3. 属性绑定：** 实现标签的属性的设置</p>\n<p>语法格式：&lt;标签 v-bind: 属性名 =&quot;变量名&quot;&gt;&lt;/ 标签 &gt;  简写 &lt; 标签：属性名 =&quot;变量名&quot;&gt;&lt;/ 标签 &gt;</p>\n<p>**4. 分支语法：** 实现分支语句</p>\n<p>语法格式：&lt;标签 v-if=&quot;布尔类型表达式&quot;&gt;&lt;/ 标签 &gt;</p>\n<p>**5. 循环语法：** 实现重复 集合 遍历</p>\n<p>语法格式：&lt;标签 v-for=&quot;变量名 in 数组或集合名&quot;&gt;&lt;/ 标签 &gt;</p>\n<p>**6. 双向绑定：** 实现输入标签（表单标签）的值的绑定，双向</p>\n<p>语法格式：&lt;标签 v-model=&quot;变量名&quot;&gt;&lt;/ 标签 &gt;</p>\n<p>示例代码：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!--    vue.js--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue@3/dist/vue.global.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token selector\">.dvcolor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token selector\">.dvgreen</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">&lt;!-- 标签 --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">&lt;!--    1. 插值 message 来自下面的变量 --></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>点-<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">&lt;!--    2. 事件 - 绑定 @click 点击事件 指定函数 --></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ck()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>困了点点我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">&lt;!--    3. 属性 - 绑定：属性名 --></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dvcls<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>change<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>你的心情<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 引入</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> createApp<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> Vue</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">//setup 标记 Vue3 支持 Vue3 的语法 直接定义变量、函数都可以</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">//const 常量 一般配合 ref（Vue3 语法）把一个常量变成一个对象，这个对象默认拥有属性 value</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello vue!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">const</span> num<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">const</span> dvcls<span class=\"token operator\">=</span><span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dvcolor\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 定义 函数</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">function</span> <span class=\"token function\">ck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                num<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                message<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"你点我\"</span><span class=\"token operator\">+</span>num<span class=\"token punctuation\">.</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"次！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">var</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">change</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dvcls<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token comment\">//js 关闭定时任务</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token comment\">//js 开启定时任务</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    t<span class=\"token operator\">=</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">==</span><span class=\"token string\">\"dvcolor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                            dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"dvgreen\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                            dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"dvcolor\"</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">==</span><span class=\"token string\">\"dvcolor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                  dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"dvgreen\"</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                  dvcls<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"dvcolor\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 只有返回的上面才可以使用</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                message<span class=\"token punctuation\">,</span>ck<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">,</span>dvcls<span class=\"token punctuation\">,</span>change</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/vue@3/dist/vue.global.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Vue3的语法学习<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dv01<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">&lt;!--        4. 分支语句 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user.name!=null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>用户名：<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-else</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点击登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>注销登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">&lt;!--        5. 循环语句 --></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>精英小组<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(n,index) in names<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>del(index)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">&lt;!--            6. 双向绑定 表单标签：输入框（输入框、单选框、复选框）、下拉框、文本域 --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>加入精英小组<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 引入</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> createApp<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> Vue</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">//setup 标记 Vue3 支持 Vue3 的语法 直接定义变量、函数都可以</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">//const 常量 一般配合 ref（Vue3 语法）把一个常量变成一个对象，这个对象默认拥有属性 value</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 变量 对象</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 变量 数组</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token string\">\"邢朋辉\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"田密\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"许阳\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>              names<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">[</span>names<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>name<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">del</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token comment\">//splice 数组中删除，参数说明：1. 从哪个索引开始删除 2. 删除几个</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>              names<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 定义函数</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>              user<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"帅帅的邢\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                user<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 只有返回的上面才可以使用</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                user<span class=\"token punctuation\">,</span>login<span class=\"token punctuation\">,</span>logout<span class=\"token punctuation\">,</span>names<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>add<span class=\"token punctuation\">,</span>del</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#dv01'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2-vite\"><a class=\"anchor\" href=\"#2-vite\">#</a> 2、Vite</h2>\n<p>Vite：是一种新型前端构建工具，能够显著提升前端开发体验</p>\n<p>脚手架，创建 Vue 项目，替代 Vue-cli</p>\n<blockquote>\n<p>Vite 需要 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">Node.js</span> 版本 14.18+，16+。然而，有些模板需要依赖更高的 Node 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 Node 版本。</p>\n<p>npm &gt;10.2.0 以上版本</p>\n<p>如果版本低，升级一下：</p>\n<p>npm install -g npm@10.2.0</p>\n</blockquote>\n<p>基于 Vite 创建 vue 项目：</p>\n<p>1.cmd 或终端执行命令</p>\n<p>npm create vite@latest</p>\n<p>如果报 npm 版本过低，需要执行 npm install -g npm@10.2.0  升级 npm 的版本</p>\n<p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017115210999.png\" alt=\"image-20231017115210999\" /></p>\n<p>2. 完成初始化</p>\n<p>分别执行：</p>\n<p>cd vue02<br />\nnpm install<br />\nnpm run dev</p>\n<p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017115330906.png\" alt=\"image-20231017115330906\" /></p>\n<p>3. 访问</p>\n<p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017115350991.png\" alt=\"image-20231017115350991\" /></p>\n<p>vite 的项目结构：</p>\n<p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017115446998.png\" alt=\"image-20231017115446998\" /></p>\n<p>vue 页面结构：</p>\n<pre><code class=\"language-vue\">&lt;!--html标签--&gt;\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;饿了么？&lt;/h1&gt;\n  &lt;/div&gt;\n  &lt;HelloWorld msg=&quot;Vite + Vue&quot; /&gt;\n&lt;/template&gt;\n&lt;!--js代码 vue3的语法--&gt;\n&lt;script setup&gt;\nimport HelloWorld from './components/HelloWorld.vue'\n\n&lt;/script&gt;\n&lt;!--css样式 美化--&gt;\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>Vue 页面使用 Vue3 语法</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;\n  &lt;h1&gt;醒醒，不能犯困！&lt;/h1&gt;\n  &lt;div&gt;\n    &lt;h1&gt;次数：&#123;&#123;count&#125;&#125;&lt;/h1&gt;\n    &lt;button @click=&quot;dj&quot;&gt;点击我，看看什么效果&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!--Vue3的写法--&gt;\n&lt;script setup&gt;\n//2.导入 Vue3中对象\nimport &#123; ref &#125; from 'vue'\n\n//3.自定义属性\ndefineProps(&#123;\n  msg: String,\n&#125;)\n//4.定义变量\nconst count = ref(0)\n//5.定义函数\nconst dj = () =&gt; &#123;\n  count.value++;\n  alert(&quot;你目前点击：&quot;+count.value);\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.read-the-docs &#123;\n  color: #888;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h2 id=\"3-vue-router\"><a class=\"anchor\" href=\"#3-vue-router\">#</a> 3、Vue-router</h2>\n<h3 id=\"31-vue-router是什么\"><a class=\"anchor\" href=\"#31-vue-router是什么\">#</a> 3.1 Vue-router 是什么</h3>\n<p>Vue-router:Vue.js 的官方路由为 Vue.js 提供富有表现力、可配置的、方便的路由</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poLw==\">https://router.vuejs.org/zh/</span></p>\n<p>作用：</p>\n<p>1. 实现 vue 页面 (组件) 的跳转</p>\n<p>2. 可以在跳转的时候携带参数</p>\n<h3 id=\"32-vue3使用vue-router\"><a class=\"anchor\" href=\"#32-vue3使用vue-router\">#</a> 3.2 Vue3 使用 Vue-router</h3>\n<p>基于 Vue-router 实现页面跳转：</p>\n<p>1. 安装 vue-router</p>\n<p>npm install vue-router@4</p>\n<p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017151206218.png\" alt=\"image-20231017151206218\" /></p>\n<p>2. 在 src 创建路由的 js 文件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>createRouter <span class=\"token keyword\">as</span> _createRouter<span class=\"token punctuation\">,</span> createWebHistory<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 导入 凡是想要通过路由跳转的，都需要在这：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 导入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 注册 设置对应 vue 组件的路径名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> study <span class=\"token keyword\">from</span> <span class=\"token string\">'../views/study.vue'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 2. 注册 设置对应 vue 组件的路径名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/study'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> study <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">_createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        routes</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"Vue3%E9%80%9F%E6%88%90.assets/image-20231017151308655.png\" alt=\"image-20231017151308655\" /></p>\n<p>3. 在 main.js 中实现路由的配置</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./style.css'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 导入路由</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./router/index.js\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 配置路由</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>4. 在 app.vue 主页 使用路由</p>\n<pre><code class=\"language-vue\">&lt;!--html标签--&gt;\n&lt;template&gt;\n  &lt;div&gt;\n&lt;!--    静态路由 to 对应路径--&gt;\n    &lt;router-link to=&quot;/study&quot;&gt;静态路由&lt;/router-link&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n&lt;!--  路由跳转的页面显示去  --&gt;\n    &lt;router-view/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;!--js代码 vue3的语法--&gt;\n&lt;script setup&gt;\n\n&lt;/script&gt;\n&lt;!--css样式 美化--&gt;\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>5. 实现一个 vue3 的页面编写</p>\n<pre><code class=\"language-vue\">&lt;!--标签 画页面--&gt;\n&lt;template&gt;\n&lt;div&gt;\n  &lt;h1&gt;学习vue3&lt;/h1&gt;\n  &lt;div&gt;\n    &lt;h1&gt;内容：&#123;&#123;str1&#125;&#125;&lt;/h1&gt;\n    &lt;button style=&quot;font-size: 30px;color: red&quot; @click=&quot;show&quot;&gt;查看内容&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!--Vue3的写法 setup--&gt;\n&lt;script setup&gt;\n//导入\nimport &#123;ref&#125; from 'vue'\n\n//定义变量\nconst str1=ref(&quot;醒醒……&quot;);\n//定义函数\nconst show=()=&gt;&#123;\n  alert(str1.value);\n&#125;\n\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"33-vue-router实现跳转的方式\"><a class=\"anchor\" href=\"#33-vue-router实现跳转的方式\">#</a> 3.3 Vue-router 实现跳转的方式</h3>\n<p>vue-router 实现页面跳转有 2 种方式：</p>\n<p>必须在页面使用：router-view (一般写在 app.vue 页面)</p>\n<p>第一种：声明式路由（静态路由）</p>\n<p>直接在 template 里面使用 router-link 标签 通过 to 属性实现页面跳转</p>\n<pre><code class=\"language-vue\">  &lt;div&gt;\n&lt;!--    静态路由 to 对应路径--&gt;\n    &lt;router-link to=&quot;/study&quot;&gt;静态路由&lt;/router-link&gt;\n  &lt;/div&gt;\n</code></pre>\n<p>第二种：编程式路由（动态路由）</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n&lt;div&gt;\n  &lt;h1&gt;动态路由&lt;/h1&gt;\n  &lt;button @click=&quot;tz&quot;&gt;点击跳转&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\n// 导入\nimport &#123;ref&#125; from 'vue'\nimport &#123; useRouter &#125; from 'vue-router'\n// 声明变量\nconst router=useRouter()\nconst tz=()=&gt;&#123;\n  //基于路由 实现页面跳转 动态路由\n  router.push(&quot;/study&quot;);\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"34-vue-router实现传值\"><a class=\"anchor\" href=\"#34-vue-router实现传值\">#</a> 3.4 Vue-router 实现传值</h3>\n<p>Vue-router 在跳转页面的时候，也可以携带数据过去</p>\n<p>有 2 种方式：</p>\n<p>第一种：path (路径)+query (查询参数)</p>\n<p>传递：router.push ({path: '/study', query: { q1: msg1.value} })</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n&lt;div&gt;\n  &lt;h1&gt;通过路径和查询参数进行传递&lt;/h1&gt;\n  &lt;input v-model=&quot;msg1&quot;&gt;\n  &lt;button @click=&quot;tz1&quot;&gt;跳转传参&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport &#123;ref&#125; from 'vue';\nimport &#123;useRouter&#125; from &quot;vue-router&quot;;\nconst router=useRouter();\nconst msg1=ref(&quot;&quot;);\nconst tz1=()=&gt;&#123;\n  //路由 跳转页面 传递参数 path+query\n  router.push(&#123; path: '/study', query: &#123; q1: msg1.value &#125; &#125;)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>获取：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRoute<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> route<span class=\"token operator\">=</span><span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>query<span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">9</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr></table></figure><p>第二种：name (名称)+params (参数)</p>\n<p>路由注册的时候：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 2. 注册 设置对应 vue 组件的路径名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 通过 name+params 传值的需要，需要再路径后面：参数名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/study/:p1'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'study'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> study <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>传递：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n&lt;div&gt;\n  &lt;label&gt;要传的数据：&lt;/label&gt;&lt;input v-model=&quot;msg2&quot;&gt;\n  &lt;button @click=&quot;tz2&quot;&gt;跳转传值通过参数&lt;/button&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport &#123;ref&#125; from 'vue'\nimport &#123;useRouter&#125; from &quot;vue-router&quot;;\n\nconst router=useRouter();\n\nconst msg2=ref(&quot;&quot;)\n\nconst tz2 = () =&gt; &#123;\n  router.push(&#123; name: 'study', params: &#123; p1:msg2.value &#125; &#125;)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>获取：</p>\n<pre><code class=\"language-vue\">&lt;!--标签 画页面--&gt;\n&lt;template&gt;\n&lt;div&gt;\n  &lt;h1&gt;学习vue3&lt;/h1&gt;\n  &lt;div&gt;\n    &lt;h1&gt;内容：&#123;&#123;str1&#125;&#125;&lt;/h1&gt;\n    &lt;button style=&quot;font-size: 30px;color: red&quot; @click=&quot;show&quot;&gt;查看内容&lt;/button&gt;\n    &lt;div&gt;\n      &lt;h1&gt;接收路由携带数据&lt;/h1&gt;\n      &lt;h1&gt;query:&#123;&#123;route.query.q1&#125;&#125;&lt;/h1&gt;\n      &lt;h1&gt;params:&#123;&#123;route.params.p1&#125;&#125;&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!--Vue3的写法 setup--&gt;\n&lt;script setup&gt;\n//导入\nimport &#123;ref&#125; from 'vue'\nimport &#123;useRoute&#125; from 'vue-router'\nconst route=useRoute();\n\nconsole.log(route.params)\n//定义变量\nconst str1=ref(&quot;醒醒……&quot;);\n//定义函数\nconst show=()=&gt;&#123;\n  alert(str1.value);\n&#125;\n\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>主要 vue3 中使用 name+params 进行传递参数，需要再注册路由的时候，通过传递的参数名，进行路径占位：path: '/study/:p1'</p>\n<p>其中 p1 就是要传递的参数名</p>\n<h2 id=\"4-pinia\"><a class=\"anchor\" href=\"#4-pinia\">#</a> 4、Pinia</h2>\n<h3 id=\"41-pinia概述\"><a class=\"anchor\" href=\"#41-pinia概述\">#</a> 4.1 Pinia 概述</h3>\n<p>Pinia 是 Vue 的存储库，实现全局变量的定义</p>\n<p>这里定义的变量信息，任何页面都可以使用，代替原来的 VueX</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waW5pYS53ZWIzZG9jLnRvcC8=\">https://pinia.web3doc.top/</span></p>\n<h3 id=\"42-pinia存储数据\"><a class=\"anchor\" href=\"#42-pinia存储数据\">#</a> 4.2 Pinia 存储数据</h3>\n<p>实现步骤：</p>\n<p>1. 依赖</p>\n<p>npm install pinia</p>\n<p>2. 实现配置</p>\n<p>在 main.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./style.css'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 导入路由</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./router/index.js\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 导入 pinia</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 实例化 pinia</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 配置路由、pinia</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3. 实现 js</p>\n<p>在 src 创建文件夹 pinia 内部创建 js 文件 index.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'store'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 定义需要共享的变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span><span class=\"token string\">'邢'</span> <span class=\"token comment\">// 定义全局变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 定义方法  设置 state 中的值 set 方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token function\">setAuthor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">author</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 定义函数 修饰变量的值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span>author<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>4. 使用</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n&lt;div&gt;\n  &lt;h1&gt;动态路由&lt;/h1&gt;\n  &lt;button @click=&quot;tz&quot;&gt;点击跳转&lt;/button&gt;\n\n  &lt;div&gt;\n&lt;!--    获取pinia中的值--&gt;\n    &lt;h1&gt;全局变量：&#123;&#123;store.author&#125;&#125;&lt;/h1&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;h1&gt;修改Pinia的值&lt;/h1&gt;\n    &lt;input v-model=&quot;a&quot;&gt;\n    &lt;button @click=&quot;set1&quot;&gt;修改作者&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\n// 导入\nimport &#123;ref&#125; from 'vue'\nimport &#123; useRouter &#125; from 'vue-router'\n//导入\nimport &#123;useStore&#125; from &quot;../pinia/index.js&quot;;\n// 声明变量\nconst router=useRouter()\n// 声明 pinia\nconst store=useStore()\nconst tz=()=&gt;&#123;\n  //基于路由 实现页面跳转 动态路由\n  router.push(&quot;/study&quot;);\n&#125;\n\nconst a=ref(&quot;&quot;);\n\nconst set1 = () =&gt; &#123;\n  //修改 pinia中的值\n  store.setAuthor(a.value);\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre>\n<p>获取：</p>\n<p>修改值：store.setAuthor (要修改的内容);</p>\n<h3 id=\"43-pinia实现持久化\"><a class=\"anchor\" href=\"#43-pinia实现持久化\">#</a> 4.3 Pinia 实现持久化</h3>\n<p>Pinia 默认数据存储在内存中，一旦刷新浏览器，数据就没有了，所以可以配置持久化</p>\n<p>持久化插件：pinia-plugin-persist</p>\n<p>实现步骤：</p>\n<p>1. 依赖</p>\n<p>npm install pinia-plugin-persist</p>\n<p>2. 实现配置</p>\n<p>在 main.js 中使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./style.css'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 导入路由</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./router/index.js\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 导入 pinia</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 导入 pinia 持久化 插件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> piniaPersist <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia-plugin-persist'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 设置 pinia 持久化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pinia<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>piniaPersist<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 配置路由、pinia</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3. 在 pinia 的 js 中开启持久化</p>\n<p>在 store/index.js 中</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'store'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 定义需要共享的变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span><span class=\"token string\">'邢'</span> <span class=\"token comment\">// 定义全局变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 定义方法  设置 state 中的值 set 方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token function\">setAuthor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">author</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 定义函数 修饰变量的值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span>author<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">,</span><span class=\"token literal-property property\">persist</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token literal-property property\">enabled</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//true 表示开启持久化保存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>接下来再测试，发送刷新浏览器，数据仍存在</p>\n<h2 id=\"5-vant组件库\"><a class=\"anchor\" href=\"#5-vant组件库\">#</a> 5、Vant 组件库</h2>\n<h2 id=\"6-axios\"><a class=\"anchor\" href=\"#6-axios\">#</a> 6、Axios</h2>\n<h2 id=\"7-综合案例\"><a class=\"anchor\" href=\"#7-综合案例\">#</a> 7、综合案例</h2>\n",
            "tags": [
                "前端",
                "Vue",
                "vue3"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/springframe/spring/springcloud/SpringCloud/",
            "url": "https://sbysg.github.io/2023/10/22/springframe/spring/springcloud/SpringCloud/",
            "title": "springcloud",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<h1 id=\"springcloud\"><a class=\"anchor\" href=\"#springcloud\">#</a> SpringCloud</h1>\n<h2 id=\"零-springcloud\"><a class=\"anchor\" href=\"#零-springcloud\">#</a> 零、SpringCloud</h2>\n<h3 id=\"01-微服务\"><a class=\"anchor\" href=\"#01-微服务\">#</a> 0.1 微服务</h3>\n<p>微服务：是面向服务开发（SOA）的一种架构思维，主要是把一个大项目拆解为多个独立的小项目（服务）。每个小项目（服务），独立编码，独立部署和运行。</p>\n<p>核心：1. 分而治之 2. 各司其职 3. 服务的高可用和可扩展性</p>\n<p>微服务其实就是将一个项目按照功能模块（水平拆分）进行拆分，拆分为不同的服务，服务之间通过 http 请求完成调用</p>\n<p>SpringCloud Alibaba</p>\n<p>注册中心：nacos  作用：管理服务，实现服务的注册与发现 使用：注解 @EnableDiscoveryClient + 配置 (application)</p>\n<p>配置中心：nacos 作用： 管理配置，实现配置的动态化管理，可以不用更改代码，实现不停机更新 使用：注解 @RefreshScope + 配置 (Nacos 配置管理 新建配置 Data ID 服务名一样)+ 配置 (Bootstrap)</p>\n<p>远程调用：OpenFeign 作用：调用服务，实现服务间通信 使用：注解 @EnableFeignClients+@FeignClient</p>\n<p>网关中心：gateway 作用：网关，实现服务的聚合统一接口，对请求过滤 使用：配置 + 接口 GlobalFilter</p>\n<p>流量控制：Sentinel 作用：流控和熔断降级，流控就是流量控制，防止高并发导致服务器压力过大，熔断降级就是对核心方法的一种保护，如果核心方法出现问题可以立即响应保证可用性 使用：配置 (Sentinel 可视化 流控、熔断)</p>\n<p>链路跟踪：Sleuth+Zipkin 作用：实现微服务下一次请求的完成过程的日志记录，实现服务间的调用关系 使用：配置</p>\n<h3 id=\"02-微服务技术方案\"><a class=\"anchor\" href=\"#02-微服务技术方案\">#</a> 0.2 微服务技术方案</h3>\n<p>1.Dubbo（阿里巴巴，开源到 apache）：2012 面世，2014 停更；2015 底阿里巴巴宣布继续更新。Dubbox（即 Dubbo eXtensions，当当网基于 Dubbo 的扩展）</p>\n<p>2.Spring Cloud（Spring）2016 年（曾经是 SpringCloud Netfiex 现如今是 SpringCloud + Aliababa）</p>\n<p>3.ServiceComb（华为，开源到 apache，在公司内部叫 cse） 2017 年</p>\n<p>4.Lstio（服务网格化 由谷歌、IBM 与 Lyft 合作开源）(<span class=\"exturl\" data-url=\"aHR0cDovL3VtbC5vcmcuY24vd2Z3LzIwMTkwOTA2My5hc3A=\">uml.org.cn/wfw/201909063.asp</span>)，2017 年 5 月发布</p>\n<p>5.HSF (阿里内部使用的，面向企业收费):<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vZG9jdW1lbnRfZGV0YWlsLzE0OTQ5OC5odG1s\">https://help.aliyun.com/document_detail/149498.html</span></p>\n<h2 id=\"一-nacos\"><a class=\"anchor\" href=\"#一-nacos\">#</a> 一、Nacos</h2>\n<h3 id=\"11-nacos是什么\"><a class=\"anchor\" href=\"#11-nacos是什么\">#</a> 1.1 Nacos 是什么</h3>\n<p>Nacos: 阿里巴巴开源的，专门用来解决微服务中的服务管理和配置管理的软件。</p>\n<p>主要用在微服务项目中，实现在微服务中，各个服务的管理，还可以实现动态配置管理的功能</p>\n<p>官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYWNvcy5pby96aC1jbi8=\">https://nacos.io/zh-cn/</span></p>\n<h3 id=\"12-nacos的作用\"><a class=\"anchor\" href=\"#12-nacos的作用\">#</a> 1.2 Nacos 的作用</h3>\n<p><strong>1. 注册中心 - 服务管理</strong></p>\n<p>​\t服务可以注册和发现，并且实现服务的实时状态监听（心跳连接）</p>\n<p><strong>2. 配置中心 - 配置管理</strong></p>\n<p>​\t实现项目中的配置的动态化管理，实现配置改变项目自动生效，无需重新发布项目</p>\n<p><strong>3. 可视化设置 - 动态 DNS 服务</strong></p>\n<p>​\t实现服务的负载均衡，流控访问控制等</p>\n<h3 id=\"13-安装nacos\"><a class=\"anchor\" href=\"#13-安装nacos\">#</a> 1.3 安装 Nacos</h3>\n<p>​\t1. 下载 nacos</p>\n<p>​\t2. 修改启动模式</p>\n<p>​\twindows 系统 startup.cmd 中，mac 或 linux 是在 startup.sh 中</p>\n<p>​\t修改启动模式为：standalone</p>\n<p>​\texport MODE=&quot;cluster&quot; 更改为 export MODE=&quot;standalone&quot;</p>\n<p>​\t3. 启动</p>\n<p>​\t双击 startup.cmd （Windows 系统）</p>\n<p>​\t如果闪退：</p>\n<p>​\t\t1. 检查是否配置 jdk</p>\n<p>​\t\t2. 右键管理员启动</p>\n<p>​\t\t3. 查看日志，上网搜搜</p>\n<p>​\t4. 访问</p>\n<p>​\t<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODQ4L25hY29z\">http://localhost:8848/nacos</span></p>\n<p><img data-src=\"SpringCloud.assets/image-20231009150549388.png\" alt=\"image-20231009150549388\" /></p>\n<h4 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h4>\n<h3 id=\"13-nacos注册中心\"><a class=\"anchor\" href=\"#13-nacos注册中心\">#</a> 1.3 Nacos 注册中心</h3>\n<h4 id=\"131-注册中心\"><a class=\"anchor\" href=\"#131-注册中心\">#</a> 1.3.1 注册中心</h4>\n<p>微服务的灵魂：就是服务，那么服务怎么管理？就需要使用注册中心，来完成服务的管理</p>\n<p>目前市面上有哪些注册中心：Nacos、Zookeeper、Eureka、Consul……</p>\n<p>我们选择 Nacos，首先：阿里巴巴开源，在阿里内部已经被使用  其次：功能强大，性能稳定 最后：活跃度高，和 SpringCloud 匹配度高</p>\n<p>注册中心的作用：实现服务的管理，发现和注册服务，并监听服务的可用性</p>\n<h4 id=\"132-基于nacos实现注册中心\"><a class=\"anchor\" href=\"#132-基于nacos实现注册中心\">#</a> 1.3.2 基于 Nacos 实现注册中心</h4>\n<p><img data-src=\"/SpringCloud.assets/image-20231009160522385.png\" alt=\"image-20231009160522385\" /></p>\n<p><strong>0. 搭架子</strong></p>\n<p>Maven 多模块开发</p>\n<p>一般都会有 common 公共项目、服务提供者:provider、server、服务消费者：不是必须的</p>\n<p><strong>1. 服务提供者</strong></p>\n<p>​\t1. 依赖 jar</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--        依赖 Nacos 注册中心 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2021.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>​\t2. 实现配置</p>\n<p>​\t在 application.yml 实现 nacos 地址的配置</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#注册中心</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Hello<span class=\"token punctuation\">-</span>provider<span class=\"token punctuation\">-</span>lx <span class=\"token comment\"># 服务起个名，名称唯一</span></pre></td></tr></table></figure><p>​\t在开关类，使用注解标记服务的注册</p>\n<pre><code class=\"language-Java\">@SpringBootApplication\n@EnableDiscoveryClient //注册或发现服务 就会注册服务到注册中心\npublic class ProviderApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ProviderApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<p>​\t3. 编写代码</p>\n<p>​\t\t服务直接暴露的是控制层</p>\n<pre><code class=\"language-Java\">@RestController\npublic class HelloController &#123;\n    @GetMapping(&quot;h1&quot;)\n    public R hi()&#123;\n        return new R(0,&quot;OK&quot;,&quot;当前时间：&quot;+System.currentTimeMillis());\n    &#125;\n&#125;\n</code></pre>\n<p>​\t4. 运行测试</p>\n<p><img data-src=\"/SpringCloud.assets/image-20231009160355796.png\" alt=\"image-20231009160355796\" /></p>\n<p><img data-src=\"/SpringCloud.assets/image-20231009160428557.png\" alt=\"image-20231009160428557\" /></p>\n<h4 id=\"133-注册中心核心\"><a class=\"anchor\" href=\"#133-注册中心核心\">#</a> 1.3.3 注册中心核心</h4>\n<p><strong>1. 注解</strong></p>\n<p>@EnableDiscoveryClient 修饰类，作用：发现和注册服务</p>\n<p><strong>2. 配置</strong></p>\n<p>1. 项目（服务）需要有个名字，在注册中心中，需要唯一</p>\n<p>2. 配置 Nacos 的地址</p>\n<h3 id=\"14-nacos配置中心\"><a class=\"anchor\" href=\"#14-nacos配置中心\">#</a> 1.4 Nacos 配置中心</h3>\n<h3 id=\"15-nacos底层原理\"><a class=\"anchor\" href=\"#15-nacos底层原理\">#</a> 1.5 Nacos 底层原理</h3>\n<h2 id=\"二-openfeign\"><a class=\"anchor\" href=\"#二-openfeign\">#</a> 二、OpenFeign</h2>\n<h3 id=\"21-openfeign是什么\"><a class=\"anchor\" href=\"#21-openfeign是什么\">#</a> 2.1 OpenFeign 是什么</h3>\n<p>Openfeign: 是一种声明式的 web 工具，可以使用它的注解创建接口，从而实现服务的远程调用</p>\n<p>OpenFeign 是基于 Feign 的二次开发，主要用来进行远程调用</p>\n<p>RPC: 远程过程通信，2 个程序的调用，可能是相同语言，也可能不同的语言</p>\n<p>我们在微服务开发中，采用 OpenFeign 进行服务的调用</p>\n<h3 id=\"22-openfeign的使用\"><a class=\"anchor\" href=\"#22-openfeign的使用\">#</a> 2.2 OpenFeign 的使用</h3>\n<p>1. 依赖 jar</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--        注册中心 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2021.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!--        负载均衡 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-loadbalancer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">&lt;!--        远程调用 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-openfeign<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2. 实现配置</p>\n<p>在 application.yml 中完成</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> lx<span class=\"token punctuation\">-</span>consumer</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">mvc</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">pathmatch</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">matching-strategy</span><span class=\"token punctuation\">:</span> ant_path_matcher</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9092</span></pre></td></tr></table></figure><p>在开关类上，使用注解</p>\n<pre><code class=\"language-Java\">@SpringBootApplication\n@EnableDiscoveryClient //注册服务\n@EnableFeignClients //启用OpenFeign\npublic class ConsumerApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ConsumerApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<p>3. 编写代码</p>\n<p>远程调用接口层</p>\n<pre><code class=\"language-Java\">@FeignClient(value = &quot;lx-provider&quot;) //通过OpenFeign调用，远程服务，指定服务名\npublic interface WeatherService &#123;\n    /**\n     * 指定要远程调用的 方法\n     * 要求：\n     * 1.返回值 需要和远程服务一样\n     * 2.请求方式 必须一样\n     * 3.请求路径 必须对\n     * 4.请求参数 类型、顺序一致 (request和response 不写)*/\n    @GetMapping(&quot;server/weather/today&quot;)\n    R today();\n&#125;\n</code></pre>\n<p>控制层</p>\n<pre><code class=\"language-Java\">@RestController\n@Api(tags = &quot;天气管理&quot;)\npublic class WeatherController &#123;\n    @Resource\n    private WeatherService service;\n\n    @GetMapping(&quot;api/weather/today&quot;)\n    public R today()&#123;\n        return service.today();\n    &#125;\n&#125;\n</code></pre>\n<p>4. 运行测试</p>\n<p><img data-src=\"/SpringCloud.assets/image-20231010102502758.png\" alt=\"image-20231010102502758\" /></p>\n<p><img data-src=\"/SpringCloud.assets/image-20231010102529557.png\" alt=\"image-20231010102529557\" /></p>\n<h3 id=\"23-openfeign的核心\"><a class=\"anchor\" href=\"#23-openfeign的核心\">#</a> 2.3 OpenFeign 的核心</h3>\n<h4 id=\"231-注解\"><a class=\"anchor\" href=\"#231-注解\">#</a> 2.3.1 注解</h4>\n<p>@EnableFeignClients 修饰类，作用：启用 Openfeign 就会扫描，如果找到带有 @FeignClient 就会自动生成接口的实现类（动态代理）</p>\n<p>@FeignClient 修饰类，作用：设置要请求的服务，和请求的一些设置</p>\n<p>示例：</p>\n<pre><code class=\"language-Java\">@FeignClient(value = &quot;lx-provider&quot;) //通过OpenFeign调用，远程服务，指定服务名\npublic interface WeatherService &#123;\n    /**\n     * 指定要远程调用的 方法\n     * 要求：\n     * 1.返回值 需要和远程服务一样\n     * 2.请求方式 必须一样\n     * 3.请求路径 必须对\n     * 4.请求参数 类型、顺序一致 (request和response 不写)*/\n    @GetMapping(&quot;server/weather/today&quot;)\n    R today();\n&#125;\n</code></pre>\n<h4 id=\"232-参数传递\"><a class=\"anchor\" href=\"#232-参数传递\">#</a> 2.3.2 参数传递</h4>\n<p>OpenFeign 调用参数的时候，需要使用注解进行标记</p>\n<p>根据参数格式不一样，使用的注解也不一样：</p>\n<p>1. 键值对：@RequestParam (&quot;参数名&quot;)</p>\n<p>2.json：@RequestBody</p>\n<p>3. 文件上传：@RequestPart (&quot;参数名&quot;)</p>\n<p>示例：</p>\n<pre><code class=\"language-Java\">@FeignClient(value = &quot;lx-provider&quot;)\npublic interface FoodService &#123;\n    /**\n     * json格式 @RequestBody*/\n    @PostMapping(&quot;server/food/save&quot;)\n    R save(@RequestBody FoodAddDto dto);\n    /**\n     * 键值对格式 @RequestParam(&quot;参数名&quot;)\n     * 接口请求 参数格式：键值对的时候，需要添加注解，指定参数名称 不可省略*/\n    @GetMapping(&quot;server/food/page&quot;)\n    R page(@RequestParam(&quot;page&quot;) int page,@RequestParam(&quot;size&quot;) int size);\n&#125;\n</code></pre>\n<h4 id=\"233-请求消息头传输\"><a class=\"anchor\" href=\"#233-请求消息头传输\">#</a> 2.3.3 请求消息头传输</h4>\n<p>OpenFeign 请求接口的时候，默认不会传输请求消息头，这样就导致我们定义的请求消息头不能被传递到服务提供者。</p>\n<p>为什么不会传输？</p>\n<p>因为 OpenFeign 请求接口的时候，是重新发起的请求，会生成本次请求的 request 和 response，跟原来那么请求对象不是同一个</p>\n<p>怎么解决？</p>\n<p>需要把要传输的请求消息头，添加到 OpenFeign 的请求中</p>\n<p>自定义一个类，设置一下即可</p>\n<p>实现步骤：</p>\n<p>1. 定义类，实现接口</p>\n<pre><code class=\"language-Java\">public class OpenFeignConfig implements RequestInterceptor &#123;\n    @Override\n    public void apply(RequestTemplate template) &#123;\n        //1.获取请求对象\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request=attributes.getRequest();\n\n        //2.把需要传递的请求消息头传输给OpenFeign\n        template.header(&quot;token&quot;,request.getHeader(&quot;token&quot;));\n        //……\n    &#125;\n&#125;\n</code></pre>\n<p>2. 在 OpenFeign 的接口上设置配置类即可</p>\n<p>@FeignClient 的 configuration 设置即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"lx-provider\"</span><span class=\"token punctuation\">,</span>configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">OpenFeignConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 通过 OpenFeign 调用，远程服务，指定服务名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">WeatherService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 指定要远程调用的 方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 要求：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 1. 返回值 需要和远程服务一样</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 2. 请求方式 必须一样</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 3. 请求路径 必须对</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 4. 请求参数 类型、顺序一致 (request 和 response 不写)*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server/weather/today\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">R</span> <span class=\"token function\">today</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"check\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">R</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"234-文件上传\"><a class=\"anchor\" href=\"#234-文件上传\">#</a> 2.3.4 文件上传</h4>\n<p>如果 OpenFeign 调用的接口的参数是：MultipartFile 文件上传的</p>\n<p>那么需要安装下面的步骤进行</p>\n<pre><code class=\"language-Java\">/**\n * 文件上传的参数 需要配置\n * 1.注解 @RequestPart\n * 2.设置 请求属性：consumes = MediaType.MULTIPART_FORM_DATA_VALUE  */\n@PostMapping(value = &quot;server/food/import&quot;,consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\nR importExcel(@RequestPart(&quot;file&quot;) MultipartFile file);\n</code></pre>\n<p>核心：</p>\n<p>1.MultipartFile 参数 使用注解 @RequestPart (&quot;file&quot;)</p>\n<p>2. 设置请求属性：consumes = MediaType.MULTIPART_FORM_DATA_VALUE</p>\n<h3 id=\"24-openfeign的底层原理\"><a class=\"anchor\" href=\"#24-openfeign的底层原理\">#</a> 2.4 OpenFeign 的底层原理</h3>\n<h2 id=\"三-微服务核心案例\"><a class=\"anchor\" href=\"#三-微服务核心案例\">#</a> 三、微服务核心案例</h2>\n<h3 id=\"31-需求\"><a class=\"anchor\" href=\"#31-需求\">#</a> 3.1 需求</h3>\n<p>请实现一个，每日只能预约 10 个，不能超出，每个用户每日只能预约 1 个。</p>\n<p>主要：</p>\n<p>1. 注册</p>\n<p>2. 登录</p>\n<p>3. 预约</p>\n<p>4. 预约列表</p>\n<p>5. 查询剩余预约数量</p>\n<p>6. 查询自己的预约记录</p>\n<p>用户表：id name password ctime</p>\n<p>预约记录表：id uid bdate ctime</p>\n<p>SQL 脚本：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> t_user01</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>              id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>              name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              password <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              ctime <span class=\"token keyword\">datetime</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">2023</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token number\">16</span>:<span class=\"token number\">12</span>:<span class=\"token number\">06</span><span class=\"token punctuation\">]</span> completed <span class=\"token operator\">in</span> <span class=\"token number\">69</span> ms</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>db_j2310<span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> t_user_book</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              id <span class=\"token keyword\">int</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              uid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              bdate <span class=\"token keyword\">date</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              ctime <span class=\"token keyword\">datetime</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>选择微服务架构，为了未来可能的高并发</p>\n<h3 id=\"32-搭架子\"><a class=\"anchor\" href=\"#32-搭架子\">#</a> 3.2 搭架子</h3>\n<p>Maven 多模块进行开发</p>\n<p><img data-src=\"/SpringCloud.assets/image-20231010160932258.png\" alt=\"image-20231010160932258\" /></p>\n<h3 id=\"33-提供者-编码\"><a class=\"anchor\" href=\"#33-提供者-编码\">#</a> 3.3 提供者 - 编码</h3>\n<p>主要实现业务逻辑</p>\n<p>实体层</p>\n<p>持久层</p>\n<p>业务层</p>\n<p>接口层</p>\n<p><img data-src=\"/SpringCloud.assets/image-20231010170103127.png\" alt=\"image-20231010170103127\" /></p>\n<h3 id=\"34-消费者-编码\"><a class=\"anchor\" href=\"#34-消费者-编码\">#</a> 3.4 消费者 - 编码</h3>\n<p>就是实现服务的远程调用，提供对外暴露的接口</p>\n<p><img data-src=\"/SpringCloud.assets/image-20231010170139060.png\" alt=\"image-20231010170139060\" /></p>\n<h3 id=\"35-测试\"><a class=\"anchor\" href=\"#35-测试\">#</a> 3.5 测试</h3>\n<p><img data-src=\"/SpringCloud.assets/image-20231010165521584.png\" alt=\"image-20231010165521584\" /></p>\n<h2 id=\"四-gateway\"><a class=\"anchor\" href=\"#四-gateway\">#</a> 四、Gateway</h2>\n<h3 id=\"41-网关\"><a class=\"anchor\" href=\"#41-网关\">#</a> 4.1 网关</h3>\n<p>网关为微服务架构的系统提供简单、有效且统一的 API 路由管理，作为系统的统一入口，提供内部服务的路由中转，给客户端提供统一的服务，可以实现一些和业务没有耦合的公用逻辑，主要功能包含认证、鉴权、路由转发、安全策略、防刷、流量控制、监控日志等。</p>\n<p><img data-src=\"/SpringCloud.assets/image-20231011110451583.png\" alt=\"image-20231011110451583\" /></p>\n<h3 id=\"42-gateway\"><a class=\"anchor\" href=\"#42-gateway\">#</a> 4.2 Gateway</h3>\n<p>Gateway 就是微服务项目提供一种简单有效的统一的 API 路由管理方式并且可以对请求进行过滤处理。</p>\n<p><strong>优点</strong></p>\n<p>性能强劲，是 Zuul 的 1.6 倍 功能强大，内置了很多实用的功能，例如转发、监控、限流等设计优雅，容易扩展</p>\n<p><strong>缺点</strong></p>\n<p>依赖 Netty 与 WebFlux，不是传统的 Servlet 编程模型，有一定的学习成本不能在 Servlet 容器下工作，也不能构建成 WAR 包，即不能将其部署在 Tomcat、Jetty 等 Servlet 容器里，只能打成 jar 包执行 不支持 Spring Boot 1.x， 需 2.0 及更高的版本</p>\n<p><strong>Getway 核心的作用：</strong></p>\n<p>1. 服务路由匹配</p>\n<p>​\t可以根据请求匹配到对应的服务</p>\n<p>2. 对请求进行过滤处理</p>\n<p>​\t支持全局过滤器</p>\n<h3 id=\"43-gateway核心\"><a class=\"anchor\" href=\"#43-gateway核心\">#</a> 4.3 Gateway 核心</h3>\n<h4 id=\"430-多服务的项目\"><a class=\"anchor\" href=\"#430-多服务的项目\">#</a> 4.3.0 多服务的项目</h4>\n<p>拼多多项目</p>\n<p>根据功能模块，划分为多个服务</p>\n<p>1. 认证服务（注册、登录、密码找回等）</p>\n<p>2. 用户服务（用户个人信息、签到、积分、等级）</p>\n<p>3. 商品服务（商品信息、榜单、列表、详情等等）</p>\n<p>4. 订单服务（下单相关业务）</p>\n<p>核心结构：</p>\n<p><img data-src=\"/SpringCloud.assets/image-20231011104034272.png\" alt=\"image-20231011104034272\" /></p>\n<h4 id=\"431-网关路由匹配\"><a class=\"anchor\" href=\"#431-网关路由匹配\">#</a> 4.3.1 网关路由匹配</h4>\n<p><img data-src=\"/SpringCloud.assets/image-20231011103959117.png\" alt=\"image-20231011103959117\" /></p>\n<p><img data-src=\"/SpringCloud.assets/image-20231011110644249.png\" alt=\"image-20231011110644249\" /></p>\n<p>目前都是使用的 Path 匹配，路径匹配，通过访问路径匹配对应的服务</p>\n<p>路由（Route）是 GateWay 中最基本的组件之一，表示一个具体的路由信息载体，主要由下面几个部分组成：</p>\n<ol>\n<li>id：路由唯一标识，区别于其他的 route</li>\n<li>url： 路由指向的目的地 URL，客户端请求最终被转发到的微服务</li>\n<li>order： 用于多个 Route 之间的排序，数值越小越靠前，匹配优先级越高</li>\n<li>predicate：断言的作用是进行条件判断，只有断言为 true，才执行路由</li>\n<li>filter: 过滤器用于修改请求和响应信息</li>\n</ol>\n<p>实现步骤：</p>\n<p>1. 创建网关项目</p>\n<p><img data-src=\"/SpringCloud.assets/image-20231011113212617.png\" alt=\"image-20231011113212617\" /></p>\n<p>2. 依赖 jar</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-loadbalancer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-gateway<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.qfedu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>common<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>3. 实现配置</p>\n<p>在 application.yml 实现</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> lx<span class=\"token punctuation\">-</span>gateway</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#静态路由</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> auth <span class=\"token comment\">#唯一</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//lx<span class=\"token punctuation\">-</span>authapi  <span class=\"token comment\">#对应要匹配的服务名称，lb 的意思，就是从注册中心获取，后面才可以跟服务的名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">-</span> Path=/auth/<span class=\"token important\">**</span> <span class=\"token comment\">#外界的访问路径</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token key atrule\">filters</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">-</span> StripPrefix=1 <span class=\"token comment\">#过滤器，去除访问的 1 个路径</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> goods <span class=\"token comment\">#唯一</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//lx<span class=\"token punctuation\">-</span>goodsapi  <span class=\"token comment\">#对应要匹配的服务名称，lb 的意思，就是从注册中心获取，后面才可以跟服务的名称</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token punctuation\">-</span> Path=/goods/<span class=\"token important\">**</span> <span class=\"token comment\">#外界的访问路径</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token key atrule\">filters</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">-</span> StripPrefix=1 <span class=\"token comment\">#过滤器，去除访问的 1 个路径</span></pre></td></tr></table></figure><p>4. 运行测试</p>\n<p><img data-src=\"/SpringCloud.assets/image-20231011112847420.png\" alt=\"image-20231011112847420\" /></p>\n<p>核心：</p>\n<p>gateway 实现路由匹配的方式有 2 种：</p>\n<p>第一种：静态路由 可以自己设置信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#静态路由</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> auth <span class=\"token comment\">#唯一</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//lx<span class=\"token punctuation\">-</span>authapi  <span class=\"token comment\">#对应要匹配的服务名称，lb 的意思，就是从注册中心获取，后面才可以跟服务的名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">-</span> Path=/auth/<span class=\"token important\">**</span> <span class=\"token comment\">#外界的访问路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">filters</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">-</span> StripPrefix=1 <span class=\"token comment\">#过滤器，去除访问的 1 个路径</span></pre></td></tr></table></figure><p>第二种：动态路由 可以直接通过服务名访问</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#动态路由，可以通过服务名直接访问</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  \t<span class=\"token key atrule\">locator</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   \t <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><p>访问路径：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2x4LXVzZXJzYXBpL2RvYy5odG1s\">http://localhost:8080/lx-usersapi/doc.html</span></p>\n<p>带上服务名就可以直接请求对应的服务接口</p>\n<h4 id=\"432-gateway请求过滤\"><a class=\"anchor\" href=\"#432-gateway请求过滤\">#</a> 4.3.2 Gateway 请求过滤</h4>\n<p>因为请求先到 Gateway，所以网关提供了对请求进行过滤处理</p>\n<p>Gateway 的过滤分为 2 种：</p>\n<p>第一种：全局过滤器 GlobalFilter</p>\n<p>第二种：局部过滤器</p>\n<p>Bio、Nio、Aio 的区别和联系</p>\n<p>Spring WebFlux - 异步 响应式 底层 Netty --</p>\n<p>Spring WebMVC - 同步</p>\n<pre><code class=\"language-Java\">@Slf4j\n@Component //IOC\npublic class HelloFilter implements GlobalFilter &#123;\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;\n        //获取请求\n        ServerHttpRequest request=exchange.getRequest();\n        ServerHttpResponse response=exchange.getResponse();\n        //获取参数\n        log.info(&quot;获取参数:&#123;&#125;&quot;,request.getQueryParams().get(&quot;name&quot;));\n        log.info(&quot;获取请求消息头：&#123;&#125;&quot;,request.getHeaders().get(&quot;token&quot;));\n        //如果参数name为lx 就拦截\n        List&lt;String&gt; list=request.getQueryParams().get(&quot;name&quot;);\n        if(list!=null &amp;&amp; list.size()&gt;0)&#123;\n            if(list.get(0).equals(&quot;lx&quot;))&#123;\n                //拦截\n                response.getHeaders().add(&quot;Content-Type&quot;,&quot;application/json;charset=UTF-8&quot;);\n                return response.writeWith(\n                        Mono.just(response.bufferFactory().\n                                wrap(JSONUtil.toJsonStr(R.fail()).getBytes())));\n            &#125;\n        &#125;\n        //放行\n        return chain.filter(exchange);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"433-网关配置全局跨域\"><a class=\"anchor\" href=\"#433-网关配置全局跨域\">#</a> 4.3.3 网关配置全局跨域</h4>\n<p>在 application.yml</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> lx<span class=\"token punctuation\">-</span>gateway</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">globalcors</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#配置全局跨域</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">cors-configurations</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token key atrule\">'[/**]'</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 匹配所有请求</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token key atrule\">allowedOrigins</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span> <span class=\"token comment\"># 跨域处理 允许所有的域</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token key atrule\">allowedMethods</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 支持的方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              <span class=\"token punctuation\">-</span> GET</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              <span class=\"token punctuation\">-</span> POST</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              <span class=\"token punctuation\">-</span> PUT</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token punctuation\">-</span> DELETE</pre></td></tr></table></figure><h2 id=\"五-sentinel\"><a class=\"anchor\" href=\"#五-sentinel\">#</a> 五、Sentinel</h2>\n<h3 id=\"51-sentinel\"><a class=\"anchor\" href=\"#51-sentinel\">#</a> 5.1 Sentinel</h3>\n<p>Sentinel 阿里巴巴开源，面向分布式、多语言异构化服务架构的流量治理组件，主要以流量为切入点，从流量控制、流量路由、熔断降级、系统自适应保护等多个维度来帮助用户保障微服务的稳定性。</p>\n<p>提供了流量控制，并且可以完成服务的熔断降级。</p>\n<p>熔断降级：对核心接口，进行设置降级方法，一旦核心接口出现故障，就会自动执行定义的降级方法，避免核心接口长时间阻塞。</p>\n<h3 id=\"52-sentinel作用\"><a class=\"anchor\" href=\"#52-sentinel作用\">#</a> 5.2 Sentinel 作用</h3>\n<p>Sentinel 核心就是为了帮助保障微服务的稳定性</p>\n<p>1. 流量控制：</p>\n<p>防止某一瞬间的并发量过高，从而导致系统的稳定性，所以我们会针对高并发的需求进行流量控制，保证项目的稳定性</p>\n<p>Sentinel 可视化的流量控制</p>\n<p>2. 熔断降级：</p>\n<p>对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用</p>\n<h3 id=\"53-sentinel安装\"><a class=\"anchor\" href=\"#53-sentinel安装\">#</a> 5.3 Sentinel 安装</h3>\n<p>1. 下载 jar</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWwvcmVsZWFzZXM=\">https://github.com/alibaba/Sentinel/releases</span></p>\n<p>2. 启动  java -jar 路径 /sentinel.jar</p>\n<p>&lt;img src=&quot;/Users/ruili/Library/Application Support/typora-user-images/image-20221009102310290.png&quot; alt=&quot;image-20221009102310290&quot; style=&quot;zoom:30%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;/Users/ruili/Library/Application Support/typora-user-images/image-20221009102427087.png&quot; alt=&quot;image-20221009102427087&quot; style=&quot;zoom:20%;&quot; /&gt;</p>\n<p>默认的账号和密码：sentinel/sentinel</p>\n<p>&lt;img src=&quot;/Users/ruili/Library/Application Support/typora-user-images/image-20221009102535830.png&quot; alt=&quot;image-20221009102535830&quot; style=&quot;zoom:20%;&quot; /&gt;</p>\n<h3 id=\"54-sentinel流量控制\"><a class=\"anchor\" href=\"#54-sentinel流量控制\">#</a> 5.4 Sentinel 流量控制</h3>\n<p>1. 依赖 jar</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--        Sentinel 流控和熔断 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-sentinel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!--        jsr303 校验 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-validation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2. 实现配置</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> lx<span class=\"token punctuation\">-</span>consumer</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">sentinel</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#流控和熔断</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">transport</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">dashboard</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8719</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">main</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#允许循环依赖</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">allow-circular-references</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">mvc</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">pathmatch</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">matching-strategy</span><span class=\"token punctuation\">:</span> ant_path_matcher</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8082</span></pre></td></tr></table></figure><p>3. 访问测试</p>\n<p><img data-src=\"/Users/ruili/Documents/%E7%8F%AD%E7%BA%A7%E8%AF%BE%E4%BB%B6/2310/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/SpringCloud.assets/image-20231011162657912.png\" alt=\"image-20231011162657912\" /></p>\n<p>核心：</p>\n<p><img data-src=\"/Users/ruili/Documents/%E7%8F%AD%E7%BA%A7%E8%AF%BE%E4%BB%B6/2310/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/SpringCloud.assets/image-20231011161333817.png\" alt=\"image-20231011161333817\" /></p>\n<p>阈值类型：1.QPS 2. 并发线程数</p>\n<p>服务器类型：1. 单机 2. 集群</p>\n<p>流控模式</p>\n<p>​\t1. 直接 简单好用，不区分调用者，来自任何调用者的请求都将进行限流统计。如果这个资源名的调用总和超过了这条规则定义的阈值，则触发限流。</p>\n<p>​\t2. 关联 一般是多个方法之间竞争，当两个资源之间具有资源争抢或者依赖关系的时候，这两个资源便具有了关联</p>\n<p>​\t3. 链路 嵌套调用，对特定的调用者，只有来自这个调用者的请求才会进行流量控制</p>\n<p>流控效果：</p>\n<p>​\t1. 快速失败 使用最多，该方式是默认的流量控制方式，当 QPS 超过任意规则的阈值后，新的请求就会被立即拒绝</p>\n<pre><code>2.预热 主要用于系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过&quot;冷启动&quot;，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮的情况\n</code></pre>\n<p>​\t3. 排队 严格控制了请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法</p>\n<h3 id=\"55-sentinel熔断降级\"><a class=\"anchor\" href=\"#55-sentinel熔断降级\">#</a> 5.5 Sentinel 熔断降级</h3>\n<p>熔断降级自动进行，满足熔断规则就自动触发熔断</p>\n<p>实现步骤：</p>\n<p>1. 在需要保护的方法上 设置就可以</p>\n<pre><code class=\"language-Java\">@GetMapping(&quot;login&quot;)\n@SentinelResource(fallback = &quot;loginError&quot;)\npublic R login()&#123;\n    if(new Random().nextBoolean())&#123;\n        System.out.println(1/0);\n    &#125;\n    return service.login();\n&#125;\n//降级方法（返回值和参数需要和上面的方法一致），一旦login方法出问题，Sentinel触发熔断，就会降级方法代替原来的方法\npublic R loginError()&#123;\n    System.err.println(&quot;触发熔断降级&quot;);\n    return R.fail();\n&#125;\n</code></pre>\n<p><img data-src=\"/Users/ruili/Documents/%E7%8F%AD%E7%BA%A7%E8%AF%BE%E4%BB%B6/2310/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/SpringCloud.assets/image-20231011164618214.png\" alt=\"image-20231011164618214\" /></p>\n<p>重点：</p>\n<p>1. 熔断策略</p>\n<ul>\n<li>慢调用比例 ( <code>SLOW_REQUEST_RATIO</code> )：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（ <code>statIntervalMs</code> ）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li>\n<li>异常比例 ( <code>ERROR_RATIO</code> )：当单位统计时长（ <code>statIntervalMs</code> ）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是  <code>[0.0, 1.0]</code> ，代表 0% - 100%。</li>\n<li>异常数 ( <code>ERROR_COUNT</code> )：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>\n</ul>\n<h2 id=\"六-sleuthzipkin\"><a class=\"anchor\" href=\"#六-sleuthzipkin\">#</a> 六、Sleuth+Zipkin</h2>\n<p>链路跟踪</p>\n<h2 id=\"七-微服务综合案例\"><a class=\"anchor\" href=\"#七-微服务综合案例\">#</a> 七、微服务综合案例</h2>\n<p>涵盖各个组件</p>\n<p>QPS: 每秒的请求查询数量</p>\n<p>TPS: 每秒的事务处理数量</p>\n<p>RT: 响应时间</p>\n",
            "tags": [
                "Java框架",
                "Spring全家桶",
                "springcloud"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/backend/java/base/first/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "url": "https://sbysg.github.io/2023/10/22/backend/java/base/first/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "title": "hi biya",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<p>hello world<br />\n 花开堪折直须折，莫待无花空折枝<br />\n<span id=\"more\"></span></p>\n<h1 id=\"通过-git-clone-命令将主题下载到-theme-目录\"><a class=\"anchor\" href=\"#通过-git-clone-命令将主题下载到-theme-目录\">#</a> 通过 git clone 命令将主题下载到 theme 目录</h1>\n<p>git clone <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21paWlrdS9oZXhvLXRoZW1lLWZsZXhibG9jay5naXQ=\">https://github.com/miiiku/hexo-theme-flexblock.git</span> ./themes/flexblock</p>\n",
            "tags": [
                "Java后端",
                "Java",
                "Java基础",
                "RabbitMQ",
                "Linux"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/springframe/spring/mybatis/mybatis-plus/3-02Mybatis-plus/",
            "url": "https://sbysg.github.io/2023/10/22/springframe/spring/mybatis/mybatis-plus/3-02Mybatis-plus/",
            "title": "mybatis-plus",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20v\">https://baomidou.com/</span></p>\n<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<h1 id=\"1-快速入门\"><a class=\"anchor\" href=\"#1-快速入门\">#</a> 1 快速入门</h1>\n<h2 id=\"11-新建springboot项目\"><a class=\"anchor\" href=\"#11-新建springboot项目\">#</a> 1.1 新建 springboot 项目</h2>\n<h2 id=\"12-导入jar\"><a class=\"anchor\" href=\"#12-导入jar\">#</a> 1.2 导入 jar</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>完整的 pom</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.7.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.qfedu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springboot03<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>springboot03<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>springboot03<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>excludes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclude</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclude</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>excludes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"13-yml配置\"><a class=\"anchor\" href=\"#13-yml配置\">#</a> 1.3 yml 配置</h2>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3308/plus<span class=\"token punctuation\">?</span>serverTimezone=Asia/Shanghai</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># mybatis plus 的配置和 mybatis 类似，之前在 mybatis 的配置，使用 mybtis-plus 替换</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">configuration</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 控制台打印日志</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">log-impl</span><span class=\"token punctuation\">:</span> org.apache.ibatis.logging.stdout.StdOutImpl</pre></td></tr></table></figure><h2 id=\"14-代码\"><a class=\"anchor\" href=\"#14-代码\">#</a> 1.4 代码</h2>\n<h3 id=\"1实体类\"><a class=\"anchor\" href=\"#1实体类\">#</a> 1）实体类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>entity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2dao层接口\"><a class=\"anchor\" href=\"#2dao层接口\">#</a> 2）Dao 层接口</h3>\n<p>自定义接口需要实现 BaseMapper 接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BaseMapper</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Employee</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EmployeeDao</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：可以进入 BaseMapper 接口，查看方法</p>\n<h3 id=\"3service层接口和实现类\"><a class=\"anchor\" href=\"#3service层接口和实现类\">#</a> 3）Service 层接口和实现类</h3>\n<p>接口继承 IService 接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Employee</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EmployeeService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实现类继承 ServiceImpl，实现相关接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>impl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServiceImpl</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EmployeeDao</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Employee</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EmployeeService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmployeeServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EmployeeDao</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EmployeeService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：可以进入 IService 接口，查看方法</p>\n<h3 id=\"4启动类\"><a class=\"anchor\" href=\"#4启动类\">#</a> 4）启动类</h3>\n<p>扫描 dao 层接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>mybatis<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MapperScan</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.qfedu.springboot03.dao\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Springboot03Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Springboot03Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"5测试类\"><a class=\"anchor\" href=\"#5测试类\">#</a> 5）测试类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EmployeeDao</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Employee</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Springboot03ApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EmployeeDao</span> employeeDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- selectById method test ------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Employee</span> employee <span class=\"token operator\">=</span> employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----- selectAll method test ------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"15-实体类中使用的注解\"><a class=\"anchor\" href=\"#15-实体类中使用的注解\">#</a> 1.5 实体类中使用的注解</h2>\n<p>注意：当表名、字段名和实体类的类名、属性名不一致时，必须使用这些注解</p>\n<table>\n<thead>\n<tr>\n<th>@TableName</th>\n<th>修饰实体类，指定的表实体类对象的表名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@TableId</td>\n<td>修饰属性，指定主键对应的属性 value 主键字段名，可以不写 type 主键类型，IdType.AUTO 自增 IdType.ASSIGN_ID 雪花算法生成的值 IdType.ASSIGN_UUID  uuid</td>\n</tr>\n<tr>\n<td>@TableField</td>\n<td>修饰属性，针对非主键的属性</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>entity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IdType</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableId</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableName</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 指定表名后，就可以确定 sql 语句需要操作的表</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 当实体类与表名不一致时必须指定</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t_dept\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Department</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 指定该属性为主键，当属性名和主键字段名不一致时，必须指定</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 主键为自增类型（与数据库保持一致）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"did\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">AUTO</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 雪花算法生成的 id</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// @TableId(type = IdType.ASSIGN_ID)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// @TableId(type = IdType.ASSIGN_UUID)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> did<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> dname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectDepartment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Department</span><span class=\"token punctuation\">></span></span> departments <span class=\"token operator\">=</span> departmentDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>departments<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 如果表中的主键的字段名不是 id, 需要设置 @TableId (value = \"did\", type = IdType.AUTO)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Department</span> department <span class=\"token operator\">=</span> departmentDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>department<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testInserDept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Department</span> department <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Department</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    department<span class=\"token punctuation\">.</span><span class=\"token function\">setDname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hahahah\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> insert <span class=\"token operator\">=</span> departmentDao<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>department<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 插入后，会自动返回自增的 id</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>department<span class=\"token punctuation\">.</span><span class=\"token function\">getDid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>insert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"2-条件构造器wrapper\"><a class=\"anchor\" href=\"#2-条件构造器wrapper\">#</a> 2 条件构造器 Wrapper</h1>\n<h2 id=\"21-类关系\"><a class=\"anchor\" href=\"#21-类关系\">#</a> 2.1 类关系</h2>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Wrapper  条件构造抽象类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t-- AbstractWrapper 查询条件封装，用于生成 sql 中的 where 语句。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t-- QueryWrapper Entity对象封装操作类，可用于查询字段。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t-- UpdateWrapper Update条件封装操作类，用于更新。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t-- AbstractLambdaWrapper 使用 Lambda 表达式封装 wrapper</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t-- LambdaQueryWrapper 使用 Lambda 语法封装条件，用于查询。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t-- LambdaUpdateWrapper 使用 Lambda 语法封装条件，用于更新。</pre></td></tr></table></figure><p>注意：</p>\n<p>条件构造器用于构建 sql 语句的 where 条件，增删改查都可以使用；</p>\n<p>EntityWrapper，在 3.0 版本以上就不再使用，改为了 QueryWrapper。</p>\n<h2 id=\"22-主要方法\"><a class=\"anchor\" href=\"#22-主要方法\">#</a> 2.2 主要方法</h2>\n<table>\n<thead>\n<tr>\n<th>eq(R column, Object val)</th>\n<th>=</th>\n<th>eq (&quot;name&quot;, &quot;老王&quot;) ---&gt; name = ' 老王'</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ne(R column, Object val);</td>\n<td>&lt;&gt;</td>\n<td>ne (&quot;name&quot;, &quot;老王&quot;) ---&gt; name &lt;&gt; ' 老王'</td>\n</tr>\n<tr>\n<td>gt(R column, Object val);</td>\n<td>&gt;</td>\n<td>gt (&quot;name&quot;, &quot;老王&quot;) ---&gt; name &gt; ' 老王'</td>\n</tr>\n<tr>\n<td>ge(R column, Object val);</td>\n<td>&gt;=</td>\n<td>ge (&quot;name&quot;, &quot;老王&quot;) ---&gt; name &gt;= ' 老王'</td>\n</tr>\n<tr>\n<td>lt(R column, Object val);</td>\n<td>&lt;</td>\n<td>lt (&quot;name&quot;, &quot;老王&quot;) ---&gt; name &lt; ' 老王'</td>\n</tr>\n<tr>\n<td>le(R column, Object val);</td>\n<td>&lt;=</td>\n<td>le (&quot;name&quot;, &quot;老王&quot;) ---&gt; name &lt;= ' 老王'</td>\n</tr>\n<tr>\n<td>between(R column, Object val1, Object val2)</td>\n<td>between a and b</td>\n<td>between(&quot;age&quot;, 18, 30) ---&gt; age between 18 and 30</td>\n</tr>\n<tr>\n<td>notBetween(R column, Object val1, Object val2);</td>\n<td>not between a and b</td>\n<td>notBetween(&quot;age&quot;, 18, 30) ---&gt; age not between 18 and 30</td>\n</tr>\n<tr>\n<td>in(R column, Object... values);</td>\n<td>IN (v0, v1, ...)</td>\n<td>in(&quot;age&quot;,{1,2,3}) ---&gt; age in (1,2,3)</td>\n</tr>\n<tr>\n<td>notIn(R column, Object... values);</td>\n<td>NOT IN (v0, v1, ...)</td>\n<td>notIn(&quot;age&quot;,{1,2,3}) ---&gt; age not in (1,2,3)</td>\n</tr>\n<tr>\n<td>inSql(R column, Object... values);</td>\n<td>IN (sql 语句)</td>\n<td>inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;) ---&gt; id in (select id from table where id &lt; 3)</td>\n</tr>\n<tr>\n<td>notInSql(R column, Object... values);</td>\n<td>NOT IN (sql 语句)</td>\n<td></td>\n</tr>\n<tr>\n<td>like(R column, Object val);</td>\n<td>LIKE '% 值 %'</td>\n<td>like (&quot;name&quot;, &quot;王&quot;) ---&gt; name like '% 王 %'</td>\n</tr>\n<tr>\n<td>notLike(R column, Object val)</td>\n<td>NOT LIKE '% 值 %'</td>\n<td>notLike (&quot;name&quot;, &quot;王&quot;) ---&gt; name not like '% 王 %'</td>\n</tr>\n<tr>\n<td>likeLeft(R column, Object val)</td>\n<td>LIKE '% 值'</td>\n<td>likeLeft (&quot;name&quot;, &quot;王&quot;) ---&gt; name like '% 王'</td>\n</tr>\n<tr>\n<td>likeRight(R column, Object val)</td>\n<td>LIKE ' 值 %'</td>\n<td>likeRight (&quot;name&quot;, &quot;王&quot;) ---&gt; name like ' 王 %'</td>\n</tr>\n<tr>\n<td>isNull(R column)</td>\n<td>IS NULL</td>\n<td>isNull(&quot;name&quot;) ---&gt; name is null</td>\n</tr>\n<tr>\n<td>isNotNull(R column);</td>\n<td>IS NOT NULL</td>\n<td>isNotNull(&quot;name&quot;) ---&gt; name is not null</td>\n</tr>\n<tr>\n<td>groupBy(R... columns)</td>\n<td>GROUP BY</td>\n<td>groupBy(&quot;id&quot;, &quot;name&quot;) ---&gt; group by id,name</td>\n</tr>\n<tr>\n<td>having(String sqlHaving, Object... params)</td>\n<td>HAVING (sql 语句)</td>\n<td>having(&quot;sum(age) &gt; {0}&quot;, 11) ---&gt; having sum(age) &gt; 11</td>\n</tr>\n<tr>\n<td>orderByAsc(R... columns)</td>\n<td>ORDER BY 字段，... ASC</td>\n<td>orderByAsc(&quot;id&quot;, &quot;name&quot;) ---&gt; order by id ASC,name ASC</td>\n</tr>\n<tr>\n<td>orderByDesc(R... columns);</td>\n<td>ORDER BY 字段，... DESC</td>\n<td>orderByDesc(&quot;id&quot;, &quot;name&quot;) ---&gt; order by id DESC,name DESC</td>\n</tr>\n<tr>\n<td>or();</td>\n<td>a or b</td>\n<td>eq (&quot;id&quot;,1).or ().eq (&quot;name&quot;,&quot;老王&quot;) ---&gt; id = 1 or name = ' 老王'</td>\n</tr>\n<tr>\n<td>or(Consumer&lt;Param&gt; consumer)</td>\n<td>or 嵌套</td>\n<td>or (i -&gt; i.eq (&quot;name&quot;, &quot;李白&quot;).ne (&quot;status&quot;, &quot;活着&quot;)) ---&gt; or (name = ' 李白 ' and status &lt;&gt; ' 活着 ')</td>\n</tr>\n<tr>\n<td>and(Consumer&lt;Param&gt; consumer)</td>\n<td>and 嵌套</td>\n<td>and (i -&gt; i.eq (&quot;name&quot;, &quot;李白&quot;).ne (&quot;status&quot;, &quot;活着&quot;)) ---&gt; and (name = ' 李白 ' and status &lt;&gt; ' 活着 ')</td>\n</tr>\n<tr>\n<td>nested(Consumer&lt;Param&gt; consumer);</td>\n<td>普通嵌套</td>\n<td>nested (i -&gt; i.eq (&quot;name&quot;, &quot;李白&quot;).ne (&quot;status&quot;, &quot;活着&quot;)) ---&gt; (name = ' 李白 ' and status &lt;&gt; ' 活着 ')</td>\n</tr>\n<tr>\n<td>apply(String applySql, Object... params);</td>\n<td>拼接 sql</td>\n<td>apply(&quot;date_format(dateColumn,'%Y-%m-%d') = {0}&quot;, &quot;2008-08-08&quot;) ---&gt; date_format(dateColumn,'%Y-%m-%d') = '2008-08-08'&quot;)</td>\n</tr>\n<tr>\n<td>last(String lastSql)</td>\n<td>无视优化规则直接拼接到 sql 的最后</td>\n<td></td>\n</tr>\n<tr>\n<td>exists(String existsSql)</td>\n<td>拼接 exists 语句</td>\n<td>exists(&quot;select id from table where age = 1&quot;) ---&gt; exists (select id from table where age = 1)</td>\n</tr>\n<tr>\n<td>QueryWrapper</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>select(String... sqlSelect)</td>\n<td>用于指定查询需要返回的字段</td>\n<td>select(&quot;id&quot;, &quot;name&quot;, &quot;age&quot;) ---&gt; select id, name, age</td>\n</tr>\n<tr>\n<td>select(Predicate&lt;TableFieldInfo&gt; predicate);</td>\n<td>通过 Lambda 表达式，过滤需要的字段</td>\n<td></td>\n</tr>\n<tr>\n<td>lambda();</td>\n<td>返回一个 LambdaQueryWrapper 对象</td>\n<td></td>\n</tr>\n<tr>\n<td>UpdateWrapper</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>set(String column, Object val);</td>\n<td>set 字段值</td>\n<td>set(&quot;name&quot;, null) ---&gt; set name = null</td>\n</tr>\n<tr>\n<td>setSql(String sql);</td>\n<td></td>\n<td>setSql (&quot;name = ' 老李头 '&quot;) ---&gt; set name = ' 老李头'</td>\n</tr>\n<tr>\n<td>lambda();</td>\n<td>返回一个 LambdaUpdateWrapper 对象</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"23-测试代码\"><a class=\"anchor\" href=\"#23-测试代码\">#</a> 2.3 测试代码</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testQueryWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 转换的 sql:SELECT id,name FROM employee WHERE (name IS NOT NULL)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testQueryWrapper2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">isNotNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// SELECT id,name,age,sex,phone FROM employee WHERE (name IS NOT NULL)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 删除中使用 Wrapper</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testQueryWrapper3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// DELETE FROM employee WHERE (age = ? AND name LIKE ?)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdateWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token class-name\">Employee</span> employee <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    employee<span class=\"token punctuation\">.</span><span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// UPDATE employee SET sex=? WHERE (age = ?)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">,</span> wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdateWrapper2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// UPDATE employee SET sex=? WHERE (age = ?)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUpdateWrapper3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token class-name\">LambdaUpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaUpdateWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 可以使用 lambda 表达式指定字段</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token operator\">::</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// UPDATE employee SET sex=? WHERE (age = ?)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"3-插件\"><a class=\"anchor\" href=\"#3-插件\">#</a> 3 插件</h1>\n<h2 id=\"31-分页插件\"><a class=\"anchor\" href=\"#31-分页插件\">#</a> 3.1 分页插件</h2>\n<h3 id=\"配置类\"><a class=\"anchor\" href=\"#配置类\">#</a> 配置类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DbType</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MybatisPlusInterceptor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>extension<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span>inner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PaginationInnerInterceptor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisPlusConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 从 MyBatis-Plus 3.4.0 开始，不再使用旧版本的 PaginationInterceptor ，而是使用 MybatisPlusInterceptor</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">mybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">MybatisPlusInterceptor</span> interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 向 MyBatis-Plus 的过滤器链中添加分页拦截器，需要设置数据库类型（主要用于分页方言）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MYSQL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> interceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置分页对象，第一个参数：页码，第二个参数：每页的记录数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// page.setCurrent(1);</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// page.setSize(10);</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> page1 <span class=\"token operator\">=</span> employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectPage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page1<span class=\"token punctuation\">.</span><span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>page1<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"32-乐观锁插件\"><a class=\"anchor\" href=\"#32-乐观锁插件\">#</a> 3.2 乐观锁插件</h2>\n<h3 id=\"数据库表\"><a class=\"anchor\" href=\"#数据库表\">#</a> 数据库表</h3>\n<p>增加表示版本号的字段</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/26375065/1667821638970-a26de2c4-dc2b-4f25-aff2-a898698a4358.png\" alt=\"img\" /></p>\n<h3 id=\"实体类\"><a class=\"anchor\" href=\"#实体类\">#</a> 实体类</h3>\n<p>使用 @Version 修饰表示版本号的属性</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>springboot03<span class=\"token punctuation\">.</span>entity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Version</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Version</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> version<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">mybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">MybatisPlusInterceptor</span> interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 向 MyBatis-Plus 的过滤器链中添加分页拦截器，需要设置数据库类型（主要用于分页方言）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MYSQL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 乐观锁插件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimisticLockerInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> interceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试-2\"><a class=\"anchor\" href=\"#测试-2\">#</a> 测试</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Employee</span> emp <span class=\"token operator\">=</span> employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> version <span class=\"token operator\">=</span> emp<span class=\"token punctuation\">.</span><span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        emp<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        employeeDao<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">--</span> 注意看verson的值</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">></span>  <span class=\"token class-name\">Preparing</span><span class=\"token operator\">:</span> <span class=\"token constant\">UPDATE</span> employee <span class=\"token class-name\">SET</span> name<span class=\"token operator\">=</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> sex<span class=\"token operator\">=</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> phone<span class=\"token operator\">=</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> version<span class=\"token operator\">=</span><span class=\"token operator\">?</span> <span class=\"token class-name\">WHERE</span> id<span class=\"token operator\">=</span><span class=\"token operator\">?</span> <span class=\"token class-name\">AND</span> version<span class=\"token operator\">=</span><span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">></span> <span class=\"token class-name\">Parameters</span><span class=\"token operator\">:</span> <span class=\"token function\">haha</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">12</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 男<span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">13213</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;=</span><span class=\"token operator\">=</span>    <span class=\"token class-name\">Updates</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><h1 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录</h1>\n<h2 id=\"mysql-悲观锁与乐观锁\"><a class=\"anchor\" href=\"#mysql-悲观锁与乐观锁\">#</a> mysql 悲观锁与乐观锁</h2>\n<h3 id=\"悲观锁\"><a class=\"anchor\" href=\"#悲观锁\">#</a> 悲观锁</h3>\n<p>对于数据的处理持悲观态度，总认为获取和修改数据时，别人会修改数据。在整个数据处理过程中，需要将数据加锁。悲观锁的实现，通常依靠数据库提供的排他锁机制实现，比如 select .... for update</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/26375065/1667912846580-0406cfdc-5889-4e90-ab7f-4444bd383c1e.png\" alt=\"img\" /></p>\n<p>一个客户端启动事务，执行 for update，此时还没有进行其他操作，事务没有结束</p>\n<p>另一个客户端针对相同记录进行更新，无法执行，超时报错</p>\n<h3 id=\"乐观锁\"><a class=\"anchor\" href=\"#乐观锁\">#</a> 乐观锁</h3>\n<p>对数据的处理持乐观态度，认为数据一般情况下不会发生冲突，只有数据更新时，才会对数据是否冲突进行检测。如果发现冲突，则返回错误信息给用户，让用户决定如何操作。乐观锁的实现不依靠数据库提供的锁机制，一般是通过版本号，或者时间戳实现乐观锁机制。</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/26375065/1668159807517-d90fd23b-a842-4c30-89e1-5ac2dc5eb78c.png\" alt=\"img\" /></p>\n",
            "tags": [
                "Java框架",
                "Spring全家桶",
                "Mybatis",
                "mybatis-plus"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/backend/java/base/hello/hello-world/",
            "url": "https://sbysg.github.io/2023/10/22/backend/java/base/hello/hello-world/",
            "title": "Hello World",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "Java后端",
                "Java",
                "Java基础",
                "Java"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/springframe/spring/mybatis/mybatis/MyBatis/",
            "url": "https://sbysg.github.io/2023/10/22/springframe/spring/mybatis/mybatis/MyBatis/",
            "title": "mybatis",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<p>[toc]</p>\n<h2 id=\"mybatis\"><a class=\"anchor\" href=\"#mybatis\">#</a> MyBatis</h2>\n<h4 id=\"1-框架和-orm\"><a class=\"anchor\" href=\"#1-框架和-orm\">#</a> 1. 框架和 ORM</h4>\n<pre><code>框架:\n\t项目，软件，应用的半成品，方便开发的执行，提高开发效率，同时框架解决了【普适性问题】\n\nORM:\n\t对象关系映射(Object Relational Mapping)，仅考虑数据库情况，Java 中的一个对象对应数据库中的数据信息。\n\nORM框架解决数据库问题，目前比较流行的就是 ===&gt; MyBatis\n\t之前按照原生 JDBC 方式完成的 BaseDao 和 JdbcUtils 工具类封装确实解决了 ORM 操作繁琐问题，但是还是缺少一些内容，例如\n\t1. 事务操作\n\t2. 缓存机制\n\t3. 数据库映射关系对照问题，字段名处理，数据类型处理\n</code></pre>\n<h4 id=\"2-mybatis-概述\"><a class=\"anchor\" href=\"#2-mybatis-概述\">#</a> 2. MyBatis 概述</h4>\n<ul>\n<li>MyBatis 本是 Apache 软件基金会的一个开源项目 iBatis, 2010 年这个项目由 apache software foundation 迁移到了 Google Code，并且改名为 MyBatis 。2013 年 11 月迁移到 GitHub。</li>\n<li>MyBatis 是一个<a href=\"\">优秀的基于 Java 的持久层框架</a>，支持自定义 SQL，存储过程和高级映射。</li>\n<li>MyBatis <a href=\"\">对原有 JDBC 操作进行了封装</a>，几乎消除了所有 JDBC 代码，使开发者只需关注 SQL 本身。</li>\n<li>MyBatis 可以使用简单的 XML 或 Annotation 来配置执行 SQL，并<a href=\"\">自动完成 ORM 操作</a>，将执行结果返回。</li>\n<li>后期学习 MyBatis-Plus</li>\n</ul>\n<h4 id=\"3-java-maven-项目引入-mybatis-和-配置重点\"><a class=\"anchor\" href=\"#3-java-maven-项目引入-mybatis-和-配置重点\">#</a> 3. Java Maven 项目引入 MyBatis 和 配置【重点】</h4>\n<h5 id=\"31-导入-mybatis-核心-pom-文件依赖\"><a class=\"anchor\" href=\"#31-导入-mybatis-核心-pom-文件依赖\">#</a> 3.1 导入 MyBatis 核心 POM 文件依赖</h5>\n<blockquote>\n<p>核心依赖</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Java 链接数据库必要的 MySQL 驱动 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.1.47<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 MyBatis 依赖 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"32-创建-mybatis-xml-文件配置\"><a class=\"anchor\" href=\"#32-创建-mybatis-xml-文件配置\">#</a> 3.2 创建 MyBatis XML 文件配置</h5>\n<blockquote>\n<p>后续可以设置 IDEA MyBatis 配置文件模版，方便操作。</p>\n<p>配置文件名称 mybatis-config.xml 存储路径是 src/main/resources/ Maven 项目资源文件 / 配置文件路径</p>\n</blockquote>\n<blockquote>\n<p>利用 jdbc.properties 文件配置数据库连接的必要资源</p>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># jdbc.properties</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">jdbc.driver</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">jdbc.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://localhost:3306/java2308?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">jdbc.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">jdbc.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123456</span></pre></td></tr></table></figure><blockquote>\n<p>mybatis-config.xml 基本内容</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">configuration</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">&lt;!-- MyBatis 配置文件 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    在 environments 标签之前，利用 properties 标签引入 jdbc.properties 文件。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    MyBatis 加载对应配置文件是，会自动加 jdbc.properties 解析获取。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    JDBC 环境配置和默认环境选择</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    environments 标签中可以配置多个 JDBC 环境，default 是告知 MyBatis 默认</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    数据库连接环境是哪一个，需要对应 environment 标签的 id 属性</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MySqlDB<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MySqlDB<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            transactionManager 事务管理器，当前情况下按照 JDBC 模式管理数据库事务</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            dataSource 数据源。数据库连接池，后续引入 Druid 数据库连接池</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            默认按照默认的数据库连接池管理处理</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            配置数据库连接的相关资源，期望引入 jdbc.properties 文件</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            --></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                数据库连接对应的相关资源，通过 $&#123;properties 文件属性名称引入对应的数据&#125;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                --></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"4-mybatis-开发流程重点\"><a class=\"anchor\" href=\"#4-mybatis-开发流程重点\">#</a> 4. MyBatis 开发流程【重点】</h4>\n<h5 id=\"41-创建数据表\"><a class=\"anchor\" href=\"#41-创建数据表\">#</a> 4.1 创建数据表</h5>\n<pre><code class=\"language-mysql\">CREATE TABLE `tb_user`\n(\n    `id`         int(11)       NOT NULL AUTO_INCREMENT COMMENT '用户 ID',\n    `username`   varchar(32)   NOT NULL COMMENT '用户名',\n    `gender`     tinyint(1)    NOT NULL COMMENT '性别',\n    `password`   varchar(32)   NOT NULL COMMENT '密码',\n    `phone`      varchar(32)   NOT NULL COMMENT '手机号',\n    `money`      double(10, 2) NOT NULL COMMENT '余额',\n    `createTime` datetime      NOT NULL COMMENT '注册 时间',\n    PRIMARY KEY (`id`)\n) ENGINE = InnoDB\n  AUTO_INCREMENT = 1\n  DEFAULT CHARSET = utf8;\n</code></pre>\n<h5 id=\"42-根据数据表创建对应的实体类\"><a class=\"anchor\" href=\"#42-根据数据表创建对应的实体类\">#</a> 4.2 根据数据表创建对应的实体类</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_mybatis<span class=\"token punctuation\">.</span>entity</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author Anonymous 2023/7/3 10:44</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Boolean</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Double</span> money<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"43-完成-userdao-接口\"><a class=\"anchor\" href=\"#43-完成-userdao-接口\">#</a> 4.3 完成 UserDao 接口</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_mybatis<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_mybatis<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/7/3 10:45</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 根据 用户 ID 查询对应的 User 对象</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param id 用户 id</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @return User 对象</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">User</span> <span class=\"token function\">selectUserById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"44-重点编写-mapperxml-文件\"><a class=\"anchor\" href=\"#44-重点编写-mapperxml-文件\">#</a> 4.4 【重点】编写 Mapper.xml 文件</h5>\n<blockquote>\n<p>存储位置是 /src/main/resources  资源目录下，对应 UserDao 接口的 Mapper.xml 文件。可以直接认为 Mapper 文件是 Dao 层接口的实现类内容，MyBatis 会根据 UserDao 接口和对应的 Mapper.xml 完成 JDBC 操作</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>namespace 命名空间，绑定当前 Mapper 文件对应的 Dao 层接口是哪一个。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>UserDaoMapper.xml &lt;==> UserDao.java</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>提供对应 Dao 接口的完整的包名。类名</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>墙裂推荐安装 IDEA 查询 MyBatisX</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.qfedu.a_mybatis.dao.UserDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    UserDaoMapper.xml 和 UserDao.java 已绑定！</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    需要完成 selectUserById 方法执行目标内容。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    MyBatis 操作流程</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        1. 明确当前操作为 搜索操作，对应的标签为 &lt;select>&lt;/select></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        2. id 属性对应目标方法名称，表示当前 select 标签绑定对应的方法内容，也是方法</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        执行的目标 SQL 语句内容</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        3. resultType => 结果类型，当前查询结果对应的 Java 数据类型，MyBatis 会自动</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        根据字段名称和 JavaBean 成员变量名称完成映射关系。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        4. 根据当前方法的参数情况，在 SQL 语句中提醒，需要使用参数占位符</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.qfedu.a_mybatis.entity.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        需要给予当前 SQL 语句参数，SQL 语句参数使用 #&#123;arg0&#125;  #&#123;arg1&#125;  #&#123;arg2&#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        MyBatis 会根据方法的参数情况，自动将参数给予当前 SQL 语句</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        --></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        select * from tb_user where id = #&#123;arg0&#125;;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"45-mybatis-配置文件注册-mapperxml-文件\"><a class=\"anchor\" href=\"#45-mybatis-配置文件注册-mapperxml-文件\">#</a> 4.5 MyBatis 配置文件注册 Mapper.xml 文件</h5>\n<blockquote>\n<p>在 MyBatis-config.xml 文件中使用 Mappers 标签注册对应的 Mapper.xml 文件</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MyBatis 注册 Mapper.xml 文件。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 对应 Mapper 文件名称 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserDaoMapper.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"46-测试重点\"><a class=\"anchor\" href=\"#46-测试重点\">#</a> 4.6 测试【重点】</h5>\n<blockquote>\n<p>引入 JUnit 测试工具</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- lombok 小辣椒 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- JUnit 测试工具 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.13.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    scope test 表示当前 junit 有且只能用于</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     src/test/java</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>MyBatisTest.java 测试程序，所在包 src/test/java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_mybatis</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_mybatis<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_mybatis<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resources</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSession</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SqlSessionFactoryBuilder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * src/test/java</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * Resources:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> *      org.apache.ibatis.io.Resources MyBatis 自动数据类型，可以通过 IO 流方式获取对应配置文件</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> *      输入流对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * SqlSessionFactory:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> *      SqlSession 工厂，核心类，管理数据库连接对象工厂</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * SqlSession:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> *      可以等价认为是 JDBC Connection 数据库连接对象，可以用处理 SQL 语句</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * @author Anonymous 2023/7/3 11:11</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatisTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMyBatisSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 1. 获取 MyBatis 配置文件输入流对象</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> resourceAsStream <span class=\"token operator\">=</span> <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 2. 利用 MyBatis 配置文件输入流对象，创建 SqlSessionFactory 工厂</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">SqlSessionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>resourceAsStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 3. 通过 SqlSessionFactory 工厂 。获取 SqlSession</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        4. 【核心内容】</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            MyBatis 根据 UserDao 接口和 UserDaoMapper.xml 文件创建对应的</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            UserDao 接口实现类对象。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            getMapper 方法所需参数是 目标接口的 Class 对象，获取对应</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            UserDao 实现类对象，使用 UserDao 接口引用变量指向当前实现类对象、</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">UserDao</span> userDao <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        5. 通过 UserDao 实现类对象，调用目标方法，获取 User 对象</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">selectUserById</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"5-mybatis-简单优化小细节\"><a class=\"anchor\" href=\"#5-mybatis-简单优化小细节\">#</a> 5. MyBatis 简单优化小细节</h4>\n<h5 id=\"51-mapperxml-文件存储路径修改\"><a class=\"anchor\" href=\"#51-mapperxml-文件存储路径修改\">#</a> 5.1 Mapper.xml 文件存储路径修改</h5>\n<blockquote>\n<p>移动 UserDaoMapper 到 UserDao 所在包下，导致错误</p>\n</blockquote>\n<p><img data-src=\"img/01-UserDaoMapper%E8%B7%AF%E5%BE%84%E4%BF%AE%E6%94%B9%E9%94%99%E8%AF%AF.png\" alt=\"\" /></p>\n<blockquote>\n<p>告知整个 Java 项目，当前配置文件路径 / 资源文件路径还有那些，有那些文件是资源配置文件。需要修改 pom 文件，修改 resource 资源文件相关配置</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>POM 文件 build 标签，限制当前项目的编译规则</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    resources 配置当前项目的新资源</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        具体资源内容，需要告知目标路径和对应的包含文件内容</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            资源文件路径</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              src/main/java 项目中整个 Java 代码根路径</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>directory</span><span class=\"token punctuation\">></span></span>src/main/java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>directory</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            包含规则</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            --></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>includes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 1. 当前目录下的所有 .xml 文件 --></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span><span class=\"token punctuation\">></span></span>*.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>include</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">&lt;!-- 2. 忽略层级关系所有的 .xml 文件 --></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span><span class=\"token punctuation\">></span></span>**/*.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>include</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>includes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filtering</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filtering</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>修改 MyBatis-config.xml 注册 Mapper 规则</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MyBatis 注册 Mapper.xml 文件。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 对应 Mapper 文件名称 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- &lt;mapper resource=\"UserDaoMapper.xml\"/> --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com/qfedu/a_mybatis/dao/mapper/UserDaoMapper.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"52-类型别名简化书写\"><a class=\"anchor\" href=\"#52-类型别名简化书写\">#</a> 5.2 类型别名简化书写</h5>\n<blockquote>\n<p>没有给予简化名称的情况下， UserDaoMapper.xml 文件对应的类型名称</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.qfedu.a_mybatis.entity.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>给予当前 User 类型简化名称，一般都是对应的类名</p>\n<p>在 MyBatis-config.xml 文件中添加 typeAliases 简化名称配置，要求在 properties 标签之后</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    方式一：指定数据类型 (完整的包名。类名)，指定简化名称</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    适合于指定一个类型。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">&lt;!-- &lt;typeAlias type=\"com.qfedu.a_mybatis.entity.User\" alias=\"User\"/>--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    包扫描整个包内的所有类，对应的简化名称都是【类名】</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    MyBatis 会根据当前 name 对应的包名，扫描整个的 entity 包</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    每一个类都应类名作为简化名称。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.qfedu.a_mybatis.entity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>简化名称之后 UserDaoMapper.xml 的效果</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"53-log4j-配置和数据库操作日志\"><a class=\"anchor\" href=\"#53-log4j-配置和数据库操作日志\">#</a> 5.3 log4j 配置和数据库操作日志</h5>\n<blockquote>\n<p>导入 Log4j 依赖，配置 pom.xml 文件</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--  导入 Log4j 依赖 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>配置 log4j.properties 文件，需要存储在 src/main/resource 文件中</p>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Global logging configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">log4j.rootLogger</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG, stdout</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># MyBatis logging configuration...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.org.mybatis.example.BlogMapper</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">TRACE</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Console output...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.stdout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.log4j.ConsoleAppender</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.stdout.layout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.stdout.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">%5p [%t] - %m%n</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">级别</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ALL LEVEL</td>\n<td style=\"text-align:left\">打开所有日志记录开关；是最低等级的，用于打开所有日志记录。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DEBUG</td>\n<td style=\"text-align:left\">输出调试信息；指出细粒度信息事件对调试应用程序是非常有帮助的。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">INFO</td>\n<td style=\"text-align:left\">输出提示信息；消息在粗粒度级别上突出强调应用程序的运行过程。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WARN</td>\n<td style=\"text-align:left\">输出警告信息；表明会出现潜在错误的情形。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ERROR</td>\n<td style=\"text-align:left\">输出错误信息；指出虽然发生错误事件，但仍然不影响系统的继续运行。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FATAL</td>\n<td style=\"text-align:left\">输出致命错误；指出每个严重的错误事件将会导致应用程序的退出。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OFF LEVEL</td>\n<td style=\"text-align:left\">关闭所有日志记录开关；是最高等级的，用于关闭所有日志记录。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6-mybatis的-crud-操作重点\"><a class=\"anchor\" href=\"#6-mybatis的-crud-操作重点\">#</a> 6. MyBatis 的 CRUD 操作【重点】</h4>\n<h5 id=\"61-查询操作\"><a class=\"anchor\" href=\"#61-查询操作\">#</a> 6.1 查询操作</h5>\n<h6 id=\"611-序号参数绑定\"><a class=\"anchor\" href=\"#611-序号参数绑定\">#</a> 6.1.1 序号参数绑定</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 根据用户 ID 和姓名，找到对应的 User 对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param id   用户 iD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param name 用户姓名</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">User</span> <span class=\"token function\">selectUser</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    按照方法参数顺序，MyBatis 会将参数给予当前 SQL 语句</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    #&#123;arg0&#125;#&#123;arg1&#125;;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    select * from tb_user where id = #&#123;arg0&#125; and username = #&#123;arg1&#125;;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h6 id=\"612-注解参数绑定重点-推荐\"><a class=\"anchor\" href=\"#612-注解参数绑定重点-推荐\">#</a> 6.1.2 注解参数绑定【重点 推荐】</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>@Param (\"id\") int id, @Param (\"username\") String name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>@Param (\"id\") 表示之后方法参数 int id 对应 SQL 语句参数名称 id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>@Param (\"username\") 表示之后方法参数 String name 对应 SQL 语句参数名称 username</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 根据用户 ID 和姓名，找到对应的 User 对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @param id   用户 ID</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @param name 用户姓名</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">User</span> <span class=\"token function\">selectUserByIdAndName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserByIdAndName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    在方法中声明的 @Param 对应的参数名称，在 SQL 语句中可以直接使用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     MyBatis 会根据注解声明的名称，对 SQL 语句参数进行赋值操作</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    select * from tb_user where id = #&#123;id&#125; and username = #&#123;username&#125;;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h6 id=\"613-map-参数绑定\"><a class=\"anchor\" href=\"#613-map-参数绑定\">#</a> 6.1.3 Map 参数绑定</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 根据用户提供的 Map 双边队列键值对信息，作为查询语句参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * Map&lt;String, Object> = &#123;\"id\"= 1&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param map 用户提供的参数 Map</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @return User 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">User</span> <span class=\"token function\">selectUserByMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserByMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 从 Map 双边队列中，根据 Key=id 找到对应的 value 作为 SQL 语句参数 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    select * from tb_user where id = #&#123;id&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h6 id=\"614-javabean-对象参数绑定\"><a class=\"anchor\" href=\"#614-javabean-对象参数绑定\">#</a> 6.1.4 JavaBean 对象参数绑定</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  * 根据用户提供的 User 对象信息，查询对应的 User 对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  * User (id=1, username=null, ....)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  * @param user User 对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  * @return User 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token class-name\">User</span> <span class=\"token function\">selectUserByJavaBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserByJavaBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 根据 JavaBean 对象 User 中的成员变量 id 获取对应的 数据，作为 SQL 语句参数 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    select * from tb_user where id = #&#123;id&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h6 id=\"615-模糊查询\"><a class=\"anchor\" href=\"#615-模糊查询\">#</a> 6.1.5 模糊查询</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 模糊查询，根据指定的名称，模糊查询对应的数据内容，返回值是 List 集合中</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 对应 JavaBean 规范 User 对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param name 指定的用户名</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @return List 集合存储 User 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectUserByName</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectUserByName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    concat('%', #&#123;username&#125;, '%');</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    '%' + 'Java' + '%' ==> '%Java%'</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    select * from tb_user where username like concat('%', #&#123;username&#125;, '%');</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"62-更新操作\"><a class=\"anchor\" href=\"#62-更新操作\">#</a> 6.2 更新操作</h5>\n<h6 id=\"621-添加\"><a class=\"anchor\" href=\"#621-添加\">#</a> 6.2.1 添加</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 将 User 对象数据存储到 数据库中</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param user User 对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @return 执行 SQL 语句对应数据表的影响行数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">insertUserByUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 将 Map 数据对应 User 信息数据库中</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @param map Map 双边队列</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @return 执行 SQL 语句对应数据表的影响行数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">insertUserByMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>添加操作对应的 XML 文件标签是 insert 标签</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>方法名称对应标签 id ，需要有 parameterType 属性，对应方法的参数类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>insertUserByUser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    insert into tb_user(username, gender, password, phone, money, createTime)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    VALUES (#&#123;username&#125;, #&#123;gender&#125;, #&#123;password&#125;, #&#123;phone&#125;, #&#123;money&#125;, #&#123;createTime&#125;);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">&lt;!-- parameterType 约束数据类型为 Map 双边队列类型 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>insertUserByMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    insert into tb_user(username, gender, password, phone, money, createTime)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    VALUES (#&#123;username&#125;, #&#123;gender&#125;, #&#123;password&#125;, #&#123;phone&#125;, #&#123;money&#125;, #&#123;createTime&#125;);</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h6 id=\"622-更新\"><a class=\"anchor\" href=\"#622-更新\">#</a> 6.2.2 更新</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">updateUserByMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>update</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>updateUserByMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    update tb_user</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    set username = #&#123;username&#125;,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        password = #&#123;password&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    where id = #&#123;id&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>update</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h6 id=\"623-删除\"><a class=\"anchor\" href=\"#623-删除\">#</a> 6.2.3 删除</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">deleteUserById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>delete</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteUserById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>integer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    delete from tb_user where id = #&#123;id&#125;;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>delete</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>",
            "tags": [
                "Java框架",
                "Spring全家桶",
                "Mybatis",
                "mybatis"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/springframe/spring/springboot/springboot-01-class/",
            "url": "https://sbysg.github.io/2023/10/22/springframe/spring/springboot/springboot-01-class/",
            "title": "springboot",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<h1 id=\"1spring-boot-概述\"><a class=\"anchor\" href=\"#1spring-boot-概述\">#</a> 1.Spring Boot 概述</h1>\n<h3 id=\"1什么是springboot\"><a class=\"anchor\" href=\"#1什么是springboot\">#</a> 1. 什么是 springboot？</h3>\n<ul>\n<li>Spring Boot 是基于 Spring 框架开发的全新框架，其设计目的是<strong>简化新 Spring 应用的初始化搭建和开发过程</strong>。</li>\n</ul>\n<p>​     原有 spring 应用开发非常麻烦，各种组装对象之间依赖关系很麻烦，</p>\n<ul>\n<li>Spring Boot 整合了许多框架和第三方库配置，几乎可以达到 “开箱即用”。</li>\n</ul>\n<p>​    springboot 与其他组件结合非常容易（引入依赖，配置 ，使用）</p>\n<h3 id=\"2spring-boot-优点\"><a class=\"anchor\" href=\"#2spring-boot-优点\">#</a> 2.Spring Boot 优点？</h3>\n<ul>\n<li>可快速构建独立的 Spring 应用</li>\n<li>直接嵌入 Tomcat、Jetty 和 Undertow 服务器（无需部署 WAR 文件）  不需要本地安装 tomcat</li>\n<li>提供依赖启动器简化构建配置</li>\n<li>极大程度的自动化配置 Spring 和第三方库</li>\n<li>提供生产就绪功能</li>\n<li>极少的代码生成和 XML 配置  淘汰 xml</li>\n</ul>\n<h1 id=\"2使用springboot创建工程\"><a class=\"anchor\" href=\"#2使用springboot创建工程\">#</a> 2. 使用 springboot 创建工程</h1>\n<p>1. 创建工程</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830154950045.png\" alt=\"image-20230830154950045\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830155042358.png\" alt=\"image-20230830155042358\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830155116109.png\" alt=\"image-20230830155116109\" /></p>\n<p>2. 导入依赖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>引入父依赖<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>parent<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>parent<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.1</span><span class=\"token number\">.3</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RELEASE</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>relativePath<span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>parent<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> web相关依赖</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              starter<span class=\"token operator\">-</span>web  web启动器 <span class=\"token number\">1.</span>完成web相关jar的依赖 <span class=\"token number\">2.</span>完成bean（对象）之间的自动装配</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        starter<span class=\"token operator\">-</span>test  springboot单元测试启动器</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img data-src=\"springboot-01-class.assets/image-20230830155426376.png\" alt=\"image-20230830155426376\" /></p>\n<p>3. 在根目录下创建一个启动类</p>\n<p>根目录：com.qfedu</p>\n<pre><code>package com.qfedu;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * 启动类一般以Application\n * 一个应用只有一个启动类，相当于应用的入口\n */\n@SpringBootApplication // 标记当前类是应用的启动类\npublic class MyApplication &#123;\n\n    public static void main(String[] args) &#123;\n\n        // 启动springboot 应用\n        SpringApplication.run(MyApplication.class,args);\n        \n    &#125;\n&#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230830155842759.png\" alt=\"image-20230830155842759\" /></p>\n<p>4. 在 resources 目录中创建静态资源目录 static</p>\n<p>静态资源：html css  js  img mp3</p>\n<p>创建     static/ok.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;hello springboot !!&lt;/h1&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230830160058339.png\" alt=\"image-20230830160058339\" /></p>\n<p>5. 创建一个控制类</p>\n<pre><code>package com.qfedu.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n/**\n * 当前类是一个控制类，内部可以有很多处理器方法\n *\n */\n@Controller //1.标记当前类是一个控制类，内部方法可以处理前端请求 2.将当前类创建对象加入到spring容器（map&lt;helloController,对象&gt;）\npublic class HelloController &#123;\n\n\n    /**\n     * test1方法就是一个处理器方法 相当于 写的servlet中的doGet() doPost()\n     *              这样做的原因就是快速的开发，不需要创建很多的Servlet\n     *\n     *  url：   http://localhost:8080/test1            \n     * @return\n     */\n    // @RequestMapping(value = &quot;/test1&quot;) 表示当前方法可以处理 /test1的请求，请求方式都支持（get post ）\n    //  method = RequestMethod.GET 表示当前处理器方法只处理get请求\n    @RequestMapping(value = &quot;/test1&quot;,method = RequestMethod.GET)\n    public String test1()&#123;\n\n\n        System.out.println(&quot;调用 test1 处理器方法&quot;);\n\n        // 返回普通的字符串，就是返回静态资源路径 或者jsp 路径\n        return &quot;ok.html&quot;;\n    &#125;\n\n\n    @RequestMapping(value = &quot;/test2&quot;,method = RequestMethod.GET)\n    public String test2()&#123;\n\n\n        System.out.println(&quot;调用 test2 处理器方法&quot;);\n\n        // 返回普通的字符串，就是返回静态资源路径 或者jsp 路径\n        return &quot;ok.html&quot;;\n    &#125;\n\n&#125;\n\n</code></pre>\n<p>5. 启动 应用</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830161349689.png\" alt=\"image-20230830161349689\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830161109082.png\" alt=\"image-20230830161109082\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830161219267.png\" alt=\"image-20230830161219267\" /></p>\n<h1 id=\"3-spring\"><a class=\"anchor\" href=\"#3-spring\">#</a> 3、Spring</h1>\n<blockquote>\n<p>介绍...balabala</p>\n<p>spring 的核心功能</p>\n<ul>\n<li>IOC,DI</li>\n<li>AOP</li>\n</ul>\n</blockquote>\n<h2 id=\"31-iocdi重点\"><a class=\"anchor\" href=\"#31-iocdi重点\">#</a> 3.1 IOC+DI [重点]</h2>\n<h3 id=\"310-引言\"><a class=\"anchor\" href=\"#310-引言\">#</a> 3.1.0 引言</h3>\n<p>以前写的 [登录 + 查询全部功能]</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830164021941.png\" alt=\"image-20230830164021941\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830164046609.png\" alt=\"image-20230830164046609\" /></p>\n<h3 id=\"311-介绍\"><a class=\"anchor\" href=\"#311-介绍\">#</a> 3.1.1 介绍</h3>\n<blockquote>\n<p>IOC 是 Spring 框架的核心功能之一，IOC (inversion of control) 控制反转</p>\n<p>控制：控制创建对象的能力</p>\n<p>反转：原来创建对象是自己 new, 反转就是将创建对象的能力交给 Spring 容器</p>\n<p>​          由 spring 容器创建对象</p>\n</blockquote>\n<p><code>创建对象</code> 的注解，以下注解标记在类上，如何告诉 spring 需要创建哪些对象，对象名就是类名首字母小写</p>\n<ul>\n<li><strong>@Controller  在控制层代码上使用</strong></li>\n<li><strong>@Service       在业务层层代码上使用</strong></li>\n<li><strong>@Repository 在数据持久层代码上使用</strong></li>\n<li><strong>@Component 在其他代码上使用</strong></li>\n</ul>\n<p><strong>DI (dependency injection) 依赖注入，即 属性赋值</strong>，标记在属性中</p>\n<p>属性赋值 (依赖注入的注解)</p>\n<ul>\n<li><strong>@Autowired</strong></li>\n</ul>\n<h4 id=\"实战重写登录小例子\"><a class=\"anchor\" href=\"#实战重写登录小例子\">#</a> 实战（重写登录小例子）</h4>\n<p>1. 导入依赖</p>\n<pre><code>\n        &lt;!-- mysql驱动 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;\n            &lt;version&gt;8.1.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- DbUtils依赖 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-dbutils&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-dbutils&lt;/artifactId&gt;\n            &lt;version&gt;1.7&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- druid 数据库连接池--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid&lt;/artifactId&gt;\n            &lt;version&gt;1.1.16&lt;/version&gt;\n        &lt;/dependency&gt;\n\n</code></pre>\n<p>2. 拷贝以下文件</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830165647481.png\" alt=\"image-20230830165647481\" /></p>\n<p>3. 修改 以下文件</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830170524374.png\" alt=\"image-20230830170524374\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830170606327.png\" alt=\"image-20230830170606327\" /></p>\n<p>4.AdminController 创建</p>\n<pre><code>package com.qfedu.controller;\n\n\nimport com.qfedu.service.AdminService;\nimport com.qfedu.service.impl.AdminServiceImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.kafka.KafkaProperties;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.sql.SQLException;\n\n/**\n * AdminController 关于admin 表的业务 （增删改查 ） 登录\n */\n@Controller // 标记当前类是控制类，内部的方法可以响应前端请求  ，告诉容器创建对应的对象（bean）\npublic class AdminController &#123;\n\n\n    // 这种方式耦合性太强，太low 创建对象的权利交给spring容器\n//    private AdminService adminService  = new AdminServiceImpl();\n\n    @Autowired // 从容器中获取一个类型为AdminService的对象，赋值给adminService\n    private AdminService adminService;\n\n\n    /**\n     * 登录接口\n     *\n     *   请求url   ： /login?username=xxxx&amp;passwrod=xxxx\n     *\n     *   HttpServletRequest req, HttpServletResponse resp 是内置参数可以获取请求 和相应相关\n     * @return\n     */\n    @RequestMapping(value = &quot;/login&quot;)\n    public void login(String username, String password, HttpServletRequest req, HttpServletResponse resp) throws IOException, SQLException &#123;\n\n        // 解决form表单提交请求中文乱码\n        req.setCharacterEncoding(&quot;utf-8&quot;);\n        // 解决响应中文乱码 告诉浏览器解析的编码格式\n        resp.setContentType(&quot;text/html;charset=utf-8&quot;);\n\n\n        System.out.println(&quot;username = &quot; + username+&quot;--password==&quot;+password);\n\n        // 使用response 响应前端，此时处理器方法返回值 是void\n        PrintWriter printWriter = resp.getWriter();\n\n        // 判断是否登录成功\n        boolean result = adminService.login(username, password);\n        if (result)&#123; //登录成功响应前端\n\n            //所有的响应都通过 HttpServletResponse resp\n\n            printWriter.println(&quot;&lt;html&gt;&quot;);\n            printWriter.println(&quot;&lt;head&gt;&lt;title&gt;login&lt;/title&gt;&lt;/head&gt;&quot;);\n            printWriter.println(&quot;&lt;body&gt;&quot;);\n            printWriter.println(&quot;&lt;h1&gt; 登录成功 Success!!!&lt;/h1&gt;&quot;);\n            //out.println(&quot;&lt;h1&gt;登录成功!!!&lt;/h1&gt;&quot;);\n            printWriter.println(&quot;&lt;/body&gt;&quot;);\n            printWriter.println(&quot;&lt;/html&gt;&quot;);\n\n        &#125;else &#123; // 登录失败\n\n            printWriter.println(&quot;&lt;html&gt;&quot;);\n            printWriter.println(&quot;&lt;head&gt;&lt;title&gt;login&lt;/title&gt;&lt;/head&gt;&quot;);\n            printWriter.println(&quot;&lt;body&gt;&quot;);\n            printWriter.println(&quot;&lt;h1&gt; 登录失败 Fail!!!&lt;/h1&gt;&quot;);\n            //out.println(&quot;&lt;h1&gt;登录成功!!!&lt;/h1&gt;&quot;);\n            printWriter.println(&quot;&lt;/body&gt;&quot;);\n            printWriter.println(&quot;&lt;/html&gt;&quot;);\n        &#125;\n\n\n    &#125;\n\n\n\n&#125;\n\n</code></pre>\n<p>5. 测试</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2xvZ2luP3VzZXJuYW1lPWxpdSZhbXA7cGFzc3dvcmQ9MTIzNDU2\">http://localhost:8080/login?username=liu&amp;password=123456</span></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230830170703645.png\" alt=\"image-20230830170703645\" /></p>\n<h3 id=\"313-演示2\"><a class=\"anchor\" href=\"#313-演示2\">#</a> 3.1.3 演示 2</h3>\n<blockquote>\n<p>演示 @Component 注解创建对象</p>\n</blockquote>\n<p>1. 声明 Bean</p>\n<pre><code>package com.qfedu.entity;\n\nimport org.springframework.stereotype.Component;\n\nimport java.io.Serializable;\n\n@Component //1.表示告诉容器要创建一个该类型的对象（bean），加入容器\n        // 2.默认创建bean的用法，除了controller,service,dao层之外的需要创建bean的注解都使用 @Component\npublic class Admin implements Serializable &#123;\n\n    private String username = &quot;xiaoming&quot;;\n\n    private String password = &quot;123456&quot;;\n\n    private  String phone;\n\n    private String address;\n\n\n    public String getUsername() &#123;\n        return username;\n    &#125;\n\n    public void setUsername(String username) &#123;\n        this.username = username;\n    &#125;\n\n    public String getPassword() &#123;\n        return password;\n    &#125;\n\n    public void setPassword(String password) &#123;\n        this.password = password;\n    &#125;\n\n    public String getPhone() &#123;\n        return phone;\n    &#125;\n\n    public void setPhone(String phone) &#123;\n        this.phone = phone;\n    &#125;\n\n    public String getAddress() &#123;\n        return address;\n    &#125;\n\n    public void setAddress(String address) &#123;\n        this.address = address;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Admin&#123;&quot; +\n                &quot;username='&quot; + username + '\\'' +\n                &quot;, password='&quot; + password + '\\'' +\n                &quot;, phone='&quot; + phone + '\\'' +\n                &quot;, address='&quot; + address + '\\'' +\n                '&#125;';\n    &#125;\n&#125;\n\n</code></pre>\n<p>2.AdminController 引入 Admin 属性</p>\n<pre><code>\n\n    @Autowired // 从容器中获取一个该类型的bean 注入到当前 属性中\n               // 所有使用@Autowired 注解属性使用的前提是：当前类必须创建bean加入到容器 ，只有这样才能从容器中找bean\n    private Admin admin;\n\n    /**\n     * 获取admin bean\n     * @return\n     */\n    @RequestMapping(&quot;/getAdmin&quot;)\n    public String   getAdmin()&#123;\n\n        System.out.println(&quot;admin = &quot; + admin);\n\n        return &quot;ok.html&quot;;\n    &#125;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230831100402408.png\" alt=\"image-20230831100402408\" /></p>\n<h2 id=\"32-aop\"><a class=\"anchor\" href=\"#32-aop\">#</a> 3.2 AOP</h2>\n<h3 id=\"321-介绍\"><a class=\"anchor\" href=\"#321-介绍\">#</a> 3.2.1 介绍</h3>\n<blockquote>\n<p>Spring 中另外一个<strong>核心功能，AOP</strong></p>\n<hr />\n<p>AOP (Aspect Oriented Programming), 即<strong>面向切面编程</strong>.</p>\n<blockquote>\n<p>OOP (Object Oriented Programming), 即面向对象编程.</p>\n</blockquote>\n</blockquote>\n<p>切面 就是一个个的横切面</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831104009176.png\" alt=\"image-20230831104009176\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831104433440.png\" alt=\"image-20230831104433440\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831105338049.png\" alt=\"image-20230831105338049\" /></p>\n<p><img data-src=\"https://picgo-image-wgz.oss-cn-hangzhou.aliyuncs.com/picgo_image-master/image-20200525101645635.png\" alt=\"image-20200525101645635\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831105958383.png\" alt=\"image-20230831105958383\" /></p>\n<p>总结：切面就是抽离公共的代码，可以对目标方法进行拦截 过滤 鉴权 记录日志</p>\n<p>使用场景</p>\n<ul>\n<li>事务管理\n<ul>\n<li>后续 spring 管理事务用的 AOP 原理</li>\n</ul>\n</li>\n<li>权限校验\n<ul>\n<li>后期使用 Spring Security 注解开发时，其实利用了 AOP 思想</li>\n</ul>\n</li>\n<li>日志记录</li>\n<li>性能检测（记录请求时间）</li>\n</ul>\n<h3 id=\"322-aop术语\"><a class=\"anchor\" href=\"#322-aop术语\">#</a> 3.2.2 AOP 术语</h3>\n<blockquote>\n<p>连接点 (Joinpoint)：连接点是程序类中客观存在的方法，可被 Spring 拦截并切入内容。即每个方法在切入之前，都是连接点</p>\n<p><code>切入点</code>  (Pointcut)：被 Spring 切入连接点。即真正会增强的目标方法</p>\n<p>通知、 <code>增强</code>  (Advice)：可以为切入点添加额外功能，分为：前置通知、后置通知、异常通知、环绕通知等。</p>\n<p><code>目标对象</code>  (Target)：被代理的目标对象</p>\n<p>织入 (Weaving)：把通知应用到具体的类，进而创建新的代理类的过程。</p>\n<p><code>代理</code>  (Proxy)：被 AOP 织入通知后，产生的结代理类。</p>\n<p><code>切面</code>  (Aspect)：由切点和通知组成</p>\n</blockquote>\n<p><img data-src=\"https://picgo-image-wgz.oss-cn-hangzhou.aliyuncs.com/picgo_image-master/image-20200525102238000.png\" alt=\"image-20200525102238000\" /></p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<p><img data-src=\"springboot-01-class.assets/image-20230831110820122.png\" alt=\"image-20230831110820122\" /></p>\n<p>概念重新梳理</p>\n<p>连接点 (Joinpoint)：连接点是程序类中客观存在的方法，可被 Spring 拦截并切入内容。即每个方法在切入之前，都是连接点</p>\n<p>​                        连接点 ==== 普通的方法</p>\n<p><code>切入点</code>  (Pointcut)：被 Spring 切入连接点。即真正会增强的目标方法</p>\n<p>​                        ` 切入点 === 被切面切向的普通方法，需要拦截 增强的目标方法</p>\n<p>通知、 <code>增强</code>  (Advice)：可以为切入点添加额外功能，分为：前置通知、后置通知、异常通知、环绕通知等。</p>\n<p>​                                   通知 ==== 切面中的方法（抽离公共代码）</p>\n<p><code>目标对象</code>  (Target)：被代理的目标对象</p>\n<p>​\t\t\t\t\t\t\t 需要拦截的哪些方法对应的对象</p>\n<p>织入 (Weaving)：把通知应用到具体的类，进而创建新的代理类的过程。</p>\n<p>​                             将切面切向目标方法的过程就是织入，动作</p>\n<p><code>代理</code>  (Proxy)：被 AOP 织入通知后，产生的结代理类。</p>\n<p>​\t\t\t\t\t\t  aop 实现的本质是使用代理模式（静态代理，动态代理）实现</p>\n<p><code>切面</code>  (Aspect)：由切点表达式和通知（抽离的公共方法）组成</p>\n<p>​                           切面 == 一个类</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831143600319.png\" alt=\"image-20230831143600319\" /></p>\n<h4 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h4>\n<p>目标：就是创建一个切面，可以拦截过滤我们的 Service 实现类中的方法</p>\n<p>1. 引入 aop 相关依赖</p>\n<pre><code>       &lt;!-- 导入aop相关 依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>2. 创建一个切面</p>\n<pre><code>package com.qfedu.aspect;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\n\n/**\n * 当前类 就是一个切面，切面中就是抽离的公共方法（通知 ）\n */\n@Component //将当前类创建bean 加入到spring容器\n@Aspect // 声明当前类是一个切面类\npublic class MyAspect &#123;\n\n\n    /**\n     * 声明此方法为切点表达式\n     *   value = &quot;execution( )&quot; 配置切点表达式\n     *                             切点：就是要拦截的目标方法  com.qfedu.service.impl.AdminServiceImpl.login(java.lang.String, java.lang.String)\n     *                             切点表达式 ：就是可以描述一系列的切点\n     *\n     *  切点表达式公式\n     *  public boolean     com.qfedu.service.impl.AdminServiceImpl.login(java.lang.String, java.lang.String)\n     *\n     *  // 1.去掉 权限修饰符 public\n     *  // 2.返回值类型使用 * 替代\n     *  // 3.方法名 类名 包名 可以使用*替代\n     *     4.参数列表使用 .. 替代\n     *   *   com.qfedu.service.*.*.*(..) 切点表达式，表示service包下所有 类中的方法\n     *\n     */\n    @Pointcut(value = &quot;execution( *   com.qfedu.service.*.*.*(..)  )&quot;)\n    public void pointCut()&#123;\n\n    &#125;\n\n    /**\n     * 环绕通知  封装抽离公共的方法 在目标方法执行前后执行\n     *\n     * ProceedingJoinPoint proceedingJoinPoint  封装了目标对象 及其要执行的方法 参数\n     * @param proceedingJoinPoint\n     * @return\n     */\n    @Around(value = &quot;pointCut()&quot;) // 标记当前方法为环绕通知 拦截切点表达式中对应的方法\n    public Object myAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;\n\n        // proceedingJoinPoint.getSignature().getName() 获取即将调用目标方法的名字\n        System.out.println(&quot;环绕通知-调用目标方法前---目标方法：&quot;+proceedingJoinPoint.getSignature().getName() );\n\n        // 让目标方法（service包下所有 类中的方法）执行 ，result就是对应方法返回值结果\n        Object result = proceedingJoinPoint.proceed();\n\n//        Object result = false; 如果不调用proceedingJoinPoint.proceed(); 就是拦截不调用目标对象方法\n\n        System.out.println(&quot;目标方法执行 返回的结果 --result = &quot; + result);\n\n\n        System.out.println(&quot;环绕通知-调用目标方法后---目标方法：&quot;+proceedingJoinPoint.getSignature().getName());\n\n         return  result;\n    &#125;\n\n\n&#125;\n\n</code></pre>\n<p>3. 访问 login 测试</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2xvZ2luP3VzZXJuYW1lPWxpdSZhbXA7cGFzc3dvcmQ9MTIzNDU2\">http://localhost:8080/login?username=liu&amp;password=123456</span></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831114324272.png\" alt=\"image-20230831114324272\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831113812195.png\" alt=\"image-20230831113812195\" /></p>\n<h3 id=\"324-aop开发步骤\"><a class=\"anchor\" href=\"#324-aop开发步骤\">#</a> 3.2.4 Aop 开发步骤</h3>\n<p>前提引入 aop 依赖</p>\n<pre><code>   &lt;!-- 导入aop相关 依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<p>演示各种 aop 增强方式，步骤</p>\n<ul>\n<li>\n<p>创建切面类，类上加注解</p>\n<ul>\n<li>@Component , 加上该注解，springboot 框架就会创建该类对象</li>\n<li>@Aspect , 加上该注解，springboot 框架内部就会知道该类是一个切面类</li>\n</ul>\n</li>\n<li>\n<p>设置切入点方法，并加注解</p>\n<ul>\n<li>@Pointcut , 用于定义要增强的目标方法路径</li>\n</ul>\n</li>\n<li>\n<p>设置各种增强 (或者叫通知) 方法</p>\n<ul>\n<li>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Around</td>\n<td>环绕通知</td>\n</tr>\n<tr>\n<td>@Before</td>\n<td>前置通知</td>\n</tr>\n<tr>\n<td>@After</td>\n<td>最终通知</td>\n</tr>\n<tr>\n<td>@AfterReturning</td>\n<td>后置返回通知</td>\n</tr>\n<tr>\n<td>@AfterThrowing</td>\n<td>异常通知</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<pre><code>package com.qfedu.aspect;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\n/**\n * 当前类 就是一个切面，切面中就是抽离的公共方法（通知 ）\n */\n@Component //将当前类创建bean 加入到spring容器\n@Aspect // 声明当前类是一个切面类\npublic class MyAspect &#123;\n\n\n    /**\n     * 声明此方法为切点表达式\n     *   value = &quot;execution( )&quot; 配置切点表达式\n     *                             切点：就是要拦截的目标方法  com.qfedu.service.impl.AdminServiceImpl.login(java.lang.String, java.lang.String)\n     *                             切点表达式 ：就是可以描述一系列的切点\n     *\n     *  切点表达式公式\n     *  public boolean     com.qfedu.service.impl.AdminServiceImpl.login(java.lang.String, java.lang.String)\n     *\n     *  // 1.去掉 权限修饰符 public\n     *  // 2.返回值类型使用 * 替代\n     *  // 3.方法名 类名 包名 可以使用*替代\n     *     4.参数列表使用 .. 替代\n     *   *   com.qfedu.service.*.*.*(..) 切点表达式，表示service包下所有 类中的方法\n     *\n     */\n    @Pointcut(value = &quot;execution( *   com.qfedu.service.*.*.*(..)  )&quot;)\n    public void pointCut()&#123;\n\n    &#125;\n\n\n    /**\n     *     @Before(value = &quot;pointCut()&quot;)  前置通知 在目标方法调用前执行\n     * JoinPoint 标对象 及其要执行的方法 参数  只是不能调用目标方法执行\n     * @param joinPoint\n     */\n    @Before(value = &quot;pointCut()&quot;)\n    public void myBefore(JoinPoint joinPoint)&#123;\n\n        System.out.println(&quot;前置通知执行---方法：&quot;+joinPoint.getSignature().getName());\n\n    &#125;\n\n\n    /**\n     * 环绕通知  封装抽离公共的方法 在目标方法执行前后执行\n     *\n     * ProceedingJoinPoint proceedingJoinPoint  封装了目标对象 及其要执行的方法 参数\n     * @param proceedingJoinPoint\n     * @return\n     */\n    @Around(value = &quot;pointCut()&quot;) // 标记当前方法为环绕通知 拦截切点表达式中对应的方法\n    public Object myAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;\n\n        // proceedingJoinPoint.getSignature().getName() 获取即将调用目标方法的名字\n        System.out.println(&quot;环绕通知-调用目标方法前---目标方法：&quot;+proceedingJoinPoint.getSignature().getName() );\n\n        // 让目标方法（service包下所有 类中的方法）执行 ，result就是对应方法返回值结果\n        Object result = proceedingJoinPoint.proceed();\n\n//        Object result = false; 如果不调用proceedingJoinPoint.proceed(); 就是拦截不调用目标对象方法\n\n        System.out.println(&quot;目标方法执行 返回的结果 --result = &quot; + result);\n\n\n        System.out.println(&quot;环绕通知-调用目标方法后---目标方法：&quot;+proceedingJoinPoint.getSignature().getName());\n\n         return  result;\n    &#125;\n\n\n    /**\n     *  @AfterReturning 后置返回通知  可以得到 目标对象执行的结果\n     *      value = &quot;pointCut()&quot; 切点表达式\n     *      returning = &quot;result&quot; 需要将目标对象方法执行返回的结果交个那个形参\n     * @param joinPoint\n     * @param result\n     * @return\n     */\n    @AfterReturning(value = &quot;pointCut()&quot;,returning = &quot;result&quot;)\n    public Object myAfterReturn(JoinPoint joinPoint,Object result)&#123;\n\n        System.out.println(&quot;后置返回通知执行---方法：&quot;+joinPoint.getSignature().getName() + &quot;--result:&quot;+result);\n\n\n        return result;\n    &#125;\n\n\n    /**\n     *   @After(value = &quot;pointCut()&quot;) 后置最终通知\n     *\n     *          @After 无论目标方法是否正确的执行，都会回调该通知\n     *          @AfterReturning  如果目标方法正确的执行，并返回结果  调用后置返回通知\n     *                            如果目标方法执行发生异常，无法返回结果，此时 不会调用后置返回通知\n     * @param joinPoint\n     */\n    @After(value = &quot;pointCut()&quot;)\n    public void myAfter(JoinPoint joinPoint)&#123;\n\n        System.out.println(&quot;后置最终通知执行---方法：&quot;+joinPoint.getSignature().getName());\n    &#125;\n\n    /**\n     * @AfterThrowing 后置异常通知  只有目标方法调用有异常时才会 回调\n     *       throwing = &quot;e&quot; 可以将目标方法执行抛出的异常，传递给形参 Throwable e\n     *\n     * @param joinPoint\n     * @param e\n     */\n    @AfterThrowing(value = &quot;pointCut()&quot;,throwing = &quot;e&quot;)\n    public void myAfterThrowing(JoinPoint joinPoint,Throwable e)&#123;\n\n        System.out.println(&quot;后置异常通知执行---方法：&quot;+joinPoint.getSignature().getName()+&quot;异常信息：&quot;+e.getMessage());\n\n    &#125;\n\n\n\n&#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230831145624249.png\" alt=\"image-20230831145624249\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831145801922.png\" alt=\"image-20230831145801922\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831150315302.png\" alt=\"image-20230831150315302\" /></p>\n<h2 id=\"51-mvc\"><a class=\"anchor\" href=\"#51-mvc\">#</a> 5.1 MVC</h2>\n<p>MVC 架构：根据不同的事情由不同的类去处理，内部单一职责</p>\n<blockquote>\n<ul>\n<li>Model: 模型类，例如封装数据的实体类，业务模型 (Service), 数据层 (Dao)</li>\n<li>View:  视图，展示数据的.HTML,JSP</li>\n<li>Controller: 控制器，控制整个流程走向。决定是否能接收请求，调用哪个业务，跳转哪个页面，Servlet</li>\n</ul>\n</blockquote>\n<p>MVC 架构，就是将我们项目 进行分模块开发，每隔模块都只有一小部分功能，遵循单一职责</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831155310988.png\" alt=\"image-20230831155310988\" /></p>\n<h2 id=\"52-请求响应重点\"><a class=\"anchor\" href=\"#52-请求响应重点\">#</a> 5.2 请求 &amp; 响应【重点】</h2>\n<p>@RequestMapping(value = &quot;/testA&quot;,method = RequestMethod.GET)</p>\n<p>@GetMapping(value = &quot;/testB&quot;)</p>\n<p>@PostMapping(value = &quot;/testC&quot;)</p>\n<pre><code>package com.qfedu.controller;\n\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n@Controller // 表名当前类是控制了 可以接收请求\npublic class TestController &#123;\n\n\n    /**\n     *  @RequestMapping 默认请情况下可以 get post delete put\n     *          method = RequestMethod.GET 表示当前请求方式只支持get\n     * @return\n     */\n    @RequestMapping(value = &quot;/testA&quot;,method = RequestMethod.GET)\n    public String testA()&#123;\n        System.out.println(&quot;TestController-testA&quot;);\n        return &quot;ok.html&quot;;\n\n    &#125;\n\n    /**\n     *  @GetMapping 只支持Get请求方式\n     *  @GetMapping(value = &quot;/testB&quot;) ==  @RequestMapping(value = &quot;/testB&quot;,method = RequestMethod.GET)\n     * @return\n     */\n    @GetMapping(value = &quot;/testB&quot;)\n    public String testB()&#123;\n        System.out.println(&quot;TestController-testB&quot;);\n        return &quot;ok.html&quot;;\n\n    &#125;\n\n    /**\n     * @PostMapping(value = &quot;/testC&quot;) 表示当前处理器方法只支持post 请求\n     * @return\n     */\n    @PostMapping(value = &quot;/testC&quot;)\n    public String testC()&#123;\n        System.out.println(&quot;TestController-testC&quot;);\n        return &quot;ok.html&quot;;\n\n    &#125;\n\n    /**\n     * 直接通过response 对象响应前端 处理器方法返回void类型\n     *\n     * @param request\n     * @param response\n     * @throws IOException\n     */\n    @GetMapping(value = &quot;/testD&quot;)\n    public void testD(HttpServletRequest request, HttpServletResponse response) throws IOException &#123;\n        System.out.println(&quot;TestController-testD&quot;);\n\n        request.setCharacterEncoding(&quot;utf-8&quot;);\n        response.setContentType(&quot;text/html;charset=utf-8&quot;);\n\n        response.getWriter().println(&quot;通过response对象响应前端&quot;);\n\n    &#125;\n\n\n&#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230831160326440.png\" alt=\"image-20230831160326440\" /></p>\n<h2 id=\"53-参数绑定-重点\"><a class=\"anchor\" href=\"#53-参数绑定-重点\">#</a> 5.3 参数绑定 【重点】</h2>\n<blockquote>\n<p>所谓参数绑定，就是前端发请求中的数据，可以直接在 Controller 的方法参数中接收。即前端请求数据和后端方法参数绑定.</p>\n</blockquote>\n<h3 id=\"531-简单类型参数绑定重点\"><a class=\"anchor\" href=\"#531-简单类型参数绑定重点\">#</a> 5.3.1 简单类型参数绑定 [重点]</h3>\n<blockquote>\n<p>简单类型指，常用的几种类型：基本类型 + String+Date</p>\n</blockquote>\n<p>前端界面</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;addUser1 提交基本类型&lt;/h1&gt;\n\n&lt;a href=&quot;/addUser1?id=100&amp;username=xiaoming&amp;score=99.5&amp;birthday=2023-08-31&quot;&gt;增加用户 &lt;/a&gt;\n&lt;br&gt;\n&lt;!-- 使用表单发起post 请求--&gt;\n&lt;form action=&quot;/addUser1&quot; method=&quot;post&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt;\n    id:&lt;input type=&quot;number&quot; name=&quot;id&quot;&gt;&lt;br&gt;\n    username:&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;\n    score:&lt;input type=&quot;number&quot; name=&quot;score&quot;&gt;&lt;br&gt;\n    birthday:&lt;input type=&quot;date&quot; name=&quot;birthday&quot;&gt;&lt;br&gt;\n\n    &lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt;\n&lt;/form&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>后端接收</p>\n<pre><code>package com.qfedu.controller;\n\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.Date;\n\n/**\n * user 相关增删改查\n */\n@Controller\npublic class UserController &#123;\n\n    /**\n     * 添加用户\n     *  接收基本类型  可以直接接收也可以使用其包装类型接收\n     *  接收字符串  直接使用String\n     *  接收时间字符串  需要  @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;) Date birthday\n     *                 将接收的时间字符串 转化为 java.utils.Date\n     *\n     *  url /addUser1?id=100&amp;username=xiaoming&amp;score=99.5&amp;birthday=2023-08-31\n     * @return\n     */\n    @RequestMapping(&quot;/addUser1&quot;)\n    public String addUser1(int id, String username, float score,\n                           @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;) Date birthday)&#123;\n\n        System.out.println(&quot;id = &quot; + id);\n        System.out.println(&quot;username = &quot; + username);\n        System.out.println(&quot;score = &quot; + score);\n        System.out.println(&quot;birthday = &quot; + birthday);\n\n        // 此时如果直接 return路径为jsp html ，再form表单使用post提交时报错误 405 不支持post请求\n//        return &quot;ok.html&quot;;\n\n        // 此时可以使用重定向解决  redirect:/\n        return &quot;redirect:/ok.html&quot;;\n    &#125;\n\n&#125;\n\n</code></pre>\n<h3 id=\"532-对象重点\"><a class=\"anchor\" href=\"#532-对象重点\">#</a> 5.3.2 对象 [重点]</h3>\n<blockquote>\n<p>场景：注册 / 添加 / 更新</p>\n</blockquote>\n<p>如果处理方法接受的参数非常多，此时可以使用 对象 或者 Map 封装起来</p>\n<p>前端界面</p>\n<pre><code>&lt;h1&gt;addUser2 提交基本类型，使用对象接收&lt;/h1&gt;\n&lt;a href=&quot;/addUser2?id=100&amp;username=xiaoming&amp;score=99.5&amp;birthday=2023-08-31&quot;&gt;增加用户 &lt;/a&gt;\n&lt;br&gt;\n&lt;!-- 使用表单发起post 请求--&gt;\n&lt;form action=&quot;/addUser2&quot; method=&quot;post&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt;\n    id:&lt;input type=&quot;number&quot; name=&quot;id&quot;&gt;&lt;br&gt;\n    username:&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;\n    score:&lt;input type=&quot;number&quot; name=&quot;score&quot;&gt;&lt;br&gt;\n    birthday:&lt;input type=&quot;date&quot; name=&quot;birthday&quot;&gt;&lt;br&gt;\n\n    &lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt;\n&lt;/form&gt;\n</code></pre>\n<p>处理器方法接收</p>\n<pre><code>\n    /**\n     * 接收对象\n     * url /addUser2?id=100&amp;username=xiaoming&amp;score=99.5&amp;birthday=2023-08-31\n     * 当前处理器方法 接收键值对 =====》java对象user\n     * @param user\n     * @return\n     */\n    @RequestMapping(&quot;/addUser2&quot;)\n    public String addUser2(User user)&#123;\n\n        System.out.println(&quot;user = &quot; + user);\n\n        return &quot;redirect:/ok.html&quot;;\n    &#125;\n</code></pre>\n<h3 id=\"535-map集合\"><a class=\"anchor\" href=\"#535-map集合\">#</a> 5.3.5 Map 集合</h3>\n<blockquote>\n<p>Map 是键值对，键和值一一映射.</p>\n<p>跟 Java 对象很类似，属性和属性值一一对应.</p>\n<p>所以什么时候需要 / 可以使用 Map 类型来接收参数呢？</p>\n<ul>\n<li>凡是可以用对象接收的都可以使用 Map</li>\n</ul>\n<hr />\n</blockquote>\n<p>前端</p>\n<pre><code>&lt;h1&gt;addUser3 提交基本类型，使用Map接收&lt;/h1&gt;\n&lt;a href=&quot;/addUser3?id=100&amp;username=xiaoming&amp;score=99.5&amp;birthday=2023-08-31&quot;&gt;增加用户 &lt;/a&gt;\n&lt;br&gt;\n&lt;!-- 使用表单发起post 请求--&gt;\n&lt;form action=&quot;/addUser3&quot; method=&quot;post&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt;\n    id:&lt;input type=&quot;number&quot; name=&quot;id&quot;&gt;&lt;br&gt;\n    username:&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;\n    score:&lt;input type=&quot;number&quot; name=&quot;score&quot;&gt;&lt;br&gt;\n    birthday:&lt;input type=&quot;date&quot; name=&quot;birthday&quot;&gt;&lt;br&gt;\n\n    &lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt;\n&lt;/form&gt;\n\n</code></pre>\n<p>后端接收</p>\n<pre><code>\n    /**\n     * 使用map 接收键值对\n     *   如果参数非常多，但是只使用一次，没有必要创建一个对应的实体类 此时使用map\n     *\n     * url /addUser3?id=100&amp;username=xiaoming&amp;score=99.5&amp;birthday=2023-08-31\n     *\n     * Map&lt;String,Object&gt; map 如果直接接收键值对 则获取的null\n     * @RequestParam Map&lt;String,Object&gt; map 此时可以将接收键值对 转化为map\n     *\n     * @param map\n     * @return\n     */\n    @RequestMapping(&quot;/addUser3&quot;)\n    public String addUser3(@RequestParam Map&lt;String,Object&gt; map)&#123;\n\n        System.out.println(&quot;map = &quot; + map);\n\n        return &quot;redirect:/ok.html&quot;;\n    &#125;\n\n\n    /**\n     * 此时请求url  /updateUser?userid=100&amp;username=xiaoming&amp;score=99.5&amp;birthday=2023-08-31\n     *   前端提交键值对对的key userid=100   而后端接收基本类型int id 此时无法映射成功\n     *   此时可以 使用@RequestParam 取别名\n     *    @RequestParam(name = &quot;userid&quot;) int id 需要从请求的键值对中获取userid对应的值 赋值给id\n     * @param id\n     * @param username\n     * @param score\n     * @param birthday\n     * @return\n     */\n    @RequestMapping(&quot;/updateUser&quot;)\n    public String updateUser(@RequestParam(name = &quot;userid&quot;) int id, String username, float score,\n                             @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;) Date birthday)&#123;\n\n        System.out.println(&quot;id = &quot; + id);\n        System.out.println(&quot;username = &quot; + username);\n        System.out.println(&quot;score = &quot; + score);\n        System.out.println(&quot;birthday = &quot; + birthday);\n        return &quot;redirect:/ok.html&quot;;\n    &#125;\n\n</code></pre>\n<h3 id=\"536-路径参数pathvariable\"><a class=\"anchor\" href=\"#536-路径参数pathvariable\">#</a> 5.3.6 路径参数 @PathVariable</h3>\n<p>从路径中获取参数 /user/100  100 就是一个参数</p>\n<pre><code>\n    /**\n     *\n     * url  /user/100\n     *      /user/&#123;id&#125;   &#123;id&#125;占位符，后续使用 @PathVariable获取对应得知\n     * @PathVariable(value = &quot;id&quot;) int id   需要从url中获取&#123;id&#125;对应位置的值，传递给int id\n     * @param id\n     * @return\n     */\n    @GetMapping(&quot;/user/&#123;id&#125;&quot;)\n    public String findUserById(@PathVariable(value = &quot;id&quot;) int id)&#123;\n        System.out.println(&quot;id = &quot; + id);\n\n        return &quot;redirect:/ok.html&quot;;\n    &#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230831175236070.png\" alt=\"image-20230831175236070\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230831175616859.png\" alt=\"image-20230831175616859\" /></p>\n<h2 id=\"54-页面跳转熟悉\"><a class=\"anchor\" href=\"#54-页面跳转熟悉\">#</a> 5.4 页面跳转 [熟悉]</h2>\n<blockquote>\n<p>回顾之前学过的 servlet 中跳转页面的功能</p>\n<ul>\n<li>请求转发:forward\n<ul>\n<li>req.getDispatcherServlet().forward(req,resp)</li>\n<li>请求路径不变</li>\n<li>是服务器内部请求</li>\n<li>一次请求</li>\n<li>请求域的数据（请求参数，request 的属性）可以共享</li>\n</ul>\n</li>\n<li>重定向:redirect\n<ul>\n<li>resp.sendRedirect();</li>\n<li>请求路径改变</li>\n<li>是浏览器行为</li>\n<li>两次请求</li>\n<li>请求域的不能共享    请求参数，request 的属性丢失</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><strong>请求转发</strong></p>\n<pre><code>以  forward:/路径     \n</code></pre>\n<pre><code> /**\n     * 直接通过response 对象响应前端 处理器方法返回void类型\n     *\n     * @param request\n     * @param response\n     * @throws IOException\n     */\n    @GetMapping(value = &quot;/testD&quot;)\n    public void testD(HttpServletRequest request, HttpServletResponse response) throws IOException &#123;\n        System.out.println(&quot;TestController-testD&quot;);\n\n        request.setCharacterEncoding(&quot;utf-8&quot;);\n        response.setContentType(&quot;text/html;charset=utf-8&quot;);\n\n        String code = (String) request.getAttribute(&quot;code&quot;);\n\n        response.getWriter().println(&quot;通过response对象响应前端---code:&quot;+code);\n\n    &#125;\n\n\n    /**\n     * 转发 处理方法返回 String 类型 以forward:开头\n     *\n     *      一般用于：服务器内同类请求（处理器方法 转发到处理器方法）\n     *\n     * @return\n     */\n    @RequestMapping(&quot;/forwardTest&quot;)\n    public String forwardTest(HttpServletRequest request)&#123;\n\n        System.out.println(&quot;转发测试---forwardTest&quot;   );\n\n        // 在request 设置属性，转发到的处理器方法也可以接收到属性\n        request.setAttribute(&quot;code&quot;,&quot;8888&quot;);\n\n        // 此时转发到 /testD处理器方法\n        return &quot;forward:/testD&quot;;\n    &#125;\n</code></pre>\n<p>重定向</p>\n<pre><code>以   redirec:/ 开头\n</code></pre>\n<pre><code>\n\n    /**\n     * 重定向  返回String 以 redirect:/ 开头      用于控制界面跳转\n     *\n     *      重定向一般用于服务器内 跳转html 其他前端界面时使用  退出登录\n     *                 用于跳转到外部的服务器 连接  http:/www.baidu.com\n     * @return\n     */\n    @RequestMapping(&quot;/redirectTest&quot;)\n    public String redirectTest(HttpServletRequest request)&#123;\n\n\n//        return &quot;redirect:/ok.html&quot;;\n\n        // 重定向到内部的处理器方法，此丢失request的属性 参数\n        // 在request 设置属性，转发到的处理器方法也可以接收到属性\n        request.setAttribute(&quot;code&quot;,&quot;8888&quot;);\n        return &quot;redirect:/testD&quot;;\n    &#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230901095721255.png\" alt=\"image-20230901095721255\" /></p>\n<h2 id=\"55-会话重点\"><a class=\"anchor\" href=\"#55-会话重点\">#</a> 5.5 会话 [重点]</h2>\n<p>会话：就是 session, 同一个浏览器多个窗口请求同一个服务，多个窗口共享同一个回话 session</p>\n<blockquote>\n<p>如果需要在控制层中使用 session 存储会话数据，比如登录的用户信息，就可以直接在方法的参数列表中定义 HttpSession 对象即可</p>\n</blockquote>\n<p><strong>spring 中的处理器方法 内置参数可以有</strong>   HttpServletRequest  HttpServletResponse  HttpSession, 只要我们在处理器方法声明 ，直接都可以使用</p>\n<pre><code>\n    /**\n     * 处理器方法内置参数 可以是  HttpServletRequest request, HttpServletResponse response, HttpSession session\n     *  在session存数据\n     *  @param request\n     * @param response\n     * @param session\n     */\n    @RequestMapping(&quot;/testSession1&quot;)\n    public void testSession1(HttpServletRequest request, HttpServletResponse response,\n                             HttpSession session) throws IOException &#123;\n\n\n        // 向session 中添加属性\n        session.setAttribute(&quot;loginFlag&quot;,true);\n\n\n        request.setCharacterEncoding(&quot;utf-8&quot;);\n        response.setContentType(&quot;text/html;charset=utf-8&quot;);\n        response.getWriter().println(&quot;向session中写入数据 loginFlag&quot;);\n\n    &#125;\n\n    /**\n     * 从session中读取数据\n     * @param response\n     * @param session\n     * @throws IOException\n     */\n    @RequestMapping(&quot;/testSession2&quot;)\n    public void  testSession2( HttpServletResponse response,\n                               HttpSession session) throws IOException &#123;\n\n        boolean loginFlag = (boolean) session.getAttribute(&quot;loginFlag&quot;);\n\n\n        response.setContentType(&quot;text/html;charset=utf-8&quot;);\n        response.getWriter().println(&quot;从session中读取数据 loginFlag：&quot;+loginFlag);\n\n    &#125;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230901100610713.png\" alt=\"image-20230901100610713\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230901100647263.png\" alt=\"image-20230901100647263\" /></p>\n<h2 id=\"57-json处理重点\"><a class=\"anchor\" href=\"#57-json处理重点\">#</a> 5.7 json 处理【重点】</h2>\n<h3 id=\"处理器方法返回值\"><a class=\"anchor\" href=\"#处理器方法返回值\">#</a> 处理器方法返回值</h3>\n<p>void     使用 response 相应数据</p>\n<p>String         返回 html,jsp 地址  转发重定向</p>\n<p>返回 java 对象     ，对象最终转化为 json 字符串</p>\n<ul>\n<li>void     使用 response 相应数据</li>\n</ul>\n<pre><code>    @RequestMapping(&quot;/testSession1&quot;)\n    public void testSession1(HttpServletRequest request, HttpServletResponse response,\n                             HttpSession session) throws IOException &#123;\n\n\n        // 向session 中添加属性\n        session.setAttribute(&quot;loginFlag&quot;,true);\n\n\n        request.setCharacterEncoding(&quot;utf-8&quot;);\n        response.setContentType(&quot;text/html;charset=utf-8&quot;);\n        response.getWriter().println(&quot;向session中写入数据 loginFlag&quot;);\n\n    &#125;\n</code></pre>\n<ul>\n<li>String         返回 html,jsp 地址  转发重定向</li>\n</ul>\n<pre><code>    /**\n     * @PostMapping(value = &quot;/testC&quot;) 表示当前处理器方法只支持post 请求\n     * @return\n     */\n    @PostMapping(value = &quot;/testC&quot;)\n    public String testC()&#123;\n        System.out.println(&quot;TestController-testC&quot;);\n        return &quot;ok.html&quot;;\n\n    &#125;\n    \n    /**\n     * 转发 处理方法返回 String 类型 以forward:开头\n     *\n     *      一般用于：服务器内同类请求（处理器方法 转发到处理器方法）\n     *\n     * @return\n     */\n    @RequestMapping(&quot;/forwardTest&quot;)\n    public String forwardTest(HttpServletRequest request)&#123;\n\n        System.out.println(&quot;转发测试---forwardTest&quot;   );\n\n        // 在request 设置属性，转发到的处理器方法也可以接收到属性\n        request.setAttribute(&quot;code&quot;,&quot;8888&quot;);\n\n        // 此时转发到 /testD处理器方法\n        return &quot;forward:/testD&quot;;\n    &#125;\n\n\n    /**\n     * 重定向  返回String 以 redirect:/ 开头      用于控制界面跳转\n     *\n     *      重定向一般用于服务器内 跳转html 其他前端界面时使用  退出登录\n     *                 用于跳转到外部的服务器 连接  http:/www.baidu.com\n     * @return\n     */\n    @RequestMapping(&quot;/redirectTest&quot;)\n    public String redirectTest(HttpServletRequest request)&#123;\n\n\n//        return &quot;redirect:/ok.html&quot;;\n\n        // 重定向到内部的处理器方法，此丢失request的属性 参数\n        // 在request 设置属性，转发到的处理器方法也可以接收到属性\n        request.setAttribute(&quot;code&quot;,&quot;8888&quot;);\n        return &quot;redirect:/testD&quot;;\n    &#125;\n    \n</code></pre>\n<ul>\n<li>返回 java 对象     ，对象最终转化为 json 字符串</li>\n</ul>\n<h3 id=\"处理器方法接收参数\"><a class=\"anchor\" href=\"#处理器方法接收参数\">#</a> 处理器方法接收参数</h3>\n<ul>\n<li>\n<p>内置参数： HttpServletRequest  HttpServletResponse  HttpSession</p>\n</li>\n<li>\n<p>前端提交键值对，使用一下方式接收</p>\n</li>\n</ul>\n<pre><code>基本类型+String+Date\n\n接收对象\n\n接收map\n</code></pre>\n<ul>\n<li>前端提交 json 字符串，后端使用 java 对象接收</li>\n</ul>\n<h3 id=\"json\"><a class=\"anchor\" href=\"#json\">#</a> json</h3>\n<p>json 就是一种特殊的，具有特定语法的字符串，简单，易读，通常作为，前后端交互的中间数据</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230901110309234.png\" alt=\"image-20230901110309234\" /></p>\n<h5 id=\"json对象\"><a class=\"anchor\" href=\"#json对象\">#</a> json 对象</h5>\n<p>json 对象都是键值对，</p>\n<pre><code>有&#123;&#125; 包裹，\n\n内部是键值对  ，键值对之间使用,分割\n\nkey使用引号标记，value 字符串值使用引号，数值和布尔直接写\n\n类似于js \n</code></pre>\n<pre><code>&#123;\n\t&quot;id&quot;: 100,\n\t&quot;username&quot;: &quot;xiaoming&quot;,\n\t&quot;score&quot;: 99,\n\t&quot;birthday&quot;: &quot;2023-09-01&quot;\n&#125;\n\n&#123;&quot;id&quot;:100,&quot;username&quot;:&quot;xiaoming&quot;,&quot;score&quot;:99,&quot;birthday&quot;:&quot;2023-09-01&quot;&#125;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230901110816736.png\" alt=\"image-20230901110816736\" /></p>\n<p>json 数组内部就是多个 json 对象</p>\n<pre><code>使用中括号包裹\n</code></pre>\n<pre><code>[&#123;\n\t&quot;id&quot;: 100,\n\t&quot;username&quot;: &quot;xiaoming&quot;,\n\t&quot;score&quot;: 99,\n\t&quot;birthday&quot;: &quot;2023-09-01&quot;\n&#125;, &#123;\n\t&quot;id&quot;: 101,\n\t&quot;username&quot;: &quot;xiaohong&quot;,\n\t&quot;score&quot;: 99,\n\t&quot;birthday&quot;: &quot;2023-09-01&quot;\n&#125;, &#123;\n\t&quot;id&quot;: 102,\n\t&quot;username&quot;: &quot;lisi&quot;,\n\t&quot;score&quot;: 99,\n\t&quot;birthday&quot;: &quot;2023-09-01&quot;\n&#125;]\n\n[&#123;&quot;id&quot;:100,&quot;username&quot;:&quot;xiaoming&quot;,&quot;score&quot;:99,&quot;birthday&quot;:&quot;2023-09-01&quot;&#125;,&#123;&quot;id&quot;:101,&quot;username&quot;:&quot;xiaohong&quot;,&quot;score&quot;:99,&quot;birthday&quot;:&quot;2023-09-01&quot;&#125;,&#123;&quot;id&quot;:102,&quot;username&quot;:&quot;lisi&quot;,&quot;score&quot;:99,&quot;birthday&quot;:&quot;2023-09-01&quot;&#125;]\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230901111047585.png\" alt=\"image-20230901111047585\" /></p>\n<p>json 对象嵌套数组</p>\n<pre><code>&#123;\n\t&quot;msg&quot;: &quot;ok&quot;,\n\t&quot;status&quot;: 1,\n\t&quot;data&quot;: [&#123;\n\t\t&quot;id&quot;: 100,\n\t\t&quot;username&quot;: &quot;xiaoming&quot;,\n\t\t&quot;score&quot;: 99,\n\t\t&quot;birthday&quot;: &quot;2023-09-01&quot;\n\t&#125;, &#123;\n\t\t&quot;id&quot;: 101,\n\t\t&quot;username&quot;: &quot;xiaohong&quot;,\n\t\t&quot;score&quot;: 99,\n\t\t&quot;birthday&quot;: &quot;2023-09-01&quot;\n\t&#125;, &#123;\n\t\t&quot;id&quot;: 102,\n\t\t&quot;username&quot;: &quot;lisi&quot;,\n\t\t&quot;score&quot;: 99,\n\t\t&quot;birthday&quot;: &quot;2023-09-01&quot;\n\t&#125;]\n\n&#125;\n</code></pre>\n<p>json 对象也可以嵌套对象</p>\n<pre><code>&#123;\n\t&quot;msg&quot;: &quot;ok&quot;,\n\t&quot;status&quot;: 1,\n\t&quot;data&quot;: &#123;\n\t\t&quot;id&quot;: 100,\n\t\t&quot;username&quot;: &quot;xiaoming&quot;,\n\t\t&quot;score&quot;: 99,\n\t\t&quot;birthday&quot;: &quot;2023-09-01&quot;\n\t&#125;\n\n&#125;\n</code></pre>\n<h3 id=\"处理器方法返回对象转json-responsebody标记在处理器方法上\"><a class=\"anchor\" href=\"#处理器方法返回对象转json-responsebody标记在处理器方法上\">#</a> 处理器方法返回对象转 json  @ResponseBody，标记在处理器方法上</h3>\n<p>User 实体修改</p>\n<pre><code>public class User implements Serializable &#123;\n\n    private int id;\n\n    private String username;\n\n    private float score;\n\n    // timezone = &quot;GMT+8&quot; 配置时区\n    @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;,timezone = &quot;GMT+8&quot;) //响应 1.当处理器方法返回对象时，将java.utils.Date 转化为对应的字符串 2023-08-31\n                                                           //接收   2.如果前端提交的json字符串 使用java对象接收    字符串2023-08-31 转化为java.utils.Date类型\n    @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;) // 将前端提交的键值对的时间字符串2023-08-31 转化为java.utils.Date类型\n    private Date birthday;\n    \n    。。。。。。。\n    &#125;\n</code></pre>\n<pre><code>\n    /**\n     * url /testJson1?id=100\n     * 根据id 查找user\n     *\n     * 如果处理器方法返回的是 普通的java对象，此时必须在处理器方法加注解@ResponseBody ，\n     *                              将返回的对象转化为json 字符串\n     * @param id\n     * @return\n     */\n    @ResponseBody // 标记返回的对象 转化为json字符串\n    @RequestMapping(&quot;/testJson1&quot;)\n    public User testJson1(int id)&#123;\n\n        // 假装去查找user\n        User user = new User();\n        user.setId(id);\n        user.setUsername(&quot;xxxx&quot;);\n        user.setScore(89f);\n        user.setBirthday(new Date());\n\n        return user;\n    &#125;\n\n\n    /**\n     * 处理器返回map（对象） 转json\n     *\n     * @return\n     */\n    @ResponseBody\n    @RequestMapping(&quot;/testJson2&quot;)\n    public Map&lt;String,Object&gt; testJson2()&#123;\n\n        HashMap&lt;String ,Object&gt; map = new HashMap&lt;&gt;();\n        map.put(&quot;id&quot;,100);\n        map.put(&quot;username&quot;,&quot;xiaoming&quot;);\n\n        return map;\n    &#125;\n\n    /**\n     * 处理方法返回 List集合（对象） 转json\n     * @return\n     */\n    @ResponseBody\n    @RequestMapping(&quot;/testJson3&quot;)\n    public List&lt;User&gt;  testJson3()&#123;\n\n        List&lt;User&gt; userList = new ArrayList&lt;&gt;();\n\n        User user1 = new User();\n        user1.setId(100);\n        user1.setUsername(&quot;小明&quot;);\n        user1.setScore(89f);\n        user1.setBirthday(new Date());\n\n        User user2 = new User();\n        user2.setId(101);\n        user2.setUsername(&quot;小红&quot;);\n        user2.setScore(89f);\n        user2.setBirthday(new Date());\n\n        userList.add(user1);\n        userList.add(user2);\n\n        return userList;\n    &#125;\n\n</code></pre>\n<h3 id=\"处理器方法接收json-转java-对象-使用requesbody标记在对象参数上\"><a class=\"anchor\" href=\"#处理器方法接收json-转java-对象-使用requesbody标记在对象参数上\">#</a> 处理器方法接收 json  转 java 对象 使用 @RequesBody，标记在对象参数上</h3>\n<p><strong>注意！！！！！：只有 post  put 请求 可以提交 json 数据，get 请求不可以，因为 get 没有 body 体，无法携带 json 数据</strong></p>\n<pre><code>\n    /**\n     * 当前处理器方法 接收post 请求提交的json数据，转化为user对象\n     *\n     * &#123;\n     * \t&quot;id&quot;: 100,\n     * \t&quot;username&quot;: &quot;小明&quot;,\n     * \t&quot;score&quot;: 89.0,\n     * \t&quot;birthday&quot;: &quot;2023-09-01&quot;\n     * &#125;\n     *\n     *  @RequestBody User user将提交的json 数据转化为User对象\n     * @param user\n     * @return\n     */\n    @RequestMapping(&quot;/testJson4&quot;)\n    @ResponseBody // 响应前端json\n    public User testJson4( @RequestBody User user)&#123;\n\n\n        System.out.println(&quot;user = &quot; + user);\n\n        user.setUsername(user.getUsername() +&quot;testJson4 修改 &quot;);\n\n        return user;\n    &#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230901115207809.png\" alt=\"image-20230901115207809\" /></p>\n<h2 id=\"56-拦截器\"><a class=\"anchor\" href=\"#56-拦截器\">#</a> 5.6 拦截器</h2>\n<p>拦截器 interceptor   是 spring 框架中的拦截，更为常用</p>\n<p>过滤器 Filter              是 Servlet 中的拦截器，更底层一些</p>\n<p>以上两个功能一致</p>\n<blockquote>\n<p>使用步骤，与 Servlet 中的过滤器思路基本一致</p>\n<ul>\n<li>\n<p>编写自定义拦截器类</p>\n</li>\n<li>\n<p>实现接口</p>\n</li>\n<li>\n<p>重写拦截方法</p>\n</li>\n<li>\n<p>配置拦截器</p>\n<ul>\n<li>这个不一样，以前是配置在 web.xml 中或者加上注解 @WebFilter</li>\n<li>现在 SpringBoot 推荐使用 java 类的方式配置</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"实战\"><a class=\"anchor\" href=\"#实战\">#</a> 实战</h4>\n<p>1. 创建拦截器</p>\n<pre><code>package com.qfedu.interceptor;\n\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * 拦截器定义步骤\n *    1.实现HandlerInterceptor接口\n *      重写preHandle方法\n *    2.将当前拦截器加入到容器   @Component\n *\n *    3.需要向springboot声明拦截器\n */\n@Component\npublic class MyInterceptor  implements HandlerInterceptor &#123;\n\n\n    @Override  // 在请求调用处理器方法之前调用\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n\n        // request 得到所有请求数据\n        // response 可以响应前端\n\n        System.out.println(&quot;MyInterceptor ---- preHandle&quot;);\n\n        // true表示放行 不拦截\n        // false 表示拦截，需要使用response 响应数据\n        return true;\n    &#125;\n\n    @Override // 在请求调用处理器方法之后调用\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;\n\n        System.out.println(&quot;MyInterceptor ---- postHandle&quot;);\n    &#125;\n\n    @Override// 在请求完成响应以后 前端调用\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;\n        System.out.println(&quot;MyInterceptor ---- afterCompletion&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<p>2. 声明拦截器</p>\n<pre><code>package com.qfedu.interceptor;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration // 表名当前类是一个配置类，而且也会加入到容器中\npublic class MyConfig  implements WebMvcConfigurer &#123;\n\n    @Autowired // 从容器中获取拦截器\n    private MyInterceptor myInterceptor;\n\n    @Override // 通过此方法向spring 声明拦截器\n    public void addInterceptors(InterceptorRegistry registry) &#123;\n\n        // 加入拦截器\n        registry.addInterceptor(myInterceptor)\n                .addPathPatterns(&quot;/**&quot;) //拦截所有的路径\n                .excludePathPatterns(&quot;/testA&quot;); // 表示不拦截/testA路径\n    &#125;\n&#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230901143559426.png\" alt=\"image-20230901143559426\" /></p>\n<p>3. 测试</p>\n<pre><code>http://localhost:8080/testD     # 访问的url 不要转发重定向 \n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230901145519524.png\" alt=\"image-20230901145519524\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230901145557201.png\" alt=\"image-20230901145557201\" /></p>\n<h2 id=\"59-全局异常处理\"><a class=\"anchor\" href=\"#59-全局异常处理\">#</a> 5.9 全局异常处理</h2>\n<blockquote>\n<p>SpringBoot 中有一个 ControllerAdvice 的注解，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用 ExceptionHandler 注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处理。</p>\n</blockquote>\n<p><img data-src=\"springboot-01-class.assets/image-20230901153753159.png\" alt=\"image-20230901153753159\" /></p>\n<h4 id=\"实战-2\"><a class=\"anchor\" href=\"#实战-2\">#</a> 实战</h4>\n<p>1. 声明异常处理器</p>\n<pre><code>package com.qfedu.exception;\n\n\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@ControllerAdvice  // 表明名当前类就是一个异常处理器类，可以处理所有请求的异常\npublic class MyExceptionHandler &#123;\n\n     // 异常处理器\n    // @ExceptionHandler(value = Exception.class) 只要异常是Exception异常的子类都可以处理\n    @ExceptionHandler(value = Exception.class) // 表明当前方法是一个异常处理器方法\n    @ResponseBody // 将Map转化为json 响应前端\n    public Map&lt;String,Object&gt; exceptionHandler1(Exception e)&#123;\n\n        e.printStackTrace();\n        Map&lt;String,Object&gt;  result = new HashMap();\n\n        result.put(&quot;code&quot;,500);\n        result.put(&quot;msg&quot;,&quot;exceptionHandler1-服务器出错了&quot;+e.getMessage());\n\n        return result;\n    &#125;\n\n    // @ExceptionHandler 配置的异常处理器越精确，优先级越高\n    @ExceptionHandler(value = &#123;ArithmeticException.class&#125;)// 表示当前处理器只处理ArithmeticException.class 算数异常\n    @ResponseBody\n    public Map&lt;String,Object&gt; exceptionHandler2(Exception e)&#123;\n\n        e.printStackTrace();\n        Map&lt;String,Object&gt;  result = new HashMap();\n\n        result.put(&quot;code&quot;,500);\n        result.put(&quot;msg&quot;,&quot;exceptionHandler2-服务器出错了&quot;+e.getMessage());\n\n        return result;\n    &#125;\n&#125;\n\n</code></pre>\n<p>2. 制造异常</p>\n<pre><code>    /**\n     *  @RequestMapping 默认请情况下可以 get post delete put\n     *          method = RequestMethod.GET 表示当前请求方式只支持get\n     * @return\n     */\n    @RequestMapping(value = &quot;/testA&quot;,method = RequestMethod.GET)\n    public String testA()&#123;\n        System.out.println(&quot;TestController-testA&quot;);\n\n        int i = 1/0; // 我们处理器方法 难免会有报错，所有报错都是Exception子类\n\n        return &quot;ok.html&quot;;\n\n    &#125;\n</code></pre>\n<p>3. 测试</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230901154544422.png\" alt=\"image-20230901154544422\" /></p>\n<h1 id=\"六-mybatis\"><a class=\"anchor\" href=\"#六-mybatis\">#</a> 六、Mybatis</h1>\n<h2 id=\"61-之前的jdbc的使用缺点\"><a class=\"anchor\" href=\"#61-之前的jdbc的使用缺点\">#</a> 6.1 之前的 JDBC 的使用缺点？</h2>\n<ul>\n<li>大量的代码重复</li>\n<li>手动加载驱动，创建连接 (Connection), 关流</li>\n<li>封装数据麻烦 (ORM)</li>\n<li>效率不高 (没有缓存)</li>\n</ul>\n<h2 id=\"62-mybatis的介绍\"><a class=\"anchor\" href=\"#62-mybatis的介绍\">#</a> 6.2 Mybatis 的介绍</h2>\n<p>官网: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMv\">mybatis – MyBatis 3 | Introduction</span></p>\n<p><img data-src=\"https://qiushiju-tuchuang.oss-cn-hangzhou.aliyuncs.com/image/image-20221214102653736.png\" alt=\"image-20221214102653736\" /></p>\n<h3 id=\"什么是-mybatis\"><a class=\"anchor\" href=\"#什么是-mybatis\">#</a> 什么是 MyBatis？</h3>\n<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>\n<p>Mybatis 是一个 <code>半ORM框架</code> ，可以消除 JDBC 的代码和步骤，让开发者 <code>只关注SQL</code>  本身（便于开发者优化 sql）。</p>\n<p>ORM 是对象关系映射，是指数据库表和 java 实体类一一对应.</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230901161135907.png\" alt=\"image-20230901161135907\" /></p>\n<p>半 ORM 框架：还是需要写 SQL, 由框架帮你完成映射</p>\n<p>完全 ORM 框架：连 SQL 都不需要写，只需要遵循 ORM 的要求，就会自动生成 SQL 完成映射 (Hibernate,JPA 等)</p>\n<p>注意：Hibernate 基本被淘汰，因为太强大，不需要写 sql，造成 sql 判断过多，效率低下</p>\n<h2 id=\"63实战\"><a class=\"anchor\" href=\"#63实战\">#</a> 6.3 实战</h2>\n<h4 id=\"1创建工程\"><a class=\"anchor\" href=\"#1创建工程\">#</a> 1. 创建工程</h4>\n<p><img data-src=\"springboot-01-class.assets/image-20230901161545532.png\" alt=\"image-20230901161545532\" /></p>\n<h4 id=\"2导入依赖\"><a class=\"anchor\" href=\"#2导入依赖\">#</a> 2. 导入依赖</h4>\n<pre><code>&lt;!--引入父依赖--&gt;\n&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;\n    &lt;relativePath/&gt;\n&lt;/parent&gt;\n\n&lt;dependencies&gt;\n\n    &lt;!-- web相关依赖\n        starter-web  web启动器 1.完成web相关jar的依赖 2.完成bean（对象）之间的自动装配\n  --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!--\n    starter-test  springboot单元测试启动器\n    --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n\n        &lt;!-- 以下都是mybatis相关依赖--&gt;\n    &lt;!-- 小辣椒 懒人神器--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n    &lt;!-- 阿里巴巴的Druid数据源依赖启动器 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n        &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;1.1.10&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- MyBatis依赖启动器 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;2.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- MySQL数据库连接驱动\n\n       &lt;dependency&gt;\n        &lt;groupId&gt;com.mysql&lt;/groupId&gt;\n        &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;\n        &lt;version&gt;8.1.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;mysql&lt;/groupId&gt;\n        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n\n\n&lt;/dependencies&gt;\n</code></pre>\n<h4 id=\"3lombok\"><a class=\"anchor\" href=\"#3lombok\">#</a> 3.lombok</h4>\n<p>lombok 懒人神器，作用帮助我们自动生成 set get toSring  构造方法</p>\n<p>lombok 在 idea 中需要安装插件，idea2021 以后都自带了 lombok，无需安装</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230901162149389.png\" alt=\"image-20230901162149389\" /></p>\n<pre><code>package com.qfedu.entity;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport lombok.*;\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * @Setter\n * @Getter\n * @ToString\n * 以上三个等价于@Data\n */\n@Data  //自动生成 set get toString方法\n@AllArgsConstructor// 所有参数构造方法\n@NoArgsConstructor // 无惨构造\npublic class Student  implements Serializable &#123;\n\n    private int id;\n\n    private String name;\n\n    private int  age;\n\n    private String sex;\n\n    private float height;\n\n    //只要遇到时间都加时间转换注解\n    @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;,timezone = &quot;GMT+8&quot;) //响应 1.当处理器方法返回对象时，将java.utils.Date 转化为对应的字符串 2023-08-31\n    //接收   2.如果前端提交的json字符串 使用java对象接收    字符串2023-08-31 转化为java.utils.Date类型\n    @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;) // 将前端提交的键值对的时间字符串2023-08-31 转化为java.utils.Date类型\n    private Date birthday;\n\n\n\n&#125;\n\n</code></pre>\n<p>测试</p>\n<pre><code>package com.qfedu.test;\n\nimport com.qfedu.entity.Student;\n\npublic class LombokTest &#123;\n    public static void main(String[] args) &#123;\n\n\n        Student student = new Student();\n\n        student.setId(100);\n        student.setName(&quot;xiaoming&quot;);\n\n        System.out.println(&quot;student = &quot; + student);\n\n    &#125;\n&#125;\n\n</code></pre>\n<h4 id=\"4创建dao接口\"><a class=\"anchor\" href=\"#4创建dao接口\">#</a> 4. 创建 Dao 接口</h4>\n<pre><code>package com.qfedu.dao;\n\nimport com.qfedu.entity.Student;\n\nimport java.util.List;\n\n/**\n * student_tb 相关增删改查\n */\npublic interface StudentDao &#123;\n\n    /**\n     * 查询所有学生\n     * @return\n     */\n    List&lt;Student&gt; findAllStudent();\n    \n&#125;\n\n</code></pre>\n<p>5. 在 resource 创建 mapper/StudentDao.xml  映射文件</p>\n<p>StudentDao.xml 作用：就是告诉 mybatis findAllStudent 方法应该执行什么 sql，返回结果封装什么类型对象（映射）</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;!--\n  namespace 称为命名空间，一般是dao的类全限定名\n            用于二级缓存隔离数据\n  --&gt;\n&lt;mapper namespace=&quot;com.qfedu.dao.StudentDao&quot;&gt;\n\n    &lt;!--\n        &lt;select标签 表示内部sql用于查询 \n             id=&quot;findAllStudent&quot; 表示该查询对应哪个方法\n              resultType=&quot;com.qfedu.entity.Student&quot; 配置的类型是将查询结果的每一行 转化为那种类型的对象\n             \n    --&gt;\n    &lt;select id=&quot;findAllStudent&quot; resultType=&quot;com.qfedu.entity.Student&quot;&gt;\n        SELECT id,name,age,sex,height,birthday from student_tb\n    &lt;/select&gt;\n    \n&lt;/mapper&gt;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230901163921883.png\" alt=\"image-20230901163921883\" /></p>\n<h4 id=\"6在resources-创建配置文件-applicationproperties\"><a class=\"anchor\" href=\"#6在resources-创建配置文件-applicationproperties\">#</a> 6. 在 resources 创建配置文件  application.properties</h4>\n<pre><code>\n# 表示注释\n# server.port 配置当前应用端口\nserver.port=8080\n\n#druid相关配置  修改为自己的\nspring.datasource.url=jdbc:mysql://localhost:3306/java2310_1?serverTimezone=Asia/Shanghai&amp;useSSL=false\nspring.datasource.username=root\nspring.datasource.password=123456\n\n#配置spring-mybatis数据源为druid\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource\n#初始化连接池\nspring.datasource.druid.initial-size=5\n#最大链接数\nspring.datasource.druid.max-active=10\n#最小链接数\nspring.datasource.druid.min-idle=3\n\n\n#开启驼峰写法\n#mybatis.configuration.map-underscore-to-camel-case=true\n\n#如果配置文件  和 类名对应包名可以省略，否则 需要声明位置\nmybatis.mapper-locations=classpath:mapper/*.xml\n\n#配置别名\nmybatis.type-aliases-package=com.qfedu.entity\n\n#显示mybatis 日志 可以查看mybatis 的日志\nlogging.level.com.qfedu.dao=debug\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230901164539403.png\" alt=\"image-20230901164539403\" /></p>\n<h4 id=\"5创建启动类\"><a class=\"anchor\" href=\"#5创建启动类\">#</a> 5 创建启动类</h4>\n<pre><code>package com.qfedu;\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@MapperScan(value = &quot;com.qfedu.dao&quot;) //配置mybatis的包扫描器\n@SpringBootApplication\npublic class MyApplication &#123;\n\n    public static void main(String[] args) &#123;\n\n        SpringApplication.run(MyApplication.class,args);\n\n    &#125;\n\n&#125;\n\n</code></pre>\n<h4 id=\"6springboot单元测试\"><a class=\"anchor\" href=\"#6springboot单元测试\">#</a> 6.springboot 单元测试</h4>\n<pre><code>package com.qfedu;\n\nimport com.qfedu.dao.StudentDao;\nimport com.qfedu.entity.Student;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.util.List;\n\n/**\n * 创建springboot 单元测试类 所在的包必须是springboot启动类所在包，或者子包\n */\n\n@RunWith(SpringRunner.class)\n@SpringBootTest   //组合注解，表名当前类是springboot的单元测试\npublic class StudentDaoTest &#123;\n\n    @Autowired  //从容器中获取StudentDao的实现类\n    private StudentDao studentDao;\n\n\n    /**\n     *    @Test 表示当前方法是单元测试方法\n     *       方法必须是 public void  而且无参\n     */\n    @Test\n    public void findAllStudentTest()&#123;\n\n        List&lt;Student&gt; allStudent = studentDao.findAllStudent();\n        System.out.println(&quot;allStudent = &quot; + allStudent);\n    &#125;\n\n&#125;\n</code></pre>\n<p>测试</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230901165737520.png\" alt=\"image-20230901165737520\" /></p>\n<h4 id=\"7使用studentcontroller调用studentservice-studentdao\"><a class=\"anchor\" href=\"#7使用studentcontroller调用studentservice-studentdao\">#</a> 7. 使用 StudentController 调用 StudentService StudentDao</h4>\n<p>StudentService 相关</p>\n<pre><code>package com.qfedu.service;\n\nimport com.qfedu.entity.Student;\n\nimport java.util.List;\n\npublic interface StudentService &#123;\n\n    /**\n     * 查询所有学生\n     * @return\n     */\n    List&lt;Student&gt; findAllStudent();\n\n\n&#125;\n\n</code></pre>\n<pre><code>package com.qfedu.service.impl;\n\nimport com.qfedu.dao.StudentDao;\nimport com.qfedu.entity.Student;\nimport com.qfedu.service.StudentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service// 加入容器\npublic class StudentServiceImpl  implements StudentService &#123;\n\n    @Autowired\n    private StudentDao studentDao;\n\n    @Override\n    public List&lt;Student&gt; findAllStudent() &#123;\n        return studentDao.findAllStudent();\n    &#125;\n&#125;\n\n</code></pre>\n<p>StudentController 相关</p>\n<pre><code>package com.qfedu.controller;\n\nimport com.qfedu.entity.Student;\nimport com.qfedu.service.StudentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.List;\n\n@Controller\npublic class StudentController &#123;\n\n    @Autowired //从容器中获取studentService\n    private StudentService studentService;\n\n\n    @ResponseBody\n    @RequestMapping(&quot;/findAllStudent&quot;)\n    public List&lt;Student&gt; findAllStudent()&#123;\n\n        // 查询所有学生\n        List&lt;Student&gt; allStudent = studentService.findAllStudent();\n\n        return allStudent;\n\n    &#125;\n\n&#125;\n\n</code></pre>\n<p>测试</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2ZpbmRBbGxTdHVkZW50\">http://localhost:8080/findAllStudent</span></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230901170344724.png\" alt=\"image-20230901170344724\" /></p>\n<p>mybatis 跳转插件</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230901170424384.png\" alt=\"image-20230901170424384\" /></p>\n<h2 id=\"64基于mybatis实现curd\"><a class=\"anchor\" href=\"#64基于mybatis实现curd\">#</a> 6.4. 基于 mybatis 实现 curd</h2>\n<h4 id=\"根据id查询学生\"><a class=\"anchor\" href=\"#根据id查询学生\">#</a> 根据 id 查询学生</h4>\n<p>接口</p>\n<pre><code>\n    /**\n     * 根据id查找学生\n     * @param id\n     * @return\n     */\n    Student findStudentById(int id);\n</code></pre>\n<p>映射</p>\n<pre><code>\n    &lt;!--\n         id = #&#123;id&#125; 获取findStudentById(int id)方法中参数id对象的值 （仅限于只有一个参数）\n         查询结果：  所有的查询都要使用 resultType=&quot;com.qfedu.entity.Student&quot;\n                          resultMap 配置查询结果的映射\n         请求参数：   所有的参数类型都可以不写类型声明 parameterType=&quot;int&quot;\n    --&gt;\n    &lt;select id=&quot;findStudentById&quot; resultType=&quot;com.qfedu.entity.Student&quot; &gt;\n        SELECT id,name,age,sex,height,birthday from student_tb where id = #&#123;id&#125;\n    &lt;/select&gt;\n\n</code></pre>\n<p>说明</p>\n<pre><code>- parameterType：为传入参数的类型    可以省略不写\n- resultType：为输出参数的类型    必须写 \n\n- #&#123;id&#125; 为占位符 获取接口中的参数\n</code></pre>\n<p>测试</p>\n<pre><code> /**\n     * 根据id查找学生\n     */\n    @Test\n    public void findStudentByIdTest()&#123;\n        Student student = studentDao.findStudentById(2);\n        System.out.println(&quot;student = &quot; + student);\n    &#125;\n</code></pre>\n<h4 id=\"增加学生\"><a class=\"anchor\" href=\"#增加学生\">#</a> 增加学生</h4>\n<p>dao 接口</p>\n<pre><code> /**\n     * 增加学生\n     * 返回的受影响行数\n     * @param student\n     * @return\n     */\n    int  addStudent(Student student);\n</code></pre>\n<p>映射</p>\n<pre><code>&lt;!--\n        &lt;insert表示要执行插入的sql\n            #&#123;name&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;height&#125;,#&#123;birthday&#125; 从请求参数 (Student student) student对象属性中获取参数\n\n            插入的返回值：受影响的行数 不需要写 resultType！！！！！\n            所有的增删改都不要写  resultType！！！！！\n    --&gt;\n    &lt;insert id=&quot;addStudent&quot; &gt;\n\n\n        INSERT INTO  student_tb (name,age,sex,height,birthday) VALUES (#&#123;name&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;height&#125;,#&#123;birthday&#125; )\n\n    &lt;/insert&gt;\n</code></pre>\n<p>测试</p>\n<pre><code>  @Test //增加学生\n    public void addStudentTest() throws ParseException &#123;\n\n        Student student = new Student();\n        student.setName(&quot;李四&quot;);\n        student.setAge(18);\n        student.setSex(&quot;F&quot;);\n        student.setHeight(180);\n\n        // 未来可能被淘汰\n//        Date birthday = new Date(2003,5,1);\n\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\n        Date birthday = simpleDateFormat.parse(&quot;2003-05-01&quot;);\n\n        student.setBirthday(birthday);\n\n        // 返回值收影响行数\n        int num = studentDao.addStudent(student);\n\n        if(num &gt; 0)&#123;\n            System.out.println(&quot; 增加成功num = &quot; + num);\n        &#125;\n\n    &#125;\n</code></pre>\n<h4 id=\"修改学生\"><a class=\"anchor\" href=\"#修改学生\">#</a> 修改学生</h4>\n<p>修改和增加没有任何区别</p>\n<p>dao 接口</p>\n<pre><code>\n    /**\n     * 更新学生\n     * 返回受影响行数\n     * @param student\n     * @return\n     */\n    int  updateStudentById(Student student);\n</code></pre>\n<p>映射</p>\n<pre><code>\n    &lt;!--\n        &lt;update 表示要执行更新的sql\n         返回值是受影响行数 但是不需要写 resultType！！！！！\n      --&gt;\n    &lt;update id=&quot;updateStudentById&quot; &gt;\n\n        UPDATE student_tb set name = #&#123;name&#125; ,age = #&#123;age&#125;,sex=#&#123;sex&#125;,height = #&#123;height&#125; ,birthday = #&#123;birthday&#125; WHERE id = #&#123;id&#125;\n\n    &lt;/update&gt;\n\n</code></pre>\n<p>测试</p>\n<pre><code>\n    /**\n     * 更新学生\n     */\n    @Test\n    public void  updateStudentByIdTest() throws ParseException &#123;\n\n        Student student = new Student();\n\n        student.setId(27);\n        student.setName(&quot;李老四&quot;);\n        student.setAge(18);\n        student.setSex(&quot;F&quot;);\n        student.setHeight(180);\n\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);\n        Date birthday = simpleDateFormat.parse(&quot;2003-05-01&quot;);\n\n        student.setBirthday(birthday);\n\n        int num =   studentDao.updateStudentById(student);\n\n        if (num&gt;0)&#123;\n            System.out.println(&quot;更新成功&quot;);\n        &#125;\n    &#125;\n</code></pre>\n<h4 id=\"根据id-删除学生\"><a class=\"anchor\" href=\"#根据id-删除学生\">#</a> 根据 id 删除学生</h4>\n<p>dao 接口</p>\n<pre><code>   /**\n     * 根据id 删除学生\n     * @param id\n     * @return\n     */\n    int deleteStudentById(int id);\n</code></pre>\n<p>映射</p>\n<pre><code>    &lt;!--\n          shift+ ctrl / 注释\n          注释尽量不要写在 标签内部\n\n           返回值是受影响行数 但是不需要写 resultType！！！！！\n     --&gt;\n    &lt;delete id=&quot;deleteStudentById&quot;&gt;\n        delete from student_tb WHERE id = #&#123;id&#125;\n    &lt;/delete&gt;\n</code></pre>\n<p>测试</p>\n<pre><code>    /**\n     * 根据id删除学生\n     */\n    @Test\n    public void deleteStudentByIdTest()&#123;\n\n        int num = studentDao.deleteStudentById(27);\n\n        if (num&gt;0)&#123;\n            System.out.println(&quot;删除成功&quot;);\n        &#125;\n    &#125;\n\n</code></pre>\n<h4 id=\"多参数查询\"><a class=\"anchor\" href=\"#多参数查询\">#</a> 多参数查询</h4>\n<p>需求： 通过年龄和性别查询</p>\n<h5 id=\"mybatis34及以前版本存在多参数找不到问题\"><a class=\"anchor\" href=\"#mybatis34及以前版本存在多参数找不到问题\">#</a> mybatis3.4 及以前版本存在多参数找不到问题</h5>\n<pre><code>        &lt;!-- MyBatis依赖启动器 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.0.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;\n            &lt;version&gt;3.4.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230902113456772.png\" alt=\"image-20230902113456772\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230902113736348.png\" alt=\"image-20230902113736348\" /></p>\n<h6 id=\"多参数解决方法\"><a class=\"anchor\" href=\"#多参数解决方法\">#</a> 多参数解决方法</h6>\n<p>1 使用 param1  param2 解决</p>\n<pre><code>   List&lt;Student&gt; findStudentByAgeAndSex(int age, String sex);\n</code></pre>\n<pre><code>&lt;!--\n    多参数查询 findStudentByAgeAndSex(int age,String sex);\n--&gt;\n&lt;select id=&quot;findStudentByAgeAndSex&quot; resultType=&quot;com.qfedu.entity.Student&quot;&gt;\n    SELECT id,name,age,sex,height,birthday from student_tb where age = #&#123;param1&#125; and sex = #&#123;param2&#125;\n&lt;/select&gt;\n</code></pre>\n<p>2. 使用注解 @Param () 解决</p>\n<pre><code>\n    /**\n     * 根据 年龄和性别 查询\n     *\n     * (@Param(&quot;age&quot;) int age 解决mybatis 3.4 以前版本直接使用#&#123;age&#125; #&#123;sex&#125; 报错\n     *\n     *         SELECT id,name,age,sex,height,birthday from student_tb where age = #&#123;age&#125; and sex = #&#123;sex&#125;\n     * @param age\n     * @param sex\n     * @return\n     */\n     List&lt;Student&gt; findStudentByAgeAndSex(@Param(&quot;age&quot;) int age, @Param(&quot;sex&quot;) String sex);\n\n</code></pre>\n<pre><code> &lt;!--\n        多参数查询 findStudentByAgeAndSex(int age,String sex);\n    --&gt;\n    &lt;select id=&quot;findStudentByAgeAndSex&quot; resultType=&quot;com.qfedu.entity.Student&quot;&gt;\n        SELECT id,name,age,sex,height,birthday from student_tb where age = #&#123;age&#125; and sex = #&#123;sex&#125;\n    &lt;/select&gt;\n</code></pre>\n<p>3. 使用 map 解决</p>\n<pre><code>  /**\n     * 根据年龄 和性别 查询\n     * @param map\n     * @return\n     */\n    List&lt;Student&gt; findStudentByAgeAndSex2(Map&lt;String,Object&gt; map);\n\n</code></pre>\n<pre><code>    &lt;!--\n      where age = #&#123;age&#125; and sex = #&#123;sex&#125; 获取请求参数 Map&lt;String,Object&gt; map 中的属性\n    --&gt;\n    &lt;select id=&quot;findStudentByAgeAndSex2&quot; resultType=&quot;com.qfedu.entity.Student&quot;&gt;\n        SELECT id,name,age,sex,height,birthday from student_tb where age = #&#123;age&#125; and sex = #&#123;sex&#125;\n    &lt;/select&gt;\n\n</code></pre>\n<h5 id=\"如果是mybatis-34以后的版本包括35版本不存在多参数找不到问题\"><a class=\"anchor\" href=\"#如果是mybatis-34以后的版本包括35版本不存在多参数找不到问题\">#</a> 如果是 mybatis 3.4 以后的版本（包括 3.5 版本）不存在多参数找不到问题！！！！！！！！！</h5>\n<pre><code>&lt;!-- MyBatis依赖启动器 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.0.0&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230902120033936.png\" alt=\"image-20230902120033936\" /></p>\n<p>可以直接使用 既可</p>\n<pre><code>\n    /**\n     * 根据 年龄和性别 查询\n     *\n\n     * @param age\n     * @param sex\n     * @return\n     */\n     List&lt;Student&gt; findStudentByAgeAndSex(int age,  String sex);\n\n</code></pre>\n<p>​</p>\n<pre><code>    &lt;!--\n        多参数查询 findStudentByAgeAndSex(int age,String sex);\n    --&gt;\n    &lt;select id=&quot;findStudentByAgeAndSex&quot; resultType=&quot;com.qfedu.entity.Student&quot;&gt;\n        SELECT id,name,age,sex,height,birthday from student_tb where age = #&#123;age&#125; and sex = #&#123;sex&#125;\n    &lt;/select&gt;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230902120701604.png\" alt=\"image-20230902120701604\" /></p>\n<h4 id=\"typealiases别名\"><a class=\"anchor\" href=\"#typealiases别名\">#</a> typeAliases 别名</h4>\n<pre><code>#配置别名 统一为当前包下的实体类取别名 别名为类名 首字母也可以小写\n#  com.qfedu.entity.Student   别名  Student  student\nmybatis.type-aliases-package=com.qfedu.entity\n</code></pre>\n<pre><code>    &lt;!--\n        &lt;select标签 表示内部sql用于查询\n             id=&quot;findAllStudent&quot; 表示该查询对应哪个方法\n              resultType=&quot;com.qfedu.entity.Student&quot; 配置的类型是将查询结果的每一行 转化为那种类型的对象\n\n         resultType=&quot;Student&quot; 使用别名配置需要转换的类型\n         resultType=&quot;student&quot;\n    --&gt;\n    &lt;select id=&quot;findAllStudent&quot; resultType=&quot;student&quot;&gt;\n        SELECT id,name,age,sex,height,birthday from student_tb\n    &lt;/select&gt;\n</code></pre>\n<h3 id=\"查询的结果集一般都要使用实体类接收其实也可以使用map接收\"><a class=\"anchor\" href=\"#查询的结果集一般都要使用实体类接收其实也可以使用map接收\">#</a> 查询的结果集，一般都要使用实体类接收，其实也可以使用 Map 接收</h3>\n<p>适用于查询结果和实体类不照应情况</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230902145450495.png\" alt=\"image-20230902145450495\" /></p>\n<p>dao 接口</p>\n<pre><code> /**\n     * 查询 性别 对应的平均身高  年龄\n     * @return\n     */\n    List&lt;Map&gt; getAvgAgeAndHeightBySex();\n\n</code></pre>\n<p>映射</p>\n<pre><code>    &lt;!--\n        resultType=&quot;map&quot; 将查询的结果集使用map接收\n    --&gt;\n    &lt;select id=&quot;getAvgAgeAndHeightBySex&quot; resultType=&quot;map&quot;&gt;\n\n        SELECT  sex,AVG(height) avg_height ,AVG(age) avg_age FROM student_tb GROUP BY sex;\n    &lt;/select&gt;\n\n</code></pre>\n<p>测试</p>\n<pre><code>\n    /**\n     * 根据性别查询平局年龄 身高\n     */\n    @Test\n    public void  getAvgAgeAndHeightBySexTest()&#123;\n\n        List&lt;Map&gt; mapList = studentDao.getAvgAgeAndHeightBySex();\n\n        for (Map map : mapList) &#123;\n            System.out.println(&quot;map = &quot; + map);\n        &#125;\n\n    &#125;\n</code></pre>\n<h2 id=\"65-orm映射\"><a class=\"anchor\" href=\"#65-orm映射\">#</a> 6.5 ORM 映射</h2>\n<hr />\n<h3 id=\"651-mybatis自动orm失效\"><a class=\"anchor\" href=\"#651-mybatis自动orm失效\">#</a> 6.5.1 MyBatis 自动 ORM 失效</h3>\n<p><img data-src=\"springboot-01-class.assets/image-20230902150512399.png\" alt=\"image-20230902150512399\" /></p>\n<h4 id=\"开启驼峰映射\"><a class=\"anchor\" href=\"#开启驼峰映射\">#</a> 开启驼峰映射</h4>\n<p>在配置文件开启驼峰映射</p>\n<pre><code>#开启驼峰写法\n# 如果查询结果集 列名自动转换为驼峰  student_info ===&gt; studentInfo 此时可以自动映射属性\nmybatis.configuration.map-underscore-to-camel-case=true\n\n</code></pre>\n<p>直接使用</p>\n<pre><code>    &lt;!--\n        解决列名映射 不一致问题：\n                1.使用驼峰 自动映射\n    --&gt;\n    &lt;select id=&quot;findAllStudent&quot; resultType=&quot;student&quot;&gt;\n        SELECT id,name,age,sex,height,birthday,student_info from student_tb\n    &lt;/select&gt;\n</code></pre>\n<h4 id=\"列的别名\"><a class=\"anchor\" href=\"#列的别名\">#</a> 列的别名</h4>\n<blockquote>\n<p>在 SQL 中使用 as 为查询字段添加列别名，以匹配属性名。</p>\n</blockquote>\n<pre><code>    &lt;!--\n        解决列名映射 不一致问题：\n                1.使用驼峰 自动映射\n                2.使用列的别名   student_info as studentInfo\n    --&gt;\n    &lt;select id=&quot;findAllStudent&quot; resultType=&quot;student&quot;&gt;\n        SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb\n    &lt;/select&gt;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230902151158288.png\" alt=\"image-20230902151158288\" /></p>\n<h3 id=\"结果映射resultmap-查询结果的封装规则\"><a class=\"anchor\" href=\"#结果映射resultmap-查询结果的封装规则\">#</a> 结果映射（ResultMap - 查询结果的封装规则）</h3>\n<blockquote>\n<p>通过 &lt;resultMap id=&quot;&quot;type=&quot;&quot;&gt; 映射，匹配列名与属性名。</p>\n</blockquote>\n<p>dao 接口</p>\n<pre><code> /**\n     * 查询所有学生\n     * @return\n     */\n    List&lt;Student&gt; findAllStudent2();\n</code></pre>\n<p>映射</p>\n<pre><code>    &lt;!--\n        &lt;resultMap 声明一个自定义映射 可以将查询结果集的列名  和 实体属性名 进行手动一一映射，还可以解决一对一 一对多问题\n\n             &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;  &lt;id 对应表的主键列 将表中主键id列 映射到实体类属性id\n                            column=&quot;id&quot; 查询结果集的列名\n                             property=&quot;id&quot; java实体类属性id\n              &lt;result column=&quot;name&quot; property=&quot;name&quot;&gt;&lt;/result&gt; &lt;result 指定普通列的映射\n                            column=&quot;name&quot;       查询结果集的列名\n                             property=&quot;name&quot;    java实体类属性name\n    --&gt;\n    &lt;resultMap id=&quot;studentMap1&quot; type=&quot;com.qfedu.entity.Student&quot;&gt;\n\n        &lt;!-- 如果 结果集的列和 属性名一致，也可以省略--&gt;\n        &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;\n        &lt;result column=&quot;name&quot; property=&quot;name&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;age&quot; property=&quot;age&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;sex&quot; property=&quot;sex&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;height&quot; property=&quot;height&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;&gt;&lt;/result&gt;\n\n        &lt;!-- 此时完成 查询结果集列名student_info  和实体类studentInfo 映射  --&gt;\n        &lt;result column=&quot;student_info&quot; property=&quot;studentInfo&quot;&gt;&lt;/result&gt;\n\n    &lt;/resultMap&gt;\n\n    &lt;!--\n        resultMap=&quot;studentMap1&quot; 使用自定义的resultMap进行 映射\n    --&gt;\n    &lt;select id=&quot;findAllStudent2&quot; resultMap=&quot;studentMap1&quot;&gt;\n        SELECT id,name,age,sex,height,birthday,student_info  from student_tb\n    &lt;/select&gt;\n\n</code></pre>\n<p>测试</p>\n<pre><code>\n    /**\n     *    @Test 表示当前方法是单元测试方法\n     *       方法必须是 public void  而且无参\n     */\n    @Test\n    public void findAllStudent2Test()&#123;\n\n        List&lt;Student&gt; allStudent = studentDao.findAllStudent2();\n        System.out.println(&quot;allStudent = &quot; + allStudent);\n    &#125;\n\n</code></pre>\n<h2 id=\"66mybatis多表查询\"><a class=\"anchor\" href=\"#66mybatis多表查询\">#</a> 6.6mybatis 多表查询</h2>\n<p>mybatis 将多张表关联的查询结果，映射到 java 的实体类中</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230904104732900.png\" alt=\"image-20230904104732900\" /></p>\n<h4 id=\"多表查询分为两种\"><a class=\"anchor\" href=\"#多表查询分为两种\">#</a> 多表查询分为两种</h4>\n<ul>\n<li>一对一</li>\n</ul>\n<p>一个成绩归属于一个学生</p>\n<pre><code>SELECT a.id,a.course,a.score,a.student_id,b.id sid , b.name,b.sex,b.age,b.height,b.birthday,b.student_info \n\t\tFROM score_tb a LEFT JOIN student_tb b on a.student_id = b.id;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230904105141177.png\" alt=\"image-20230904105141177\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230904105324578.png\" alt=\"image-20230904105324578\" /></p>\n<ul>\n<li>一对多</li>\n</ul>\n<p>一个学生可以有多个成绩</p>\n<pre><code>SELECT a.id,a.name, a.sex,a.age,a.height,a.birthday,a.student_info,\n\t     b.id sid,b.course,b.score,b.student_id \n\tFROM student_tb a LEFT JOIN score_tb b on a.id = b.student_id\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230904105808301.png\" alt=\"image-20230904105808301\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230904110106271.png\" alt=\"image-20230904110106271\" /></p>\n<h3 id=\"一对一实战\"><a class=\"anchor\" href=\"#一对一实战\">#</a> 一对一实战</h3>\n<p><img data-src=\"springboot-01-class.assets/image-20230904111659281.png\" alt=\"image-20230904111659281\" /></p>\n<p>1. 创建实体类</p>\n<pre><code>package com.qfedu.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Score  implements Serializable &#123;\n\n    private int id;\n\n    private String course;\n\n    private float score;\n\n    private int studentId;\n\n    private Student student;\n\n&#125;\n\n</code></pre>\n<p>2.ScoreDao 接口</p>\n<pre><code>package com.qfedu.dao;\n\nimport com.qfedu.entity.Score;\n\nimport java.util.List;\n\npublic interface ScoreDao &#123;\n\n\n    /**\n     * 一对一查询\n     *      查询所有成绩 并包含归属的学生信息\n     * @return\n     */\n    List&lt;Score&gt; findAllScoreWithStudent();\n\n&#125;\n\n</code></pre>\n<p>3. 对应的映射</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.qfedu.dao.ScoreDao&quot;&gt;\n\n\n    &lt;resultMap id=&quot;scoreMap1&quot; type=&quot;com.qfedu.entity.Score&quot;&gt;\n        &lt;!-- 左表的映射--&gt;\n        &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;\n        &lt;result column=&quot;course&quot; property=&quot;course&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;score&quot; property=&quot;score&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;student_id&quot; property=&quot;studentId&quot;&gt;&lt;/result&gt;\n        &lt;!--\n            右表映射\n                 &lt;association 完成一对一的右表映射\n                 property=&quot;student&quot; 要设置到Score中的属性\n                  column=&quot;student_id&quot; 对应左表和右表关联的左边关联的列\n                   javaType=&quot;com.qfedu.entity.Student&quot; 将查询的右表转化为一个对象\n        --&gt;\n        &lt;association property=&quot;student&quot; column=&quot;student_id&quot; javaType=&quot;com.qfedu.entity.Student&quot;&gt;\n                &lt;id column=&quot;student_id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;\n                &lt;result column=&quot;name&quot; property=&quot;name&quot;&gt;&lt;/result&gt;\n                &lt;result column=&quot;sex&quot; property=&quot;sex&quot;&gt;&lt;/result&gt;\n                &lt;result column=&quot;age&quot; property=&quot;age&quot;&gt;&lt;/result&gt;\n                &lt;result column=&quot;height&quot; property=&quot;height&quot;&gt;&lt;/result&gt;\n                &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;&gt;&lt;/result&gt;\n                &lt;result column=&quot;student_info&quot; property=&quot;studentInfo&quot;&gt;&lt;/result&gt;\n\n        &lt;/association&gt;\n\n    &lt;/resultMap&gt;\n\n    &lt;!-- 一对一查询\n          使用resultMap 完成查询结果的映射\n    --&gt;\n    &lt;select id=&quot;findAllScoreWithStudent&quot; resultMap=&quot;scoreMap1&quot;&gt;\n\n        SELECT a.id,a.course,a.score,a.student_id,b.id sid , b.name,b.sex,b.age,b.height,b.birthday,b.student_info\n        FROM score_tb a LEFT JOIN student_tb b on a.student_id = b.id;\n\n    &lt;/select&gt;\n\n&lt;/mapper&gt;\n</code></pre>\n<p>4 测试</p>\n<pre><code>package com.qfedu;\n\nimport com.qfedu.dao.ScoreDao;\nimport com.qfedu.entity.Score;\nimport lombok.AllArgsConstructor;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.util.List;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MybatisTest &#123;\n\n\n    @Autowired\n    private ScoreDao scoreDao;\n\n\n    /**\n     * 一对一映射\n     */\n    @Test\n    public void findAllScoreWithStudentTest()&#123;\n\n\n        List&lt;Score&gt; allScoreWithStudent = scoreDao.findAllScoreWithStudent();\n\n        for (Score score : allScoreWithStudent) &#123;\n            System.out.println(&quot;score = &quot; + score);\n        &#125;\n\n    &#125;\n\n\n\n\n&#125;\n</code></pre>\n<pre><code>\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230904113512626.png\" alt=\"image-20230904113512626\" /></p>\n<h3 id=\"一对多实战\"><a class=\"anchor\" href=\"#一对多实战\">#</a> 一对多实战</h3>\n<p><img data-src=\"springboot-01-class.assets/image-20230904142510126.png\" alt=\"image-20230904142510126\" /></p>\n<p>1. 在 Student 实体类增加属性</p>\n<pre><code>package com.qfedu.entity;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * @Setter\n * @Getter\n * @ToString\n * 以上三个等价于@Data\n */\n@Data  //自动生成 set get toString方法\n@AllArgsConstructor// 所有参数构造方法\n@NoArgsConstructor // 无惨构造\npublic class Student implements Serializable &#123;\n\n    private int id;\n\n    private String name;\n\n    private int  age;\n\n    private String sex;\n\n    private float height;\n\n    //只要遇到时间都加时间转换注解\n    @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;,timezone = &quot;GMT+8&quot;) //响应 1.当处理器方法返回对象时，将java.utils.Date 转化为对应的字符串 2023-08-31\n    //接收   2.如果前端提交的json字符串 使用java对象接收    字符串2023-08-31 转化为java.utils.Date类型\n    @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;) // 将前端提交的键值对的时间字符串2023-08-31 转化为java.utils.Date类型\n    private Date birthday;\n\n    // 此时 studentInfo和 数据表中的字段不一致\n    private  String studentInfo;\n\n\n\n    private  List&lt;Score&gt; scoreList;\n\n\n&#125;\n\n</code></pre>\n<p>2.StudentDao</p>\n<pre><code>package com.qfedu.dao;\n\nimport com.qfedu.entity.Student;\n\nimport java.util.List;\n\npublic interface StudentDao &#123;\n\n    /**\n     * 查询所有学生 并包含对应的成绩\n     * @return\n     */\n    List&lt;Student&gt; findAllStudentWithScore();\n\n&#125;\n\n</code></pre>\n<p>3. 映射 StudentDao.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.qfedu.dao.StudentDao&quot;&gt;\n\n\n    &lt;resultMap id=&quot;studentMap1&quot; type=&quot;com.qfedu.entity.Student&quot;&gt;\n        &lt;!-- 配置左表 学生表--&gt;\n        &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;\n        &lt;result column=&quot;name&quot; property=&quot;name&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;sex&quot; property=&quot;sex&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;age&quot; property=&quot;age&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;height&quot; property=&quot;height&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;&gt;&lt;/result&gt;\n        &lt;result column=&quot;student_info&quot; property=&quot;studentInfo&quot;&gt;&lt;/result&gt;\n\n        &lt;!--  映射右表\n            collection 配置一对多的右表，将多行右表中的结果转化为集合\n                property=&quot;scoreList&quot; 对应Student属性的成绩集合\n                column=&quot;id&quot; 左表关联的列\n                ofType=&quot;com.qfedu.entity.Score&quot; 表示同一个学生对应的每一个成绩转化为一个Score对象 放置到list集合中\n\n\n        --&gt;\n        &lt;collection property=&quot;scoreList&quot; column=&quot;id&quot; ofType=&quot;com.qfedu.entity.Score&quot; &gt;\n            &lt;id column=&quot;sid&quot; property=&quot;id&quot;&gt;&lt;/id&gt;\n            &lt;result column=&quot;course&quot; property=&quot;course&quot;&gt;&lt;/result&gt;\n            &lt;result column=&quot;score&quot; property=&quot;score&quot;&gt;&lt;/result&gt;\n            &lt;!--  一对多  关联的列 尽量使用右表的值  --&gt;\n            &lt;result column=&quot;student_id&quot;   property=&quot;studentId&quot;&gt;&lt;/result&gt;\n        &lt;/collection&gt;\n\n    &lt;/resultMap&gt;\n\n    &lt;select id=&quot;findAllStudentWithScore&quot; resultMap=&quot;studentMap1&quot;&gt;\n        SELECT a.id,a.name, a.sex,a.age,a.height,a.birthday,a.student_info,\n               b.id sid,b.course,b.score,b.student_id\n        FROM student_tb a LEFT JOIN score_tb b on a.id = b.student_id\n    &lt;/select&gt;\n\n\n\n&lt;/mapper&gt;\n</code></pre>\n<p>4. 测试</p>\n<pre><code>   @Autowired\n    private StudentDao studentDao;\n\n\n    /**\n     * 一对多查询\n     */\n    @Test\n    public void  findAllStudentWithScoreTest()&#123;\n\n        List&lt;Student&gt; allStudentWithScore = studentDao.findAllStudentWithScore();\n\n        for (Student student : allStudentWithScore) &#123;\n            System.out.println(&quot;student = &quot; + student);\n        &#125;\n    &#125;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230904144117365.png\" alt=\"image-20230904144117365\" /></p>\n<h3 id=\"多对多\"><a class=\"anchor\" href=\"#多对多\">#</a> 多对多</h3>\n<p><img data-src=\"springboot-01-class.assets/image-20230904150753100.png\" alt=\"image-20230904150753100\" /></p>\n<p>查询所有的角色并包含对应的学生 列表</p>\n<p>左表是角色 右表，学生角色中间表 学生表</p>\n<pre><code>SELECT * from role_tb \n\nSELECT * from role_tb  r LEFT JOIN  student_role_tb sr on r.roleid=\n\t\tsr.roleid\n\nSELECT r.*,s.* from role_tb  r \n\t\tLEFT JOIN  student_role_tb sr on r.roleid=sr.roleid\n    LEFT JOIN  student_tb s  on  sr.studentid = s.id\n\t\t\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230904151435067.png\" alt=\"image-20230904151435067\" /></p>\n<p>1. 创建 Role 实体类</p>\n<pre><code>package com.qfedu.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Role implements Serializable &#123;\n\n    private int roleId;\n\n    private String roleName;\n\n    private List&lt;Student&gt; studentList;\n\n&#125;\n\n</code></pre>\n<p>2.RoleDao</p>\n<pre><code>package com.qfedu.dao;\n\nimport com.qfedu.entity.Role;\n\nimport java.util.List;\n\npublic interface RoleDao &#123;\n\n    /**\n     * 多对多中的一对多\n     * 查询所有角色 包含对应成绩\n     * @return\n     */\n  List&lt;Role&gt; findAllRoleWithStudent();\n\n&#125;\n\n</code></pre>\n<p>3.RoleDao.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.qfedu.dao.RoleDao&quot;&gt;\n\n\n    &lt;resultMap id=&quot;roleMap1&quot; type=&quot;com.qfedu.entity.Role&quot;&gt;\n        &lt;!-- 左表映射--&gt;\n        &lt;id column=&quot;roleid&quot; property=&quot;roleId&quot;&gt;&lt;/id&gt;\n        &lt;result column=&quot;rolename&quot; property=&quot;roleName&quot;&gt;&lt;/result&gt;\n\n        &lt;!-- 右表映射\n              column=&quot;roleid&quot; 对应左表的关联列\n        --&gt;\n        &lt;collection property=&quot;studentList&quot; column=&quot;roleid&quot; ofType=&quot;com.qfedu.entity.Student&quot;&gt;\n            &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;\n            &lt;result column=&quot;name&quot; property=&quot;name&quot;&gt;&lt;/result&gt;\n            &lt;result column=&quot;sex&quot; property=&quot;sex&quot;&gt;&lt;/result&gt;\n            &lt;result column=&quot;age&quot; property=&quot;age&quot;&gt;&lt;/result&gt;\n            &lt;result column=&quot;height&quot; property=&quot;height&quot;&gt;&lt;/result&gt;\n            &lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;&gt;&lt;/result&gt;\n            &lt;result column=&quot;student_info&quot; property=&quot;studentInfo&quot;&gt;&lt;/result&gt;\n        &lt;/collection&gt;\n    &lt;/resultMap&gt;\n\n    &lt;select id=&quot;findAllRoleWithStudent&quot; resultMap=&quot;roleMap1&quot;&gt;\n\n        SELECT r.*,s.* from role_tb  r\n                                LEFT JOIN  student_role_tb sr on r.roleid=sr.roleid\n                                LEFT JOIN  student_tb s  on  sr.studentid = s.id\n    &lt;/select&gt;\n\n&lt;/mapper&gt;\n</code></pre>\n<p>4. 测试</p>\n<pre><code> @Autowired\n    private RoleDao roleDao;\n\n    /**\n     * 多对多测试\n     */\n    @Test\n    public void findAllRoleWithStudentTest()&#123;\n\n        List&lt;Role&gt; allRoleWithStudent = roleDao.findAllRoleWithStudent();\n\n        for (Role role : allRoleWithStudent) &#123;\n            System.out.println(&quot;role = &quot; + role);\n        &#125;\n\n    &#125;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230904152234520.png\" alt=\"image-20230904152234520\" /></p>\n<h2 id=\"67mybatis-的动态-sql-语句\"><a class=\"anchor\" href=\"#67mybatis-的动态-sql-语句\">#</a> 6.7Mybatis 的动态 SQL 语句</h2>\n<h3 id=\"671动态sql语句if\"><a class=\"anchor\" href=\"#671动态sql语句if\">#</a> 6.7.1 动态 sql 语句 &lt;if&gt;</h3>\n<p>在后台管理系统中，经常遇到多条件查询</p>\n<p>1. 查询所有学生</p>\n<pre><code> SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb\n</code></pre>\n<p>2. 按照性别查询所有学生</p>\n<pre><code> SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb where\n sex = #&#123;sex&#125;\n</code></pre>\n<p>3. 按照姓名模糊查询学生</p>\n<pre><code> SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb where\n name like #&#123;name&#125;\n</code></pre>\n<p>4. 按照性别 姓名查询学生</p>\n<pre><code> SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb where\n name like #&#123;name&#125;  and sex = #&#123;sex&#125;\n</code></pre>\n<p>以上查询我们可以在一个 sql 中完成，通过动态 sql  &lt;if&gt; 标签进项 sql 的动态拼接</p>\n<pre><code> SELECT id,name,age,sex,height,birthday,student_info as studentInfo \n\t\t\tfrom student_tb WHERE  1=1  \n\t\t\t\t\tAND sex = 'F'\n          AND name like '%洋%'\n</code></pre>\n<h4 id=\"实战-3\"><a class=\"anchor\" href=\"#实战-3\">#</a> 实战</h4>\n<p>1.StudentDao 增加</p>\n<pre><code>   /**\n     * 按照条件查询所有学生\n     *  Student student 封装查询条件\n     * @param student\n     * @return\n     */\n    List&lt;Student&gt; findStudentByCondition(Student student);\n\n</code></pre>\n<p>2. 对应映射</p>\n<pre><code>\n    &lt;!--按照条件查询\n          &lt;if test=&quot;name !=null and name!=''&quot;&gt;  动态sql\n                            测试参数name不为null 不等于空  如果条件成立，拼接内部sql\n                                    AND name like #&#123;name&#125;\n    --&gt;\n    &lt;select id=&quot;findStudentByCondition&quot; resultType=&quot;com.qfedu.entity.Student&quot;&gt;\n        SELECT id,name,age,sex,height,birthday,student_info as studentInfo\n                from student_tb WHERE  1=1\n         &lt;if test=&quot;name !=null and name!=''&quot;&gt;\n             AND name like #&#123;name&#125;\n         &lt;/if&gt;\n        &lt;if test=&quot;sex !=null and sex!=''&quot;&gt;\n            AND sex = #&#123;sex&#125;\n        &lt;/if&gt;\n         \n\n    &lt;/select&gt;\n</code></pre>\n<p>3 测试</p>\n<pre><code>\n    /**\n     * 多条件查询学生\n     *  动态sql &lt;if\n     */\n    @Test\n    public void  findStudentByConditionTest()&#123;\n\n        Student student = new Student();\n\n        // 如果student的属性都为null  执行：SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb WHERE 1=1\n\n        student.setName(&quot;%洋%&quot;); // 此时执行sql  SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb WHERE 1=1 AND name like ?\n\n        student.setSex(&quot;F&quot;); // 此时执行sql  SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb WHERE 1=1 AND name like ? AND sex = ?\n\n        List&lt;Student&gt; studentList = studentDao.findStudentByCondition(student);\n        System.out.println(&quot;studentList = &quot; + studentList);\n\n    &#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230904161817961.png\" alt=\"image-20230904161817961\" /></p>\n<h3 id=\"672动态sql语句-where-where\"><a class=\"anchor\" href=\"#672动态sql语句-where-where\">#</a> 6.7.2 动态 sql 语句 &lt;where&gt; &lt;/where&gt;</h3>\n<p>&lt;where&gt; &lt;/where &gt; 可以替代 sql 语句中的 where  1=1</p>\n<pre><code>&lt;!--按照条件查询\n          &lt;if test=&quot;name !=null and name!=''&quot;&gt;  动态sql\n                            测试参数name不为null 不等于空  如果条件成立，拼接内部sql\n                                    AND name like #&#123;name&#125;\n\n             &lt;where&gt; 本质： 1.等价于 where   1=1\n                           2.自动将第一个and 去掉\n    --&gt;\n    &lt;select id=&quot;findStudentByCondition&quot; resultType=&quot;com.qfedu.entity.Student&quot;&gt;\n        SELECT id,name,age,sex,height,birthday,student_info as studentInfo\n                from student_tb\n                &lt;where&gt;\n                    &lt;if test=&quot;name !=null and name!=''&quot;&gt;\n                        AND name like #&#123;name&#125;\n                    &lt;/if&gt;\n                    &lt;if test=&quot;sex !=null and sex!=''&quot;&gt;\n                        AND sex = #&#123;sex&#125;\n                    &lt;/if&gt;\n                &lt;/where&gt;\n         \n\n    &lt;/select&gt;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230904162247837.png\" alt=\"image-20230904162247837\" /></p>\n<h3 id=\"673动态语句foreach-foreach\"><a class=\"anchor\" href=\"#673动态语句foreach-foreach\">#</a> 6.7.3 动态语句 &lt;foreach&gt; &lt;/foreach&gt;</h3>\n<p>&lt;foreach&gt; 标签是为解决 mybatis 接受集合参数设置的。适用场景如下</p>\n<pre><code># 根据id列表查询\n SELECT id,name,age,sex,height,birthday,student_info as studentInfo \n\t\t\tfrom student_tb WHERE id in (1,3,5,7,9)\n</code></pre>\n<p>1. 创建接口</p>\n<pre><code>\n    /**\n     * 根据id列表 查询学生\n     * @Param(&quot;ids&quot;) List&lt;Integer&gt; ids 使用@Param(&quot;ids&quot;)  解决动态sql 无法获取问题\n     * @param ids\n     * @return\n     */\n    List&lt;Student&gt; findStudentByIds(@Param(&quot;ids&quot;) List&lt;Integer&gt; ids);\n</code></pre>\n<p>2 映射</p>\n<pre><code>\n    &lt;!--\n        # 根据id列表查询\n SELECT id,name,age,sex,height,birthday,student_info as studentInfo\n\t\t\tfrom student_tb WHERE id in (1,3,5,7,9)\\\n\n\t      &lt;foreach collection=&quot;ids&quot; item=&quot;id&quot;&gt;\n\t            collection=&quot;ids&quot;  遍历集合的参数名\n\t            item=&quot;id&quot; 遍历集合中的每一个赋值给id\n\t             open=&quot;and id in (&quot; 拼接的开头\n\t             close=&quot;)&quot; 拼接的结尾\n\t             separator=&quot;,&quot; 每隔元素的分割\n\t                    #&#123;id&#125; 获取赋值的id变量\n\n    --&gt;\n    &lt;select id=&quot;findStudentByIds&quot; resultType=&quot;com.qfedu.entity.Student&quot;&gt;\n        SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb\n        &lt;where&gt;\n              \n            &lt;if test=&quot;ids !=null and ids.size()&gt;0&quot;&gt;\n\n                    &lt;foreach collection=&quot;ids&quot; item=&quot;id&quot; open=&quot;and id in (&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;\n                            #&#123;id&#125;\n                    &lt;/foreach&gt;\n\n            &lt;/if&gt;\n\n        &lt;/where&gt;\n\n    &lt;/select&gt;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230904163059324.png\" alt=\"image-20230904163059324\" /></p>\n<p>3. 测试</p>\n<pre><code>\n    /**\n     * 根据id 列表查询\n     * 动态sql &lt;foreach&gt;&lt;/foreach&gt;\n     */\n    @Test\n    public void findStudentByIdsTest()&#123;\n\n        List&lt;Integer&gt; ids = new ArrayList&lt;&gt;();\n\n        ids.add(1);\n        ids.add(3);\n        ids.add(5);\n        ids.add(7);\n        ids.add(9);\n\n        // 执行sql  SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb WHERE id in ( ? , ? , ? , ? , ? )\n\n        List&lt;Student&gt; studentList = studentDao.findStudentByIds(ids);\n        System.out.println(&quot;studentList = &quot; + studentList);\n    &#125;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230904163729547.png\" alt=\"image-20230904163729547\" /></p>\n<h3 id=\"674动态语句sql-sql\"><a class=\"anchor\" href=\"#674动态语句sql-sql\">#</a> 6.7.4 动态语句 &lt;sql&gt; &lt;/sql&gt;</h3>\n<p>在 xml 配置我们可以通过 &lt;sql&gt; 完成语句的声明，通过 &lt; include&gt; 标签进行应用拼接</p>\n<p>&lt;sql&gt;  抽离公共的 sql</p>\n<p>&lt;include&gt; 引用公共的 sql</p>\n<pre><code>&lt;!--\n        声明一个公共的sql id=&quot;student_select_sql1&quot;\n    --&gt;\n    &lt;sql id=&quot;student_select_sql1&quot;&gt;\n        SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb\n    &lt;/sql&gt;\n\n    &lt;!--\n        # 根据id列表查询\n SELECT id,name,age,sex,height,birthday,student_info as studentInfo\n\t\t\tfrom student_tb WHERE id in (1,3,5,7,9)\\\n\n\t      &lt;foreach collection=&quot;ids&quot; item=&quot;id&quot;&gt;\n\t            collection=&quot;ids&quot;  遍历集合的参数名\n\t            item=&quot;id&quot; 遍历集合中的每一个赋值给id\n\t             open=&quot;and id in (&quot; 拼接的开头\n\t             close=&quot;)&quot; 拼接的结尾\n\t             separator=&quot;,&quot; 每隔元素的分割\n\t                    #&#123;id&#125; 获取赋值的id变量\n\n          &lt;include refid=&quot;student_select_sql1&quot;&gt;&lt;/include&gt; 引用公共的sql\n    --&gt;\n    &lt;select id=&quot;findStudentByIds&quot; resultType=&quot;com.qfedu.entity.Student&quot;&gt;\n        &lt;include refid=&quot;student_select_sql1&quot;&gt;&lt;/include&gt;\n        &lt;where&gt;\n              \n            &lt;if test=&quot;ids !=null and ids.size()&gt;0&quot;&gt;\n\n                    &lt;foreach collection=&quot;ids&quot; item=&quot;id&quot; open=&quot;and id in (&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;\n                            #&#123;id&#125;\n                    &lt;/foreach&gt;\n\n            &lt;/if&gt;\n\n        &lt;/where&gt;\n\n    &lt;/select&gt;\n\n</code></pre>\n<h2 id=\"68事务\"><a class=\"anchor\" href=\"#68事务\">#</a> 6.8 事务</h2>\n<p>事务：保证多条 sql 执行时，要么都成功，要么有一条失败，成功的要回滚</p>\n<p>jdbc 开启事务</p>\n<pre><code>1.开启事务 /关闭自动提交\n2.执行sql 一系列sql\n3.提交事务\n\t如果有异常需要回滚\n\n\n以上事务的完成都是基于connection 链接\n\n完成事务的本质是 ：多条sql都在同一个connection 链接中执行并提交事务 \n\n</code></pre>\n<p>事务四大特性：</p>\n<p>原子性：：保证多条 sql 执行时，要么都成功，要么有一条失败，成功的要回滚</p>\n<p>​                 不可再分</p>\n<p>一致性： 事务执行前后，整体一致</p>\n<p>​\t\t\t\t 以转账为例 转账前后总金额没有变化</p>\n<p>隔离性： 多个 sqlSession 之间互补影响</p>\n<p>​\t\t        一个事务不可以不去读取到另一个事务未提交数据</p>\n<p>持久性： 掉电不丢失，重启之后数据还在</p>\n<p>mybatis 开启事务</p>\n<pre><code>   /**\n     * 测试事务\n     *  一次性删除两条数据，保证数据一致性\n     *  @Transactional 标记在方法上，一般是在service层的方法 开启事务\n     *                  本质：该方法调用的所有的dao方法 执行都使用同一个sqlSession(连接) 提交事务 回滚事务\n     */\n    @Test\n    @Transactional\n    public void deleteStudentByIdsTest()&#123;\n\n        int num1 = studentDao.deleteStudentById(3);\n\n        // 故意抛出异常\n        int i = 1/0;\n\n        int num2 = studentDao.deleteStudentById(5);\n\n\n        System.out.println(&quot;num1 = &quot; + num1);\n        System.out.println(&quot;num2 = &quot; + num2);\n\n    &#125;\n</code></pre>\n<p>一般来说在 Service 层开启事务</p>\n<pre><code>package com.qfedu.controller;\n\nimport com.qfedu.service.StudentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Controller\npublic class StudentController &#123;\n\n\n    @Autowired\n    private StudentService studentService;\n\n    @RequestMapping(&quot;/deleteStudentByIds&quot;)\n    public Map&lt;String,Object&gt; deleteStudentByIds(int id1, int id2)&#123;\n\n\n        studentService.deleteStudentByIds(id1, id2);\n\n        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();\n\n        map.put(&quot;code&quot;,1);\n        map.put(&quot;msg&quot;,&quot;ok&quot;);\n\n        return map;\n\n    &#125;\n\n\n&#125;\n\n</code></pre>\n<pre><code>package com.qfedu.service.impl;\n\nimport com.qfedu.dao.StudentDao;\nimport com.qfedu.service.StudentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\npublic class StudentServiceImpl  implements StudentService &#123;\n\n    @Autowired\n    private StudentDao studentDao;\n\n    @Transactional //开启事务  一般都在service层\n    @Override\n    public void deleteStudentByIds(int id1, int id2) &#123;\n\n        int num1 = studentDao.deleteStudentById(id1);\n\n        // 故意抛出异常\n        int i = 1/0;\n\n        int num2 = studentDao.deleteStudentById(id2);\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"68-缓存cache面试\"><a class=\"anchor\" href=\"#68-缓存cache面试\">#</a> 6.8 缓存 (cache)【面试】</h2>\n<p><strong>前提：mybatis 只要使用一级 二级缓存，对应映射的实体类都要实现序列化</strong></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230905095807550.png\" alt=\"image-20230905095807550\" /></p>\n<blockquote>\n<p>缓存主要目的是为了 <code>提高查询效率</code> 。缓存其实就是一个内存空间，存储在程序的某个地方，存储数据.</p>\n<p>mybatis 支持缓存的，且有两级缓存</p>\n<ul>\n<li>一级缓存</li>\n<li>二级缓存</li>\n</ul>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>无缓存：用户在访问相同数据时，需要发起多次对数据库的直接访问，导致产生大量 IO、读写硬盘的操作，效率低下</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img data-src=\"https://qiushiju-tuchuang.oss-cn-hangzhou.aliyuncs.com/image/image-20230601165546620.png\" alt=\"image-20230601165546620\" /></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>有缓存：首次访问时，查询数据库，将数据存储到缓存中；再次访问时，直接访问缓存，减少 IO、硬盘读写次数、提高效率</td>\n</tr>\n<tr>\n<td>------------------------------------------------------------</td>\n</tr>\n<tr>\n<td><img data-src=\"https://qiushiju-tuchuang.oss-cn-hangzhou.aliyuncs.com/image/image-20230601165610966.png\" alt=\"image-20230601165610966\" /></td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"springboot-01-class.assets/image-20230905095240935.png\" alt=\"image-20230905095240935\" /></p>\n<h3 id=\"681-一级缓存\"><a class=\"anchor\" href=\"#681-一级缓存\">#</a> 6.8.1 一级缓存</h3>\n<blockquote>\n<p>MyBatis 的 <code>一级缓存是默认的</code> 。无需配置，自动实现.</p>\n<p>默认的 <code>一级缓存是SqlSession（链接）级别</code> ，是指同一个 SqlSession 发起的多次查询同一条数据，会使用缓存.</p>\n</blockquote>\n<p><img data-src=\"springboot-01-class.assets/image-20230905095552145.png\" alt=\"image-20230905095552145\" /></p>\n<p>ps: Mybatis 内部存储缓存使用的是一个 HashMap 对象，key 为 hashCode + sqlId + sql 语句。而 value 值就是从查询出来映射生成的 java 对象。</p>\n<h4 id=\"实战-4\"><a class=\"anchor\" href=\"#实战-4\">#</a> 实战</h4>\n<pre><code>\n    /**\n     * 测试一级缓存\n     *      一级缓存基于sqlSession存储\n     *      只要 发生增删改 缓存清空  避免数据出现混乱，缓存数据和数据库数据不一致问题\n     */\n    @Transactional // 只有开启事务才能让多个sql 共享同一个sqlSession ，共享一级缓存\n    @Test\n    public void  cacheTest1()&#123;\n\n        System.out.println(&quot;第一次查询&quot;);\n        Student student1 = studentDao.findStudentById(3);\n        System.out.println(&quot;student1=&quot;+student1);\n\n        System.out.println(&quot;第二次查询&quot;);\n        Student student2 = studentDao.findStudentById(3);\n        System.out.println(&quot;student2=&quot;+student2);\n\n        System.out.println(&quot;执行 删除操作清除缓存&quot;);\n        int num = studentDao.deleteStudentById(1000);\n        System.out.println(&quot;num = &quot; + num);\n\n\n\n        System.out.println(&quot;第三次查询&quot;);\n        Student student3 = studentDao.findStudentById(3);\n        System.out.println(&quot;student3=&quot;+student3);\n\n\n\n    &#125;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230905100542026.png\" alt=\"image-20230905100542026\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230905101046963.png\" alt=\"image-20230905101046963\" /></p>\n<h3 id=\"682-二级缓存\"><a class=\"anchor\" href=\"#682-二级缓存\">#</a> 6.8.2 二级缓存</h3>\n<blockquote>\n<p><code>二级缓存是Mapper级别</code> ，比 SqlSession 级别范围更大.</p>\n<ul>\n<li>\n<p>需要在 mapper 中设置 caceh 即可</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cache</span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ul>\n<li>映射语句文件中的所有 select 语句的结果将会被缓存。</li>\n<li>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"实战-5\"><a class=\"anchor\" href=\"#实战-5\">#</a> 实战</h4>\n<p>1. 开启二级缓存</p>\n<pre><code>&lt;!-- 开启二级缓存\n         type=&quot;&quot; 用于自定义二级缓存 \n         size=&quot;1000&quot;表示当前mapper(命名空间下)最多存储 1000条数据\n          flushInterval=&quot;60000&quot;  配置缓存有效期 没个60s 都会自动清空缓存一次\n                                   尽可能保证数据的新鲜 保证一致性\n           eviction=&quot;FIFO&quot;  缓存满了以后 淘汰策略\n                            FIFO 最先缓存 最先删除\n                            LRU 最近最少使用原则                        \n           \n    --&gt;\n    &lt;cache size=&quot;1000&quot; flushInterval=&quot;60000&quot; eviction=&quot;LRU&quot; &gt;&lt;/cache&gt;\n</code></pre>\n<p>2. 配置实体类映射序列化</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230905105730179.png\" alt=\"image-20230905105730179\" /></p>\n<p>3. 测试二级缓存</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230905110652473.png\" alt=\"image-20230905110652473\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230905111021631.png\" alt=\"image-20230905111021631\" /></p>\n<pre><code>/**\n * 测试二级缓存\n *    二级缓存是基于mapper(namespace)的，多个sqlSession 也可以从二级缓存获取数据\n */\n@Test\npublic void cacheTest2()&#123;\n\n    // 1.查询   并且提交二级缓存（事务提交）\n    System.out.println(&quot;----第一次查询&quot;);\n    startTransaction();\n\n    System.out.println(&quot;----第二次查询&quot;);\n    Student student2 = studentDao.findStudentById(3);\n    System.out.println(&quot;student2 = &quot; + student2);\n\n\n    System.out.println(&quot;发生增删改清空 一级缓存，二级缓存&quot;);\n    studentDao.deleteStudentById(1000);\n\n    System.out.println(&quot;----第三次查询&quot;);\n    Student student3 = studentDao.findStudentById(3);\n    System.out.println(&quot;student3 = &quot; + student3);\n\n\n&#125;\n\n\n/*\n        开启事务,方法结束，提交事务（将查询结果提交二级缓存）\n */\n@Transactional\npublic void startTransaction()&#123;\n    Student student1 =   studentDao.findStudentById(3);\n    System.out.println(&quot;student1 = &quot; + student1);\n&#125;\n</code></pre>\n<h3 id=\"683mybatis-一级缓存-二级缓存优先级\"><a class=\"anchor\" href=\"#683mybatis-一级缓存-二级缓存优先级\">#</a> 6.8.3mybatis 一级缓存 二级缓存优先级</h3>\n<p>一级缓存 ：基于 sqlSession</p>\n<p>二级缓存：基于 mapper (namespace)    多个 sqlSession 可以从二级缓存获取数据</p>\n<p>结论：二级缓存  优先于 一级缓存</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230905113609342.png\" alt=\"image-20230905113609342\" /></p>\n<h2 id=\"69-注解方式整合mybatis了解\"><a class=\"anchor\" href=\"#69-注解方式整合mybatis了解\">#</a> 6.9 注解方式整合 Mybatis [了解]</h2>\n<p>mybatis 的注解开发不是主流形式，只能开发最简的增删改查，复杂一些的一对一，一对多，就很难阅读</p>\n<h3 id=\"691-mapper接口\"><a class=\"anchor\" href=\"#691-mapper接口\">#</a> 6.9.1 Mapper 接口</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 将 dao 接口加入到 spring 容器两种方式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *    1. 在 dao 接口上加入 @Mapper 注解</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *    2. 在启动类上加入 @MapperScan (\"com.qfedu.dao\") 注解</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span> <span class=\"token comment\">// 将 mybatis 生成 dao 接口的实现类加入容器中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StudentDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span>  <span class=\"token function\">deleteStudentById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Student</span> <span class=\"token function\">findStudentById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"692-添加mybatis注解\"><a class=\"anchor\" href=\"#692-添加mybatis注解\">#</a> 6.9.2 添加 Mybatis 注解</h3>\n<blockquote>\n<p>针对增删改查：@Insert，@Delete，@Update，@Select</p>\n<p>还是需要在启动类中添加 @MapperScan 注解</p>\n</blockquote>\n<pre><code>package com.qfedu.dao;\n\nimport com.qfedu.entity.Student;\nimport org.apache.ibatis.annotations.*;\n\nimport java.util.List;\n\n/**\n * mybatis  基于注解的开发\n *  @Insert，@Delete，@Update，@Select\n */\n@CacheNamespace // 注解开启二级缓存\npublic interface StudentDao2 &#123;\n\n\n    @Select(value = &quot;  SELECT id,name,age,sex,height,birthday,student_info from student_tb &quot;)\n    List&lt;Student&gt; findAllStudent();\n\n\n    /**\n     * 根据id 查询\n     * @param id\n     * @return\n     */\n    @Select(&quot; SELECT id,name,age,sex,height,birthday ,student_info from student_tb where id = #&#123;id&#125;&quot;)\n    Student findStudentById(int id);\n\n\n    /**\n     * 插入学生\n     * @param student\n     * @return\n     */\n    @Insert(value = &quot;INSERT INTO  student_tb (name,age,sex,height,birthday) VALUES (#&#123;name&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;height&#125;,#&#123;birthday&#125; )&quot;)\n    int addStudent(Student student);\n\n\n    /**\n     * 更新学生\n     * @param student\n     * @return\n     */\n    @Update(&quot;UPDATE student_tb set name = #&#123;name&#125; ,age = #&#123;age&#125;,sex=#&#123;sex&#125;,height = #&#123;height&#125; ,birthday = #&#123;birthday&#125; WHERE id = #&#123;id&#125;&quot;)\n    int updateStudentById(Student student);\n\n    /**\n     * 根据id 删除\n     * @param id\n     * @return\n     */\n    @Delete(&quot; delete from student_tb WHERE id = #&#123;id&#125;&quot;)\n    int deleteStudentById(int id);\n\n\n&#125;\n\n</code></pre>\n<p>测试</p>\n<pre><code>\n    @Autowired\n    private StudentDao2 studentDao2;\n    /**\n     * mybatis 基于注解开发\n     */\n    @Test\n    public void  annotationTest()&#123;\n\n        List&lt;Student&gt; allStudent = studentDao2.findAllStudent();\n        System.out.println(&quot;allStudent = &quot; + allStudent);\n\n\n        Student student = studentDao2.findStudentById(10);\n        System.out.println(&quot;student = &quot; + student);\n\n\n        Student student2 = new Student();\n\n        student2.setName(&quot;蓝猫&quot;);\n        student2.setSex(&quot;M&quot;);\n        student2.setHeight(180);\n        student2.setBirthday(new Date());\n        student2.setAge(1);\n\n        // 增加\n        int num2 = studentDao2.addStudent(student2);\n        System.out.println(&quot;num2 = &quot; + num2);\n\n        // 删除\n        int num3 = studentDao2.deleteStudentById(10);\n        System.out.println(&quot;num3 = &quot; + num3);\n\n\n    &#125;\n\n</code></pre>\n<h2 id=\"610pagehelper使用\"><a class=\"anchor\" href=\"#610pagehelper使用\">#</a> 6.10pagehelper 使用</h2>\n<p>select * from student_tb   limit  (pageIndex-1)*pageSize,pageSize</p>\n<p>1. 引入依赖</p>\n<pre><code>        &lt;!--pagehelper--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;\n            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;1.2.9&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>2. 配置</p>\n<pre><code>#pagehelper配置\npagehelper.helper-dialect=mysql\npagehelper.page-size-zero=true\n</code></pre>\n<p>3. 使用 pagehelper</p>\n<p>StudentService</p>\n<pre><code>    /**\n     * 分页查询\n     * @param pageIndex\n     * @param pageSize\n     * @return\n     */\n    List&lt;Student&gt; getAllStudentByPage(int pageIndex, int pageSize);\n\n</code></pre>\n<p>对应实现 StudentServiceImpl</p>\n<pre><code>@Override\n    public List&lt;Student&gt; getAllStudentByPage(int pageIndex, int pageSize) &#123;\n\n        // 使用分页 本质就是在后续查询语句之后 追加  limit (pageIndex-1)*pageSize,pageSize\n        PageHelper.startPage(pageIndex,pageSize);\n\n        // 执行sql    SELECT id,name,age,sex,height,birthday,student_info as studentInfo from student_tb  limit (pageIndex-1)*pageSize,pageSize\n        // 查询所有 就会自动配置分页  limit (pageIndex-1)*pageSize,pageSize\n        List&lt;Student&gt; allStudent = studentDao.findAllStudent();\n\n\n        // pageInfo 封装所有的分页信息\n        // 获取总页数 总行数\n        PageInfo&lt;Student&gt; pageInfo = new PageInfo&lt;&gt;(allStudent);\n\n        System.out.println(&quot;总行数 pageInfo.getTotal() = &quot; + pageInfo.getTotal());\n        System.out.println(&quot;总页数 pageInfo.getPages() = &quot; + pageInfo.getPages());\n        System.out.println(&quot;每页数量 pageInfo.ge = &quot; + pageInfo.getSize());\n\n\n        return allStudent;\n    &#125;\n</code></pre>\n<p>处理器方法</p>\n<pre><code>\n    /**\n     * url  /getAllStudentByPage?pageIndex=1&amp;pageSize=10\n     * @param pageIndex\n     * @param pageSize\n     * @return\n     */\n    @RequestMapping(&quot;/getAllStudentByPage&quot;)\n    @ResponseBody\n    public List&lt;Student&gt; getAllStudentByPage(int pageIndex,int pageSize)&#123;\n\n\n        // 分页查询\n        List&lt;Student&gt; allStudentByPage = studentService.getAllStudentByPage(pageIndex, pageSize);\n\n        return allStudentByPage;\n\n    &#125;\n</code></pre>\n<p>练习：按照性别 姓名模糊查询   分页实现</p>\n<h1 id=\"七-jquery-ajax\"><a class=\"anchor\" href=\"#七-jquery-ajax\">#</a> 七、jQuery AJAX</h1>\n<hr />\n<h2 id=\"71-jquery-ajax简介\"><a class=\"anchor\" href=\"#71-jquery-ajax简介\">#</a> 7.1 jQuery AJAX 简介</h2>\n<blockquote>\n<ul>\n<li>\n<p>AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</p>\n</li>\n<li>\n<p>简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示。</p>\n</li>\n<li>\n<p>使用 AJAX 的应用程序案例：谷歌地图、腾讯微博、优酷视频、人人网等等。</p>\n</li>\n</ul>\n</blockquote>\n<p><img data-src=\"springboot-01-class.assets/image-20230905160808687.png\" alt=\"image-20230905160808687\" /></p>\n<h4 id=\"实战-6\"><a class=\"anchor\" href=\"#实战-6\">#</a> 实战</h4>\n<p>1. 修改 login 处理方法 返回 json 数据</p>\n<pre><code>package com.qfedu.controller;\n\n\nimport com.qfedu.entity.Admin;\nimport com.qfedu.entity.R;\nimport com.qfedu.service.AdminService;\nimport org.apache.catalina.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n/**\n * admin 管理员用户相关\n */\n@Controller\npublic class AdminController &#123;\n\n    @Autowired\n    private AdminService adminService;\n\n    /**\n     * url  /login?username=liu&amp;password=123456\n     * 登录\n     */\n    @RequestMapping(&quot;/login&quot;)\n    @ResponseBody\n    public R&lt;Admin&gt; login(String username, String password) &#123;\n\n\n        System.out.println(&quot;username = &quot; + username);\n        System.out.println(&quot;password = &quot; + password);\n\n        Admin admin = adminService.login(username, password);\n\n        R&lt;Admin&gt; r = new R&lt;&gt;();\n        if (admin!=null)&#123; // 登录成功\n\n            r.setCode(1);\n            r.setMsg(&quot;success&quot;);\n            r.setData(admin);\n        &#125;else &#123;\n            r.setCode(0);\n            r.setMsg(&quot;用户名 或者 密码错误&quot;);\n        &#125;\n\n        return r;\n    &#125;\n\n\n&#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230905162032510.png\" alt=\"image-20230905162032510\" /></p>\n<p>2. 修改前端登录界面</p>\n<p>在 static 目录导入 jquery</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230905163054755.png\" alt=\"image-20230905163054755\" /></p>\n<p>login.html 使用 get 发起 ajax 请求</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n    &lt;!-- 引入jquery--&gt;\n    &lt;script src=&quot;js/jquery-3.4.1.min.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;登录&lt;/h1&gt;\n&lt;!--\n\n--&gt;\n&lt;form  enctype=&quot;application/x-www-form-urlencoded&quot;&gt;\n    &lt;!--  name=&quot;username&quot;表单提交时 username 就是key value就是input的输入值--&gt;\n    username:&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot;&gt;&lt;br&gt;\n    password:&lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot;&gt;&lt;br&gt;\n    &lt;input type=&quot;button&quot; value=&quot;登录&quot;  onclick=&quot;login()&quot;&gt;\n&lt;/form&gt;\n\n&lt;div id=&quot;msg&quot;&gt;&lt;/div&gt;\n\n&lt;!-- js 代码块--&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n\n    function login()&#123;\n\n        // 获取input 输入框的值\n        var username = $(&quot;#username&quot;).val();\n        var password = $(&quot;#password&quot;).val();\n\n        //打印\n        console.log(&quot;username:&quot;+username+&quot;---password:&quot;+password);\n\n        // $.get 通过jquery 发起get 请求\n        //  &quot;/login&quot; 请求的地址 url\n        //   &#123;username:username,password:password&#125; 提交的数据 js对象，后端接收的就是键值对\n        //   function (data) &#123;   &#125; 请求响应成功的回调函数  response就是处理器方法返回的json数据--&gt;js对象\n        //   &quot;json&quot;  将后端处理方法返回的json 直接转化js 对象\n        $.get(&quot;/login&quot;,&#123;username:username,password:password&#125;,function (response) &#123;// 处理服务正常返回的数据\n            alert(&quot;服务端正常数据&quot;);\n            // response  == 响应的R对象\n            alert(&quot;响应的数据：&quot;+JSON.stringify(response))\n\n            //得到后端响应数据\n\n            if (response.code == 1)&#123;\n                // 1.将数据异步展示到当前界面\n                // var admin = response.data;\n                // $(&quot;#msg&quot;).html(&quot;欢迎&quot;+admin.username+&quot;登录&quot;);\n\n                // 2.跳转欢迎页\n                window.location.href=&quot;/welcome.html&quot;;\n            &#125;else &#123;\n                alert(&quot;登录失败&quot;)\n            &#125;\n\n\n\n\n\n        &#125;,&quot;json&quot;).fail(function () &#123;\n            alert(&quot;服务端错误&quot;);\n        &#125;);\n\n    &#125;\n\n\n&lt;/script&gt;\n\n\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230905164059828.png\" alt=\"image-20230905164059828\" /></p>\n<p>3. 测试</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230905165048842.png\" alt=\"image-20230905165048842\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230905165109243.png\" alt=\"image-20230905165109243\" /></p>\n<h2 id=\"72-get和post方法\"><a class=\"anchor\" href=\"#72-get和post方法\">#</a> 7.2 get 和 post 方法</h2>\n<p>get 方式</p>\n<pre><code>  // $.get 通过jquery 发起get 请求\n        //  &quot;/login&quot; 请求的地址 url\n        //   &#123;username:username,password:password&#125; 提交的数据 js对象，后端接收的就是键值对\n        //   function (data) &#123;   &#125; 请求响应成功的回调函数  response就是处理器方法返回的json数据--&gt;js对象\n        //   &quot;json&quot;  将后端处理方法返回的json 直接转化js 对象\n        $.get(&quot;/login&quot;,&#123;username:username,password:password&#125;,function (response) &#123;// 处理服务正常返回的数据\n            alert(&quot;服务端正常数据&quot;);\n            // response  == 响应的R对象\n            alert(&quot;响应的数据：&quot;+JSON.stringify(response))\n\n            //得到后端响应数据\n\n            if (response.code == 1)&#123;\n                // 1.将数据异步展示到当前界面\n                // var admin = response.data;\n                // $(&quot;#msg&quot;).html(&quot;欢迎&quot;+admin.username+&quot;登录&quot;);\n\n                // 2.跳转欢迎页\n                window.location.href=&quot;/welcome.html&quot;;\n            &#125;else &#123;\n                alert(&quot;登录失败&quot;)\n            &#125;\n        &#125;,&quot;json&quot;).fail(function () &#123;\n            alert(&quot;服务端错误&quot;);\n        &#125;);\n</code></pre>\n<p>post</p>\n<pre><code>        // post请求方式   和get请求方式没有区别\n        $.post(&quot;/login&quot;,&#123;username:username,password:password&#125;,function (response) &#123;// 处理服务正常返回的数据\n            alert(&quot;服务端正常数据&quot;);\n            // response  == 响应的R对象\n            alert(&quot;响应的数据：&quot;+JSON.stringify(response))\n\n            //得到后端响应数据\n\n            if (response.code == 1)&#123;\n                // 1.将数据异步展示到当前界面\n                // var admin = response.data;\n                // $(&quot;#msg&quot;).html(&quot;欢迎&quot;+admin.username+&quot;登录&quot;);\n\n                // 2.跳转欢迎页\n                window.location.href=&quot;/welcome.html&quot;;\n            &#125;else &#123;\n                alert(&quot;登录失败&quot;)\n            &#125;\n        &#125;,&quot;json&quot;).fail(function () &#123;\n            alert(&quot;服务端错误&quot;);\n        &#125;);\n</code></pre>\n<p>综合方式 $.ajax</p>\n<pre><code> // 综合请求方式  可以get 也可以 post\n        $.ajax(&#123;\n            url:&quot;/login&quot;,\n            type:&quot;get&quot;,  // 请求方式 get  post\n            // data:&#123;username:username,password:password&#125;, // 提交的数据\n            data:$(&quot;#form1&quot;).serialize(),// $(&quot;#form1&quot;).serialize() 获取表单中所有input的数据值 == username=liu&amp;passwrod=123456\n            success:function (response) &#123;  //服务器成功返回的数据\n                    alert(&quot;服务端正常数据&quot;);\n                    // response  == 响应的R对象\n                    alert(&quot;响应的数据：&quot;+JSON.stringify(response))\n\n                    //得到后端响应数据\n\n                    if (response.code == 1)&#123;\n                        // 1.将数据异步展示到当前界面\n                        // var admin = response.data;\n                        // $(&quot;#msg&quot;).html(&quot;欢迎&quot;+admin.username+&quot;登录&quot;);\n\n                        // 2.跳转欢迎页\n                        window.location.href=&quot;/welcome.html&quot;;\n                    &#125;else &#123;\n                        alert(&quot;登录失败&quot;)\n                    &#125;\n            &#125;,\n            error:function (data) &#123;// 服务器返回失败的数据\n                alert(data);\n            &#125;,\n            //ajax 会将服务器返回的json字符串-----》js对象\n            dataType:&quot;json&quot;\n        &#125;);\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230906095531799.png\" alt=\"image-20230906095531799\" /></p>\n<h1 id=\"八-springboot常用配置重点\"><a class=\"anchor\" href=\"#八-springboot常用配置重点\">#</a> 八、SpringBoot 常用配置【 <code>重点</code> 】</h1>\n<h2 id=\"81-springboot的配置文件格式\"><a class=\"anchor\" href=\"#81-springboot的配置文件格式\">#</a> 8.1 SpringBoot 的配置文件格式</h2>\n<p>SpringBoot 的配置文件 （常用两种）</p>\n<ul>\n<li>application.properties</li>\n<li>application.yaml   /application.yml</li>\n</ul>\n<blockquote>\n<p>SpringBoot 的配置文件， <code>文件名必须是application</code> , 格式支持 <code>properties</code>  和 <code>yml</code> 。</p>\n</blockquote>\n<p>application.yaml 语法</p>\n<pre><code>   1. yml文件，会根据换行和缩进帮助咱们管理配置文件所在位置\n\n  2. yml文件，相比properties更轻量级一些\n\n  3. K: V 表示一对键值对(冒号: 后一定有一个空格)\n\n  4. 以空格的缩进来控制层级关系;只要是左对齐的都是属于一个层级的数据\n\n  5. 属性和值大小写敏感.\n</code></pre>\n<p>application.properties</p>\n<pre><code>server.port=8080\n</code></pre>\n<p>application.yaml</p>\n<p>原来的 application.properties . 语法使用 ： +  换行 替代， key 和 value 之间使用：空格 进行分割</p>\n<pre><code>server:\n\tport: 8080\n\n</code></pre>\n<p>示例 application.yaml</p>\n<pre><code>\n\n# 如果application.properties  和 application.yaml 都配置了同一属性，\n#  application.properties中属性优先级高\nserver:\n  port: 8090\n\n\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/java2310_1?serverTimezone=Asia/Shanghai&amp;useSSL=false\n    username: root\n    password: 123456\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      initial-size: 5\n      max-active: 10\n      min-idle: 3\n</code></pre>\n<h4 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意：</h4>\n<p>1. 如果 application.properties  和 application.yaml 都配置了同一属性，application.properties 中属性优先级高</p>\n<p>2.application.yaml key 和 value 之间 必有 :</p>\n<h2 id=\"82-多环境配置\"><a class=\"anchor\" href=\"#82-多环境配置\">#</a> 8.2 多环境配置</h2>\n<blockquote>\n<p>实际开发中，有三种环境：</p>\n<p>1. 开发环境 - 程序员日常开发所需   dev</p>\n<p>2. 测试环境 - 项目的集成测试      test</p>\n<p>3. 生产环境 - 最终项目部署的环境，真实环境   pro</p>\n</blockquote>\n<p>SpringBoot 支持多环境的配置。只需要根据环境需要，编写多个配置文件，通过配置属性选择使用哪个环境</p>\n<p>使用步骤：</p>\n<p>1. 多环境的配置文件命名：application - 环境名.yml   application - 环境名.properties</p>\n<p>​\t\t\tapplication-dev.yaml   application-dev.properties   开发环境</p>\n<p>​\t\t\tapplication-test.yaml   application-test.properties     测试环境</p>\n<p>​           application-prod.yaml   application-prod.properties   生产环境</p>\n<p>2. 在总文件 application.yml 中通过属性：spring.profiles.active 环境名</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906112146410.png\" alt=\"image-20230906112146410\" /></p>\n<h3 id=\"在默认配置文件激活多环境配置\"><a class=\"anchor\" href=\"#在默认配置文件激活多环境配置\">#</a> 在默认配置文件激活多环境配置</h3>\n<pre><code>#  dev 激活开发环境配置\n#  test 激活测试环境配置\n#   prod 激活生产环境配置\nspring.profiles.active=prod\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230906112536984.png\" alt=\"image-20230906112536984\" /></p>\n<h2 id=\"83-获取配置文件信息\"><a class=\"anchor\" href=\"#83-获取配置文件信息\">#</a> 8.3 获取配置文件信息</h2>\n<blockquote>\n<p>场景: ....</p>\n<p>解释：将 yml 配置的值，赋值给对应的类</p>\n<p>方案:</p>\n<ul>\n<li>\n<p>方案一: @ConfigurationProperties  批量读取配置文件的内容</p>\n</li>\n<li>\n<p>方案二: @Value     单个读取配置文件</p>\n</li>\n</ul>\n</blockquote>\n<p>1. 在默认文件配置</p>\n<p>application.properties 配置</p>\n<pre><code>aliyun.accessKey=ATYSBD23B1N44\naliyun.accessSecret=123456\n</code></pre>\n<p>application.yaml 配置</p>\n<pre><code># 阿里云的 key 和 秘钥\naliyun:\n  accessKey: ATYSBD23B1N44\n  accessSecret: 123456\n</code></pre>\n<p>2. 创建一个实体类 封装阿里云相关参数</p>\n<p>方式一批量读取</p>\n<pre><code>package com.qfedu.entity;\n\n\nimport lombok.Data;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport java.io.Serializable;\n\n/**\n * 加入到容器中的bean 初始化属性的两种方式\n *    1.批量初始化\n *          @ConfigurationProperties(prefix = &quot;aliyun&quot;)\n *          作用：批量读取配置文件中以 aliyun开头的属性，配置到对应创建bean的属性中\n *\n *    2. 单个读取属性\n */\n@ConfigurationProperties(prefix = &quot;aliyun&quot;)\n@Component // 创建一个该类型的bean 加入到容器\n@Data\npublic class AliYunProperties  implements Serializable &#123;\n\n\n\n    private String accessKey;\n\n    private String accessSecret;\n\n&#125;\n\n</code></pre>\n<p>方式二 单个读取配置文件的值</p>\n<pre><code>package com.qfedu.entity;\n\n\nimport lombok.Data;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport java.io.Serializable;\n\n/**\n * 加入到容器中的bean 初始化属性的两种方式\n *    1.批量初始化\n *          @ConfigurationProperties(prefix = &quot;aliyun&quot;)\n *          作用：批量读取配置文件中以 aliyun开头的属性，配置到对应创建bean的属性中\n *\n *    2. 单个读取属性\n */\n//@ConfigurationProperties(prefix = &quot;aliyun&quot;)\n@Component // 创建一个该类型的bean 加入到容器\n@Data\npublic class AliYunProperties  implements Serializable &#123;\n\n\n    // 访问阿里云的key\n    @Value(value = &quot;$&#123;aliyun.accessKey&#125;&quot;) // 单个读取配置文件aliyun.accessKey对应值赋值给当前属性 accessKey\n    private String accessKey;\n\n    // 访问阿里云 秘钥\n    @Value(&quot;$&#123;aliyun.accessSecret&#125;&quot;)\n    private String accessSecret;\n\n&#125;\n\n</code></pre>\n<p>3. 测试</p>\n<pre><code>\n    @Autowired\n    private AliYunProperties aliYunProperties;\n\n    /**\n     * 通过阿里云配置类 读取配置文件的属性\n     * @return\n     */\n    @RequestMapping(&quot;/getAliYunProperties&quot;)\n    @ResponseBody\n    public R&lt;AliYunProperties&gt; getAliYunProperties()&#123;\n\n          R&lt;AliYunProperties&gt; r = new R&lt;&gt;();\n\n          r.setCode(1);\n          r.setMsg(&quot;success&quot;);\n          r.setData(aliYunProperties);\n\n          return r;\n    &#125;\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230906113909279.png\" alt=\"image-20230906113909279\" /></p>\n<h2 id=\"84其他注解\"><a class=\"anchor\" href=\"#84其他注解\">#</a> 8.4 其他注解</h2>\n<h4 id=\"生成bean注解\"><a class=\"anchor\" href=\"#生成bean注解\">#</a> 生成 Bean 注解</h4>\n<p>@Controler  @Service    @Respository @Component</p>\n<pre><code>/**\n * @Controller 生成bean 加入到容器 ，默认名字（类名首字母小写 testController）\n * @Controller(value = &quot;testBean&quot;)  加入容器指定名字（id）testBean  \n * \n *   凡是加入到容器中的Bean 都存在ConcurrentHashMap 中 key 就是bean名字（id）\n *                                                 value 就是容器创建对象的引用地址\n * \n */\n@Controller(value = &quot;testBean&quot;)\npublic class TestController &#123;\n\n&#125;\n</code></pre>\n<p>@Bean 也可以生成注解 ，但是必须配合 @Configuration 使用</p>\n<pre><code>package com.qfedu.config;\n\nimport com.qfedu.entity.User;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * 创建一个配置类\n *  1使用@Bean标记在方法生 创建 明bean\n *  2.可以维护bean之间的依赖关系（后边会遇到）\n */\n@Configuration\npublic class MyConfig &#123;\n\n    /**\n     *  @Bean 就是给了我们一个后门，可以根据程序员的业务逻辑定制bean，最终由容器调用此方法创建 持有bean\n     *\n     *  @Bean 默认的名字（id）为 方法名getUser1\n     *\n     *   @Bean(value = &quot;user1&quot;) 创建一个bean 名字（id）就是user1,可以通过名字获取bean\n     *\n     * @return\n     */\n    @Bean(value = &quot;user1&quot;) // 表示容器启动时，会调用此方法得到一个bean，并且加入到容器\n    public User getUser1()&#123;\n        User user = new User();\n\n        user.setId(100);\n        user.setUsername(&quot;xiaoming&quot;);\n        user.setPassword(&quot;123456&quot;);\n\n        return user;\n    &#125;\n\n\n&#125;\n\n</code></pre>\n<p>从容器中获取 bean</p>\n<pre><code>   @Autowired\n    private User user;\n\n    @RequestMapping(&quot;/getUser&quot;)\n    @ResponseBody\n    public User getUser()&#123;\n\n        System.out.println(&quot;获取user&quot;);\n\n        return user;\n    &#125;\n</code></pre>\n<p>测试</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906144839666.png\" alt=\"image-20230906144839666\" /></p>\n<h4 id=\"如何识别多个同类型的bean-qualifier\"><a class=\"anchor\" href=\"#如何识别多个同类型的bean-qualifier\">#</a> 如何识别多个同类型的 Bean  @Qualifier</h4>\n<p>1. 容器中放入多个 User</p>\n<pre><code>package com.qfedu.config;\n\nimport com.qfedu.entity.User;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * 创建一个配置类\n *  1使用@Bean标记在方法生 创建 明bean\n *  2.可以维护bean之间的依赖关系（后边会遇到）\n */\n@Configuration\npublic class MyConfig &#123;\n\n    /**\n     *  @Bean 就是给了我们一个后门，可以根据程序员的业务逻辑定制bean，最终由容器调用此方法创建 持有bean\n     *\n     *  @Bean 默认的名字（id）为 方法名getUser1\n     *\n     *   @Bean(value = &quot;user1&quot;) 创建一个bean 名字（id）就是user1,可以通过名字获取bean\n     *\n     * @return\n     */\n    @Bean(value = &quot;user1&quot;) // 表示容器启动时，会调用此方法得到一个bean，并且加入到容器\n    public User getUser1()&#123;\n        User user = new User();\n\n        user.setId(100);\n        user.setUsername(&quot;xiaoming&quot;);\n        user.setPassword(&quot;123456&quot;);\n\n        return user;\n    &#125;\n\n\n\n    @Bean(value = &quot;user2&quot;) // 表示容器启动时，会调用此方法得到一个bean，并且加入到容器\n    public User getUser2()&#123;\n        User user = new User();\n\n        user.setId(100);\n        user.setUsername(&quot;xiaoming&quot;);\n        user.setPassword(&quot;123456&quot;);\n\n        return user;\n    &#125;\n\n\n\n\n&#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230906145121272.png\" alt=\"image-20230906145121272\" /></p>\n<p>2. 从容器中获取 Bean</p>\n<pre><code>\n    /**\n     *  @Autowired 从容器中获取同类型的Bean 注入进来\n     *      查找类型的逻辑：\n     *              1.根据类型从容器中获取bean,找到一个bean，直接注入\n     *                                      找到多个bean,无法区分\n     *                           2.如果无法区分，就会将属性名作为名字（id）从容器找到对应的 bean ，如果找到 则注入\n     *                                      3.如果找不到 ,就要使用注解   @Qualifier(value = &quot;user1&quot;)\n     *                                              明示当前属性需要从容器中获取那个bean\n     *\n     */\n    @Autowired\n    @Qualifier(value = &quot;user1&quot;)\n    private User user;\n\n    @RequestMapping(&quot;/getUser&quot;)\n    @ResponseBody\n    public User getUser()&#123;\n\n        System.out.println(&quot;获取user&quot;);\n\n        return user;\n    &#125;\n</code></pre>\n<h4 id=\"restcontroller\"><a class=\"anchor\" href=\"#restcontroller\">#</a> @RestController</h4>\n<p>@RestController 也是标记在类上，等价于 @ResponsBody +@Controller</p>\n<p>仅适用于：当前控制类下所有的处理器方法 都返回 json 数据</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906155036573.png\" alt=\"image-20230906155036573\" /></p>\n<pre><code>package com.qfedu.controller;\n\n\nimport com.qfedu.entity.R;\nimport com.qfedu.entity.Student;\nimport com.qfedu.service.StudentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n/**\n * @RestController 本质 == @Controller + @ResponseBody\n *          作用：1.加入到容器，生成Bean\n *               2.配置当前控制类下所有的处理器方法 都返回对象转json  处理器方法可以省略  @ResponseBody\n */\n@RestController\n//@Controller\npublic class StudentController &#123;\n\n\n    @Autowired\n    private StudentService studentService;\n\n    /**\n     * 根据id查询\n     * @param id\n     * @return\n     */\n    @RequestMapping(&quot;/findStudentById&quot;)\n//    @ResponseBody\n    public R&lt;Student&gt; findStudentById(int id)&#123;\n\n        Student student = studentService.findStudentById(id);\n\n        R&lt;Student&gt; r = new R&lt;&gt;();\n\n        r.setCode(1);\n        r.setMsg(&quot;success&quot;);\n        r.setData(student);\n\n        return r;\n    &#125;\n\n\n    /**\n     * 查询所有学生\n     * @return\n     */\n    @RequestMapping(&quot;/findAllStudent&quot;)\n//    @ResponseBody\n    public R&lt;List&lt;Student&gt;&gt; findAllStudent()&#123;\n\n        List&lt;Student&gt; allStudent = studentService.findAllStudent();\n\n        R&lt;List&lt;Student&gt;&gt; r = new R&lt;&gt;();\n\n        r.setCode(1);\n        r.setMsg(&quot;success&quot;);\n        r.setData(allStudent);\n\n        return r;\n    &#125;\n\n\n&#125;\n\n</code></pre>\n<h2 id=\"85debug\"><a class=\"anchor\" href=\"#85debug\">#</a> 8.5debug</h2>\n<p><img data-src=\"springboot-01-class.assets/image-20230906161002553.png\" alt=\"image-20230906161002553\" /></p>\n<h3 id=\"通过控制台报错分析\"><a class=\"anchor\" href=\"#通过控制台报错分析\">#</a> 通过控制台报错分析</h3>\n<p><img data-src=\"springboot-01-class.assets/image-20230906161402935.png\" alt=\"image-20230906161402935\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906161703972.png\" alt=\"image-20230906161703972\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906161916482.png\" alt=\"image-20230906161916482\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906162111703.png\" alt=\"image-20230906162111703\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906162200102.png\" alt=\"image-20230906162200102\" /></p>\n<p>结合错误原因 和 定位自己代表报错位置</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906162249029.png\" alt=\"image-20230906162249029\" /></p>\n<h3 id=\"使用断点调试-完成debug\"><a class=\"anchor\" href=\"#使用断点调试-完成debug\">#</a> 使用断点调试 完成 debug</h3>\n<h4 id=\"1前端debug\"><a class=\"anchor\" href=\"#1前端debug\">#</a> 1. 前端 debug</h4>\n<p><img data-src=\"springboot-01-class.assets/image-20230906162645733.png\" alt=\"image-20230906162645733\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906162901056.png\" alt=\"image-20230906162901056\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906163014733.png\" alt=\"image-20230906163014733\" /></p>\n<h4 id=\"2后端-idea-debug\"><a class=\"anchor\" href=\"#2后端-idea-debug\">#</a> 2. 后端 idea debug</h4>\n<p><img data-src=\"springboot-01-class.assets/image-20230906163123332.png\" alt=\"image-20230906163123332\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906163411616.png\" alt=\"image-20230906163411616\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906163638958.png\" alt=\"image-20230906163638958\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906163756101.png\" alt=\"image-20230906163756101\" /></p>\n<h4 id=\"3如果-前后debug-无法明确问题\"><a class=\"anchor\" href=\"#3如果-前后debug-无法明确问题\">#</a> 3. 如果 前后 debug 无法明确问题 ？</h4>\n<p>直接使用浏览器  或者 postman  发起请求，单独测试接口  ，确认是否后台接口报错   （缩小 bug 错误范围 ）</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906164305368.png\" alt=\"image-20230906164305368\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906164324689.png\" alt=\"image-20230906164324689\" /></p>\n<h4 id=\"4以上办法都不行\"><a class=\"anchor\" href=\"#4以上办法都不行\">#</a> 4. 以上办法都不行？</h4>\n<p>回到解放前：可以运行实例代码，或者将实例代码拷贝过来  对比测试</p>\n<h2 id=\"86-文件上传会用既可\"><a class=\"anchor\" href=\"#86-文件上传会用既可\">#</a> 8.6 文件上传（会用既可）</h2>\n<p>图片 / 文件上传</p>\n<p>上传 tomcat 服务器 / 上传本地磁盘</p>\n<p>1. 引入文件上传依赖</p>\n<pre><code>    &lt;!-- 使用工具类 --&gt;\n\t\t&lt;dependency&gt;\n            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;\n            &lt;version&gt;1.3.2&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-io&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\n            &lt;version&gt;2.4&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>2. 在 static 创建 file.html 使用 form 表单提交文件</p>\n<pre><code>&lt;!--\n    上传文件只可以是post 方式\n    \n    上传文件配置格式 enctype=&quot;multipart/form-data&quot; 将文件以二级制流传输\n--&gt;\n&lt;form action=&quot;/uploadImg&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n    图片：&lt;input type=&quot;file&quot; name=&quot;img&quot;&gt;&lt;br&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;\n&lt;/form&gt;\n\n</code></pre>\n<p>3. 接收提交的文件</p>\n<pre><code>package com.qfedu.controller;\n\nimport com.qfedu.entity.R;\nimport org.apache.commons.io.FileUtils;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Random;\nimport java.util.UUID;\n\n/**\n * 文件相关controler\n */\n@Controller\npublic class FileConTroller &#123;\n\n\n    /**\n     * 用于接收图片文件   MultipartFile img 对应form表单提交的name\n     *                   图片：&lt;input type=&quot;file&quot; name=&quot;img&quot;&gt;&lt;br&gt;\n     *\n     * @param img\n     * @return\n     */\n    @RequestMapping(&quot;/uploadFile&quot;)\n    public String uploadFile(MultipartFile img, HttpServletRequest request) throws IOException &#123;\n\n        //1.获取一个相对路径\n        // tomcat 真正加载资源的路径\n        String realPath = request.getServletContext().getRealPath(&quot;/upload&quot;);\n\n        System.out.println(&quot;realPath = &quot; + realPath);\n\n        // 存储文件的父路径\n        File file = new File(realPath);\n\n        // 2.如果路径不存在则创建\n        if (!file.exists())&#123;\n            file.mkdirs();\n        &#125;\n\n        // 3.得到文件的原始名字\n        String originalFilename = img.getOriginalFilename();\n\n        // 4.对文件重命名  防止文件被覆盖\n        String newFileName = UUID.randomUUID().toString() +&quot;-&quot;+originalFilename;\n        System.out.println(&quot;newFileName = &quot; + newFileName);\n\n        // 5.将接收到的文件流写入到 到文件中\n        //此时可以通过路径\n        // http://localhost:8080/upload/132dcfd0-c1b2-495d-a506-eb19e03b00e2-8900.jpg\n        FileUtils.writeByteArrayToFile(new File(file,newFileName),img.getBytes());\n\n        //6.跳转界面\n        return &quot;redirect:/success.html&quot;;\n\n    &#125;\n\n\n&#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230906174812725.png\" alt=\"image-20230906174812725\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906174844973.png\" alt=\"image-20230906174844973\" /></p>\n<h2 id=\"87-热加载了解\"><a class=\"anchor\" href=\"#87-热加载了解\">#</a> 8.7 热加载（了解）</h2>\n<p>可以配置 idea 中代码，修改以后自动编译部署（必须在 debug 模式）</p>\n<p>不建议搭建使用，因为有时候不生效</p>\n<h3 id=\"1导入依赖\"><a class=\"anchor\" href=\"#1导入依赖\">#</a> 1. 导入依赖</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-devtools<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"2配置settings配置\"><a class=\"anchor\" href=\"#2配置settings配置\">#</a> 2. 配置 settings 配置</h3>\n<p><img data-src=\"springboot-01-class.assets/image-20230906174133638.png\" alt=\"image-20230906174133638\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230906174203842.png\" alt=\"image-20230906174203842\" /></p>\n<h3 id=\"3使用-以-debug-模式启动-修改代码触发-热更新\"><a class=\"anchor\" href=\"#3使用-以-debug-模式启动-修改代码触发-热更新\">#</a> 3. 使用  以 debug 模式启动， 修改代码触发 热更新</h3>\n<pre><code>\n    @RequestMapping(&quot;/test1&quot;)\n    @ResponseBody\n    public R&lt;String&gt;  test1()&#123;\n\n\n        R&lt;String&gt; r = new R&lt;&gt;();\n\n        r.setCode(1);\n        r.setMsg(&quot;success&quot;);\n\n        System.out.println(&quot;test1-----123456&quot;);\n\n        return r;\n    &#125;\n\n</code></pre>\n<h1 id=\"九-springboot整合日志框架\"><a class=\"anchor\" href=\"#九-springboot整合日志框架\">#</a> 九、SpringBoot 整合日志框架</h1>\n<p>什么是日志？为什么需要日志？</p>\n<pre><code>sout  输出到控制台的文本信息 就是一种日志（log）\n其实日志，不但可以输出到控制台，还可以写入到文件中\n\n\n日志的作用：\n1.在控制台打印，可以快速的查看程序运行到哪里 记录业务逻辑，帮助我们调试\n2.日志记录到为文件 可以快速的帮助我们解决生产环境中遇到的问题 bug  所有的异常也会写入日志\n\n3.还可以通过日志 进行统计分析， 统计哪些接口并发量较大 ，哪些接口响应慢  此时可以针对性的优化\n            通过 elk  完成日志 分析\n\n\n\t\t\n\n\n</code></pre>\n<h2 id=\"80-日志\"><a class=\"anchor\" href=\"#80-日志\">#</a> 8.0 日志</h2>\n<blockquote>\n<p>作用:</p>\n<ol>\n<li>方便调试</li>\n<li>记录运行信息</li>\n<li>记录异常信息</li>\n</ol>\n<p>现在如何实现记录日志的呢</p>\n<ul>\n<li>sout 这个输出语句</li>\n</ul>\n<p>弊端</p>\n<ul>\n<li>无论什么情况，只要只要到此处输出语句一定执行</li>\n<li>只能输出控制台</li>\n<li>信息不完整</li>\n<li><strong>因为 sout 是加锁的，性能非常低</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"81-日志框架\"><a class=\"anchor\" href=\"#81-日志框架\">#</a> 8.1 日志框架</h2>\n<blockquote>\n<p><strong>slf4j</strong></p>\n<p>slf4j 只是一个日志标准，并不是日志系统的具体实现。它用于提供日志操作的接口，提供获取日志对象的方法</p>\n<p><strong>log4j</strong></p>\n<p>apache 实现的一个开源日志组件</p>\n<p><strong>logback</strong></p>\n<p>相对于 logback，有更好的特性， <code>springboot默认使用logback</code></p>\n<p><strong>log4j2</strong></p>\n<p><code>是 log4j的升级版本，拥有更好的性能，支持异步日志</code></p>\n<p>注意：slf4j 属于日志接口，log4j、logback、log4j2 属于日志实现</p>\n<p>springboot 默认使用 logcak 处理日志，但是通过使用通过<strong> slf4j</strong> 调用的</p>\n</blockquote>\n<h2 id=\"82-日志的等级\"><a class=\"anchor\" href=\"#82-日志的等级\">#</a> 8.2 日志的等级</h2>\n<blockquote>\n<p>日志级别按照从低到高为：</p>\n<p>ALL &lt; TRACE &lt; <strong> <code>DEBUG &lt; INFO &lt; WARN &lt; ERROR</code> </strong> &lt; FATAL &lt; OFF</p>\n<p>程序会打印高于或等于所设置级别的日志，设置的 ** <code>日志等级越高，打印出来的日志就越少</code>  **</p>\n<p>All：最低等级，会输出所有日志记录</p>\n<p>Trace：追踪，就是程序推进一下</p>\n<p>Debug：调试日志</p>\n<p>Info：消息日志，可用于输出应用程序的运行过程</p>\n<p>Warn：输出警告级别的日志</p>\n<p>Error：输出错误信息日志</p>\n<p>Fatal：输出每个严重的错误日志.</p>\n<p>OFF：最高等级的，用于关闭所有日志记录</p>\n</blockquote>\n<p>DEBUG：在开发阶段，帮助我们调试程序，而生产环境不需要记录日志   常见的就是配置 mybatis 的日志级别为 debug</p>\n<p>Info: 都是必要记录的日志</p>\n<h2 id=\"83springboot使用日志\"><a class=\"anchor\" href=\"#83springboot使用日志\">#</a> 8.3springboot 使用日志</h2>\n<h3 id=\"1配置文件配置日志\"><a class=\"anchor\" href=\"#1配置文件配置日志\">#</a> 1. 配置文件配置日志</h3>\n<pre><code>\n# 配置当前工程的日志默认级别info\nlogging.level.root=info\n\n#配置所有service层日志界别debug\nlogging.level.com.qfedu.service=debug\n\n#显示mybatis 日志 可以查看mybatis 的日志\nlogging.level.com.qfedu.dao=debug\n\n#配置日志记录的文件名字\nlogging.file=my.log\n</code></pre>\n<h3 id=\"2使用日志\"><a class=\"anchor\" href=\"#2使用日志\">#</a> 2. 使用日志</h3>\n<pre><code>package com.qfedu.controller;\n\n\nimport com.qfedu.entity.AliYunProperties;\nimport com.qfedu.entity.R;\nimport com.qfedu.entity.User;\nimport lombok.extern.slf4j.Slf4j;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * @Controller 生成bean 加入到容器 ，默认名字（类名首字母小写 testController）\n * @Controller(value = &quot;testBean&quot;)  加入容器指定名字（id）testBean\n *\n *   凡是加入到容器中的Bean 都存在ConcurrentHashMap 中 key 就是bean名字（id）\n *                                                 value 就是容器创建对象的引用地址\n *\n */\n@Slf4j // 作用就是在当前类中注入属性Logger log，\n        // 相当于Logger log  = LoggerFactory.getLogger(TestController.class);\n@Controller(value = &quot;testBean&quot;)\npublic class TestController &#123;\n\n    // 得到一个日志 对象，可以将日志输出到控制台，并写入到日志文件\n//   private Logger log  = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(&quot;/test1&quot;)\n    @ResponseBody\n    public R&lt;String&gt;  test1()&#123;\n\n\n        R&lt;String&gt; r = new R&lt;&gt;();\n\n        r.setCode(1);\n        r.setMsg(&quot;success&quot;);\n\n//        System.out.println(&quot;test1-----123456&quot;);\n\n        log.debug(&quot;test1-----debug&quot;);\n        log.info(&quot;test1-----info&quot;);\n        log.warn(&quot;test1-----warn&quot;);\n\n        return r;\n    &#125;\n\n    @Autowired\n    private AliYunProperties aliYunProperties;\n\n    /**\n     * 通过阿里云配置类 读取配置文件的属性\n     * @return\n     */\n    @RequestMapping(&quot;/getAliYunProperties&quot;)\n    @ResponseBody\n    public R&lt;AliYunProperties&gt; getAliYunProperties()&#123;\n\n          R&lt;AliYunProperties&gt; r = new R&lt;&gt;();\n\n          r.setCode(1);\n          r.setMsg(&quot;success&quot;);\n          r.setData(aliYunProperties);\n\n          return r;\n    &#125;\n\n    /**\n     *  @Autowired 从容器中获取同类型的Bean 注入进来\n     *      查找类型的逻辑：\n     *              1.根据类型从容器中获取bean,找到一个bean，直接注入\n     *                                      找到多个bean,无法区分\n     *                           2.如果无法区分，就会将属性名作为名字（id）从容器找到对应的 bean ，如果找到 则注入\n     *                                      3.如果找不到 ,就要使用注解   @Qualifier(value = &quot;user1&quot;)\n     *                                              明示当前属性需要从容器中获取那个bean\n     *\n     */\n    @Autowired\n    @Qualifier(value = &quot;user1&quot;) // 将user1 作为名字去容器中找对应的Bean\n    private User user;\n\n    @RequestMapping(&quot;/getUser&quot;)\n    @ResponseBody\n    public User getUser()&#123;\n\n        System.out.println(&quot;获取user&quot;);\n\n        return user;\n    &#125;\n\n&#125;\n\n</code></pre>\n<p><img data-src=\"springboot-01-class.assets/image-20230907095406312.png\" alt=\"image-20230907095406312\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230907095600247.png\" alt=\"image-20230907095600247\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230907095728968.png\" alt=\"image-20230907095728968\" /></p>\n<h3 id=\"3创建日志切面\"><a class=\"anchor\" href=\"#3创建日志切面\">#</a> 3. 创建日志切面</h3>\n<p><img data-src=\"springboot-01-class.assets/image-20230907103748105.png\" alt=\"image-20230907103748105\" /></p>\n<h4 id=\"实战-7\"><a class=\"anchor\" href=\"#实战-7\">#</a> 实战</h4>\n<p>1. 引入 aop 依赖</p>\n<pre><code>       &lt;!-- 导入aop相关 依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<p>2. 创建切面</p>\n<pre><code>package com.qfedu.aspect;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestAttributes;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport org.springframework.web.servlet.mvc.condition.RequestConditionHolder;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.Map;\n\n@Slf4j\n@Component\n@Aspect\npublic class LogAspect &#123;\n\n    /**\n     * 切点表达式\n     * public  R com.qfedu.controller.TestController.test1()\n     *\n     *   * com.qfedu.controller.*.*(..)\n     */\n    @Pointcut(value = &quot;execution( * com.qfedu.controller.*.*(..))&quot;)\n    public void pointCut()&#123;\n\n    &#125;\n\n\n    /**\n     * 环绕通知\n     * @param proceedingJoinPoint\n     * @return\n     */\n    @Around(value = &quot;pointCut()&quot;)\n    public Object around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;\n\n        // 获取请求的方法\n        String methodName = proceedingJoinPoint.getSignature().getName();\n\n        // 获取到当前请求的 的Request\n        // 客户端每次请求对应的url tomcat都会为本次请求创建一个线程，处理对应请求 并相应\n        //                       开辟一个线程调用对应的处理器方法、\n        //                       RequestContextHolder.getRequestAttributes() 获取当前请求线程中的request\n        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = requestAttributes.getRequest();\n\n\n        // 获取到该请求参数\n        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();\n\n        StringBuilder params = new StringBuilder();\n        for (String key : parameterMap.keySet()) &#123;\n            params.append(key);\n            params.append(&quot;=&quot;);\n            params.append(request.getParameter(key));\n            params.append(&quot;&amp;&quot;);\n        &#125;\n\n        // 获取对应的url\n        String url = request.getRequestURL().toString();\n\n\n        long startTime  = System.currentTimeMillis();\n        // 调用目标方法执行\n        Object result = proceedingJoinPoint.proceed();\n\n\n        long cost = System.currentTimeMillis() -startTime;\n\n        log.info(&quot;请求方法：&quot;+methodName +&quot;--请求url:&quot;+url + &quot;--请求参数：&quot;+params+&quot;--耗时:&quot;+cost);\n\n        return result;\n\n    &#125;\n\n&#125;\n\n</code></pre>\n<p>3 测试</p>\n<p><img data-src=\"springboot-01-class.assets/image-20230907110218557.png\" alt=\"image-20230907110218557\" /></p>\n<p><img data-src=\"springboot-01-class.assets/image-20230907110236031.png\" alt=\"image-20230907110236031\" /></p>\n<p>09:30---10:00  日志框架，日志级别</p>\n<p>0906</p>\n<p>09:40-10:00 配置文件 application.properties  application.yaml</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzOTY0OTIyMTY0Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693964922164.mp4</span></p>\n<p>11:07---11:44  多环境配置 ，读取配置文件属性</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzOTY5NjEyNjQ3Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693969612647.mp4</span></p>\n<p>14:20-15:00 @Bean   @Qualifier 注解</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzOTgyMTMyNDYyLm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693982132462.mp4</span></p>\n<p>15:30---15:50      @RestController</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzOTg1NjE2MzU5Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693985616359.mp4</span></p>\n<p>16:04  ----16:46  debug   断点调试</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzOTg3NjQyMDMxLm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693987642031.mp4</span></p>\n<p>17:10---17:50  文件上传  热更新</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzOTkxNzAwMTg1Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693991700185.mp4</span></p>\n<p>作业：</p>\n<p>1. 练习今日内容</p>\n<p>2. 将上周四 --- 今日所有 springboot  mybatis 相关内容 整理总结（写一个 md）</p>\n<p>0905</p>\n<p>09:45--10:10 一级缓存</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzODc4MzQ0Mzc5Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693878344379.mp4</span></p>\n<p>10：48--11: 30 mybatis 二级缓存</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzODg0NDY5ODU4Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693884469858.mp4</span></p>\n<p>14:36---15：00 分页</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzODk1NzU4MDI3Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693895758027.mp4</span></p>\n<p>15:41--- 16:59 登录示例 ajax</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzODk5NzI0MzY0Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693899724364.mp4</span></p>\n<p>17：30-17：50  ajax get post put 请求</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzOTA2OTIxNzI5Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693906921729.mp4</span></p>\n<p>作业：</p>\n<p>1. 将今日内容敲两边</p>\n<p>2. 完成 一个学生对应 多个角色的一对多</p>\n<p>3. 完成依赖两张表的 一对一 一对多</p>\n<pre><code>用户 ---&gt; 订单 (1 VS N)     一个用户有多个订单\n订单  ---&gt; 用户 (1 VS 1)    一个订单只会属于一个人\n</code></pre>\n<p>4. 复习 js jquery  css html</p>\n<p>今日作业：</p>\n<p>1. 将今日内容敲两边</p>\n<p>2. 完成 一个学生对应 多个角色的一对多</p>\n<p>3. 完成依赖两张表的 一对一 一对多</p>\n<pre><code>用户 ---&gt; 订单 (1 VS N)     一个用户有多个订单\n订单  ---&gt; 用户 (1 VS 1)    一个订单只会属于一个人\n</code></pre>\n<pre><code>tb_user表\n\n​```sql\nCREATE TABLE `tb_user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户编号',\n  `username` varchar(10) DEFAULT NULL COMMENT '用户名',\n  `password` varchar(10) DEFAULT NULL COMMENT '密码',\n  `phone` varchar(11) DEFAULT NULL COMMENT '手机号',\n  `create_time` date DEFAULT NULL COMMENT '注册时间',\n  `money` double(10,2) DEFAULT NULL COMMENT '账户余额'\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8;\n​```\n\ntb_order表\n\n​```sql\nCREATE TABLE `tb_order` (\n  `oid` int(11) NOT NULL AUTO_INCREMENT COMMENT '订单编号',\n  `order_time` datetime DEFAULT NULL COMMENT '订单时间',\n  `order_desc` varchar(255) DEFAULT NULL COMMENT '订单详情',\n  `uid` int(11) DEFAULT NULL COMMENT '关联用户id',\n  PRIMARY KEY (`oid`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n\nINSERT INTO `tb_order` VALUES (1, '2022-11-17 15:06:29', '笔记本电脑', 1);\nINSERT INTO `tb_order` VALUES (2, '2022-12-16 11:00:41', 'Cherry键盘', 1);\nINSERT INTO `tb_order` VALUES (3, '2022-12-16 11:01:23', 'Logi鼠标', 2);\n​```\n\n\n</code></pre>\n<p>4. 将今日所有内容 使用 controller  service  展示到浏览器中</p>\n<p>0904</p>\n<p>10:40---11:05  一对一 一对多概念</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNzk1MTQzNzkyLm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693795143792.mp4</span></p>\n<p>11:13-- 11:37   一对一</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNzk3MTg2NjkzLm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693797186693.mp4</span></p>\n<p>14:18--- 14:44   一对多</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzODA4MzI0MTM3Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693808324137.mp4</span></p>\n<p>14:55-15:22  多对多</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzODEwNzIwMDMzLm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693810720033.mp4</span></p>\n<p>16:00 ---16:45  动态 sql</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzODE0Mzk5MTk2Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693814399196.mp4</span></p>\n<p>周末作业：</p>\n<p>使用 springboot + mybatis 重写上周的作业 **（新建一个工程）**</p>\n<p>1. 登录例子</p>\n<p>2. 展示所有 admin</p>\n<ol start=\"3\">\n<li>完成 admin 使用 form 表单更新</li>\n<li>查询所有的学生表（仿照 admin 列表）</li>\n</ol>\n<p>5. 以下查询使用表格展示</p>\n<pre><code>- 1.查询所有年龄大于18 并且 性别为M 的学生列表   使用 BaseDao实现\n\n? 占位符 只能替换 对应列的值，不能替换列名，关键字\n\nSELECT id,name,age,sex,height,birthday ,createtime FROM student_tb\n    where  age &gt;? and sex = ?;\n</code></pre>\n<pre><code>- 2.查询所有成绩并包含学生信息   \n\n1.SELECT * FROM score_tb \n\t\tLEFT JOIN student_tb ON score_tb.student_id= student_tb.id ;\n\n\n2.使用BaseDao  实现，返回 List&lt;Map&gt; \n\n\n</code></pre>\n<p>本周学的内容</p>\n<p>springboot  替代了   Servlet</p>\n<p>mybattis      替代了 BaseDao  dbutils     （jdbc ）</p>\n<p>0902</p>\n<p>10:00--111 mybatis 增删改查</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNjIxNzgwNTc0Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693621780574.mp4</span></p>\n<p>14:30--15:20  mybatis 别名   映射结果集</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNjM3MTIzNTc1Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693637123575.mp4</span></p>\n<p>0901</p>\n<p>09:39----10:10 session  界面跳转，回话</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNTMyMzU5MDI0Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693532359024.mp4</span></p>\n<p>10:47----11:17  json 数据格式</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNTM2NDI2NjA1Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693536426605.mp4</span></p>\n<p>11:25---11:55 响应 json 数据 @ResponseBody，接收 json 数据 @RequesBody</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNTM4NjY4MTI4Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693538668128.mp4</span></p>\n<p>14:31---14:40    拦截器</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNTQ5OTEwNTIzLm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693549910523.mp4</span></p>\n<p>15-30-15:52 全局异常处理</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNTUzNjAyMDI3Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693553602027.mp4</span></p>\n<p>16:00--17:00 mybatis 入门 例子</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNTU1NTc5MDc4Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693555579078.mp4</span></p>\n<p>作业</p>\n<p>1. 将原有 demo 敲 2 遍</p>\n<p>2. 写一个切面 切向 dao 层</p>\n<p>3. 将周末 servlet + service + dao 改造为 springbot 写法  （20 分钟）</p>\n<p>0831</p>\n<p>10:37----aop 概念</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNDQ5NDM5NDQ1Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693449439445.mp4</span></p>\n<p>11:17---11:45 aop 实例</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNDUxNzkyMTYxLm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693451792161.mp4</span></p>\n<p>14:26--- 15：00  Aop 的五种通知</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNDYzMjA4ODc1Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693463208875.mp4</span></p>\n<p>15:48--- 16：10   @PostMapping  @GetMapping  请求方式</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNDY4MDgwNTAwLm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693468080500.mp4</span></p>\n<p>16：30---16：50 接收基本类型参数，  使用对象处理基本类型参数</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNDcwOTE3NDkxLm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693470917491.mp4</span></p>\n<p>17：32   接收基本类型参数，  使用 map 接收， 路径参数</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzNDc0MzM2NTc0Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693474336574.mp4</span></p>\n<p>0830</p>\n<p>09:40---10:35   本地分支合并冲突</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzMzU5OTMzMTM1Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693359933135.mp4</span></p>\n<p>10：40---10:56  远程分支合并本地分支冲突</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzMzYzMzU2ODg0Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693363356884.mp4</span></p>\n<p>11:10--12:00  提交远程代码冲突   代码协作</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzMzY0OTU4NTg3Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693364958587.mp4</span></p>\n<p>14:20--15:00  idea git 工具</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzMzc3MzU4Mjc5Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693377358279.mp4</span></p>\n<p>15:44-----16:20  springboot 简介 demo</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzMzgxNDM2MDA2Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693381436006.mp4</span></p>\n<p>16:36-----17:00     ioc demo</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZmxpdmUudmlkZW9jYy5uZXQvOTcwMjM1ZDYxYTE2ODg0MzM1MjUyODM1OTI1L3JlY29yZGZlLTk3MDIzNWQ2MWExNjg4NDMzNTI1MjgzNTkyNS0xNjkzMzgxNDM2MDA2LTIwMjMwODMwMTYzNjU0Lm1wNA==\">https://rflive.videocc.net/970235d61a16884335252835925/recordfe-970235d61a16884335252835925-1693381436006-20230830163654.mp4</span></p>\n",
            "tags": [
                "Java框架",
                "Spring全家桶",
                "springboot"
            ]
        },
        {
            "id": "https://sbysg.github.io/2023/10/22/backend/java/base/%E7%88%AA%E5%93%87%E5%A7%A8%E5%A7%A8/",
            "url": "https://sbysg.github.io/2023/10/22/backend/java/base/%E7%88%AA%E5%93%87%E5%A7%A8%E5%A7%A8/",
            "title": "爪哇基础",
            "date_published": "2023-10-21T16:09:40.000Z",
            "content_html": "<p>[toc]</p>\n<h2 id=\"day01变量常量运算符\"><a class=\"anchor\" href=\"#day01变量常量运算符\">#</a> day01 变量，常量，运算符</h2>\n<h4 id=\"1-常量\"><a class=\"anchor\" href=\"#1-常量\">#</a> 1. 常量</h4>\n<h5 id=\"11-基本概述\"><a class=\"anchor\" href=\"#11-基本概述\">#</a> 1.1 基本概述</h5>\n<blockquote>\n<p>不可以改变的数据，通常用于标记状态，数据记录。</p>\n<p>例如：月份可以使用常量标记，订单状态，项目中的主要阈值</p>\n<p>可以分为:</p>\n<p>数值，文字，文本，布尔类型</p>\n</blockquote>\n<h5 id=\"12-常量分类\"><a class=\"anchor\" href=\"#12-常量分类\">#</a> 1.2 常量分类</h5>\n<blockquote>\n<p>数值</p>\n</blockquote>\n<pre><code>整数\n\t·1 2 3 4 5 6 7 8 9 10\n\t-1 -2 -3 -4 -5 -6  \n小数/浮点数\n\t0.5 3.1415926 0.618 11.11 12.12\n</code></pre>\n<blockquote>\n<p>文字 / 字符常量</p>\n<p><strong>Java 中规定，字符常量使用英文单引号包含【单个元素】</strong></p>\n</blockquote>\n<pre><code>'你' '我' '他'\n'A' 'B' 'C'\n'1' '2' '3'\n\n'ABC' 错误情况！！！\n</code></pre>\n<blockquote>\n<p>文本 / 字符串常量</p>\n<p><strong>Java 中规定，字符串常量使用英文双引号包含的所有内容</strong></p>\n<p>字符串也是开发中最为稳定的数据载体，一般用于数据信息的传递，例如 前端到后端，后端到前端【XML JSON 文件】</p>\n</blockquote>\n<pre><code>&quot;曲曲折折的荷塘上面，弥望着甜甜的叶子~~&quot;\n&quot;朝辞白帝彩云间，千里江陵一日还...&quot;\n&quot;怒发冲冠，凭栏处，潇潇雨歇...&quot;\n</code></pre>\n<blockquote>\n<p>布尔类型</p>\n<p>真假关系，T  ==&gt; true  F ==&gt; false</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"13-字符相关内容\"><a class=\"anchor\" href=\"#13-字符相关内容\">#</a> 1.3 字符相关内容</h5>\n<h6 id=\"131-字符编码集问题\"><a class=\"anchor\" href=\"#131-字符编码集问题\">#</a> 1.3.1 字符编码集问题</h6>\n<blockquote>\n<p>对于计算机而言，所有的文字都是一张图片，为了更好的展示文本信息，每一个字符都有一个独立的唯一的编号，用于文本数据在屏幕中的展示</p>\n<p>重点：统一编码集，保证中文不乱码！！！</p>\n<p>开发中使用的常用编码</p>\n</blockquote>\n<pre><code>GBK\n\t中国国标，包含中国简体文字和少数民族文字。\nBIG5\n\t中国繁体字编码，主要用于中国台湾，中国香港，中国澳门，和新加坡\nUTF-8\n\t国际码，支持中文简体，繁体和英文，开发中最常用的编码集。\n\t要求前端(HTML 小程序 App)，后端(Java)，数据库(MySQL Oracle)\n</code></pre>\n<h6 id=\"132-ascii-编码\"><a class=\"anchor\" href=\"#132-ascii-编码\">#</a> 1.3.2 ASCII 编码</h6>\n<blockquote>\n<p>计算机中所有支持的编码集，前 128 位都是 ASCII</p>\n<p><strong>要求</strong></p>\n<ol>\n<li><strong>任何字符有且只允许使用字符本身，不允许使用编码值</strong></li>\n<li><strong>大写英文字母的编码值小于小写英文字母</strong></li>\n<li><strong>英文字母在编码集中非连续，中间有其他标点符号。</strong></li>\n<li><strong>数字字符顺序是 0 ~ 9</strong></li>\n</ol>\n</blockquote>\n<p><img data-src=\"E:/qneiwangtong/JavaEE2310/Day01-%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B8%B8%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/img/%E6%A0%87%E5%87%86%E5%8D%81%E8%BF%9B%E5%88%B6ASCII%E7%A0%81%E8%A1%A8.jpg\" alt=\"\" /></p>\n<p><img data-src=\"E:/qneiwangtong/JavaEE2310/Day01-%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B8%B8%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/img/%E5%85%AB%E8%BF%9B%E5%88%B6ASCII%E7%A0%81%E8%A1%A8.jpg\" alt=\"\" /></p>\n<h6 id=\"133-转义字符\"><a class=\"anchor\" href=\"#133-转义字符\">#</a> 1.3.3 转义字符</h6>\n<pre><code>常见，但是不用\n\t\\&quot; \\' \n\t\\n \\t\n\n后期项目中出现 SQL 语句中的 \\n \\t \\&quot; \\' 必须去除\n</code></pre>\n<h6 id=\"134-40-是什么\"><a class=\"anchor\" href=\"#134-40-是什么\">#</a> 1.3.4 \\40 是什么？？？</h6>\n<pre><code>\\ 是转义字符标记\n40 因为之前是 \\ 为转义字符，当前 40 为【八进制】数据 40 ==&gt; 040 \n对应八进制ASCII码表 \\40 ==&gt; sp 空格\n</code></pre>\n<h4 id=\"2-变量\"><a class=\"anchor\" href=\"#2-变量\">#</a> 2. 变量</h4>\n<h5 id=\"21-变量分类\"><a class=\"anchor\" href=\"#21-变量分类\">#</a> 2.1 变量分类</h5>\n<blockquote>\n<p>基本数据类型：整数，浮点数，字符，布尔类型</p>\n</blockquote>\n<h5 id=\"22-变量的定义格式\"><a class=\"anchor\" href=\"#22-变量的定义格式\">#</a> 2.2 变量的定义格式</h5>\n<blockquote>\n<p>数据类型 变量名 = 初始化数据；</p>\n</blockquote>\n<pre><code>数据类型:\n\t描述当前变量可以存储的数据是那些类型，那些范围，那些要求\n变量名:\n\t要求符合标识符规范，见名知意，通俗易懂，类型指向性，功能描述性\n=:\n\t赋值，将赋值号右侧的数据，赋值给左侧【变量】\n初始化数据:\n\t根据当前业务逻辑所需，给予变量，合理合适合法的数据内容。\n</code></pre>\n<h5 id=\"23-变量数据类型\"><a class=\"anchor\" href=\"#23-变量数据类型\">#</a> 2.3 变量数据类型</h5>\n<blockquote>\n<p>整数</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">占用内存空间大小</th>\n<th style=\"text-align:center\">数据存储范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">1 字节</td>\n<td style=\"text-align:center\">-128 ~ 127</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">2 字节</td>\n<td style=\"text-align:center\">-32768 ~ 32767</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4 字节</td>\n<td style=\"text-align:center\">-2^31 ~ 2^31 - 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">8 字节</td>\n<td style=\"text-align:center\">-2^63 ~ 2^63 - 1</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>浮点数</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">占用内存空间大小</th>\n<th style=\"text-align:center\">数据存储范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">4 字节</td>\n<td style=\"text-align:center\">10^38</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">8 字节</td>\n<td style=\"text-align:center\">10^308</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>字符类型</p>\n<p>涉及到字符操作有且只允许使用字符本身。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">占用内存空间大小</th>\n<th style=\"text-align:center\">数据存储范围围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">2 字节</td>\n<td style=\"text-align:center\">可以存储中文</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>布尔类型</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">占用内存空间大小</th>\n<th style=\"text-align:center\">数据存储范围围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">视情况而定</td>\n<td style=\"text-align:center\">true or false</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"24-变量定义案例\"><a class=\"anchor\" href=\"#24-变量定义案例\">#</a> 2.4 变量定义案例</h5>\n<blockquote>\n<p>整数变量定义案例</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 整型变量定义</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    byte short int long</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    定义变量的格式:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        数据类型 变量名 = 初始化数据；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> 变量存储赋值号右侧的数据内容</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">byte</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">short</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">long</span> num4 <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//sout 打印展示变量中存储的数据内容情况</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>浮点类型变量定义案例</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>计算机数据存储原则</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    1. 数据精度最高</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    2. 数据空间选择最大</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    3.14 作为浮点数，计算机会默认认为是一个 double 类型数据。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    double 类型数据占用字节数据为 8 个字节，float 类型变量占用内存空间 4 个字节</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    直接赋值操作会导致内存空间占用不同，计算机不允许通过。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>【解决】</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    告知计算机当前 3.14 常量对应的数据类型为 float 类型</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    在常量之后【必须是】加上大写 F</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">float</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">3.14F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">double</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>字符和布尔类型变量定义案例</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> char</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 字符常量操作有且只允许使用字符本身，不允许使用编码值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> ch1 <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> ch2 <span class=\"token operator\">=</span> <span class=\"token char\">'你'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">char</span> ch3 <span class=\"token operator\">=</span> <span class=\"token char\">'我'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">char</span> ch4 <span class=\"token operator\">=</span> <span class=\"token char\">'3'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ch1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ch2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ch3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ch4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>boolean 类型变量</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>boolean 类型变量常用名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    flag 标记</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ret ==> result 结果</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">boolean</span> ret <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"25-错误情况处理和分析\"><a class=\"anchor\" href=\"#25-错误情况处理和分析\">#</a> 2.5 错误情况处理和分析</h5>\n<h6 id=\"251-float-类型变量赋值要求\"><a class=\"anchor\" href=\"#251-float-类型变量赋值要求\">#</a> 2.5.1 float 类型变量赋值要求</h6>\n<pre><code>计算机数据存储原则\n    1. 数据精度最高\n    2. 数据空间选择最大\n    3.14 作为浮点数，计算机会默认认为是一个 double 类型数据。\n    double 类型数据占用字节数据为 8 个字节，float 类型变量占用内存空间 4 个字节\n    直接赋值操作会导致内存空间占用不同，计算机不允许通过。\n【解决】\n    告知计算机当前 3.14 常量对应的数据类型为 float 类型\n    在常量之后【必须是】加上大写 F\n</code></pre>\n<h6 id=\"252-long-类型变量赋值建议\"><a class=\"anchor\" href=\"#252-long-类型变量赋值建议\">#</a> 2.5.2 long 类型变量赋值建议</h6>\n<pre><code>\t推荐在给予 long 类型变量赋值常量，常量以大写 L 结尾，以及在使用整数常量超出 int 默认范围的情况下，需要使用大写 L 结尾告知计算机当前常量对应数据类型为 long 类型，扩大数据支持的范围\n</code></pre>\n<h6 id=\"253-变量名在一定范围内唯一不可以重复定义\"><a class=\"anchor\" href=\"#253-变量名在一定范围内唯一不可以重复定义\">#</a> 2.5.3 变量名在一定范围内唯一，不可以重复定义</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 声明一个 int 类型变量，变量名为 num，初始化数据为 10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 声明一个 int 类型变量，变量名为 num，初始化数据为 10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 语法错误！！！变量重复定义，Java 中不允许。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"254-变量未赋值不得参与其他非赋值操作\"><a class=\"anchor\" href=\"#254-变量未赋值不得参与其他非赋值操作\">#</a> 2.5.4 变量未赋值不得参与其他非赋值操作</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 语法报错 the local variable num may not have been initialized</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"255-严格遵守数据类型一致化原则\"><a class=\"anchor\" href=\"#255-严格遵守数据类型一致化原则\">#</a> 2.5.5 严格遵守数据类型一致化原则</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 语法错误，给予 int 类型变量赋值使用的常量为 double 类型，无法满足数据类型一致化要求。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"26-ajcg-阿里巴巴代码规约-标识符规范\"><a class=\"anchor\" href=\"#26-ajcg-阿里巴巴代码规约-标识符规范\">#</a> 2.6 AJCG 阿里巴巴代码规约 - 标识符规范</h5>\n<pre><code>\t1. 标识符规范要求有且只允许使用英文字母(A ~ Z a ~ z)，数字字符(0 ~ 9), 以及唯一可以使用的标点符号( _ ) 下划线\n\t2. 标识符要求英文字母开头\n\t3. 标识符没有严格的长度限制，长度范围根据实际使用情况决定。\n\t4. 标识符要求见名知意，动宾结构，类型指向和功能指向。\n\t\t见名知意/类型指向 变量名 studentName userPassword\n\t\t动宾结构/功能指向 方法名 setStudentAge getParameter\n\t5. 标识符要求符合以下命名要求\n\t\t大驼峰\n\t\t\t所有单词首字母大写，适用于类名和接口名\n\t\t\t\tStudentController ArrayIndexOutOfBoundsException \n\t\t\t\tInvocationTargetException\n\t\t\t\t\n\t\t小驼峰\n\t\t\t第一个单词首字母小写，之后的每一个单词首字母大写，适用于变量名和方法名\n\t\t\t\tgetStudentAddress queryAllStudentList\n\t\t\t\tupdateStudentInfoById \n\t\t下划线\n\t\t\t所有字母全部大写，使用下划线分割 _ ,适用于【带有名称的常量】\n\t\t\tMONDAY DAY_OF_WEEK DAY_OF_YEAR WEEK_OF_YEAR\t\n\t\t\tMAX_VALUE MIN_VALUE MAX_ARRAY_SIZE DEFAULT_CAPACITY\n\t6. 标识符在一定范围内唯一\n\t7. 已经被 Java 占用的关键字和保留字不得用于自定义标识符使用，代码中有颜色变化的都不可以使用。\n</code></pre>\n<h4 id=\"3-运算符\"><a class=\"anchor\" href=\"#3-运算符\">#</a> 3. 运算符</h4>\n<h5 id=\"31-算术运算符\"><a class=\"anchor\" href=\"#31-算术运算符\">#</a> 3.1 算术运算符</h5>\n<blockquote>\n<p>Java 支持的算术运算符:  + - * / % () =</p>\n<p>特征:</p>\n<ol>\n<li>小括号优先级最高，如果在运行过程中，对于代码执行优先级有需求，简单粗暴加括号</li>\n<li>先乘除，后加减，按照基本的从左至右原则完成</li>\n<li>= 优先级最低，作用是将赋值号右侧的数据，赋值给左侧的变量，严格遵从数据类型一致化要求</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_operation</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 算术运算符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *      1. 变量有且只有被赋值的情况下，才会修改变量存储的数据内容情况</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *      2. 关注变量在运行过程中，数据变化的情况</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author Anonymous 2023/7/18 15:57</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        num1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// num1 = 200 num2 = 20</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        num1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// num1 = 180 num2 = 20</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        num1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">/</span> num2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// num1 = 9 num2 = 20</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        num1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">%</span> num2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// num1 = 9 num2 = 20</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        num1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// num1 = 29 num2 = 20</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"32-增强版算术运算符\"><a class=\"anchor\" href=\"#32-增强版算术运算符\">#</a> 3.2 增强版算术运算符</h5>\n<blockquote>\n<p>Java 中支持的增强版算术运算符: +=， -= ，*=， /=,  %=</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    num1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 等价于</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    num1 <span class=\"token operator\">+=</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">float</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">3.5F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        3.5 为 double 类型，num1 是一个 float 类型，这里计算结果之后，计算机认为</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        num1 + 3.5 ==> double 类型，赋值给 float 类型的 num1 无法满足数据类型</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        一致化要求，赋值失败。不允许使用【基本数据类型强转】</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//        num1 = num1 + 3.5;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        增强版算术运算符，可以自动完成类型转换操作，float += double</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Java 会自动将 double 转换为 float 赋值给变量 num1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        num1 <span class=\"token operator\">+=</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"33-关系运算符\"><a class=\"anchor\" href=\"#33-关系运算符\">#</a> 3.3 关系运算符</h5>\n<blockquote>\n<p>Java 中关系运算符: &gt; &lt; &gt;= &lt;= != ==</p>\n<p>关系运算符对外的结果内容为 boolean 类型，常用于条件判断。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">10L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">10.0F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ret <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><h5 id=\"34-逻辑运算符\"><a class=\"anchor\" href=\"#34-逻辑运算符\">#</a> 3.4 逻辑运算符</h5>\n<blockquote>\n<p>Java 中逻辑运算符，需要判断逻辑运算符两边的表达式，最终对外结果为 boolean 类型</p>\n<p>&amp;&amp; 与，同真为真，有假【即】假</p>\n<p>||  或 ，有真【即】真，同假为假</p>\n<p>!     非 强牛 犟</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 逻辑运算符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/18 16:39</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">boolean</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">5</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ret <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ret <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">||</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ret <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">15</span> <span class=\"token operator\">||</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ret <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ret <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">!=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"35-自增自减运算符\"><a class=\"anchor\" href=\"#35-自增自减运算符\">#</a> 3.5 自增自减运算符</h5>\n<blockquote>\n<p>Java 中自增自减运算符格式 ++ --</p>\n</blockquote>\n<pre><code>【建议】\n\t自增自减运算符是针对于【变量】数据内容 自增 1 或者 自减 1，推荐使用\n\t+= 1 和 -= 1 代替。\n\t必须使用自增自减运算符，推荐【单独成行】或者【单独模块】，降低代码中的【歧义】\n\n【语法】\n\t1. 有且只允许操作变量，常量不允许使用\n\t2. \n\t\t自增自减运算符在变量之前，首先执行自增自减操作，之后参与代码运行\n\t\t自增自减运算符在变量之后，首先参与代码运行，之后执行自增自减操作\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 自增自减运算案例</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/18 16:49</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 11</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> num1<span class=\"token operator\">++</span> <span class=\"token operator\">*</span> <span class=\"token operator\">++</span>num1 <span class=\"token operator\">-</span> num1<span class=\"token operator\">++</span> <span class=\"token operator\">+</span> <span class=\"token operator\">++</span>num1 <span class=\"token operator\">/</span> num1<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        num1++ 取 5  num1 = 6</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ++num1 num1 = 7 取 7</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        num1++ 取 7  num1 = 8</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ++num  num1 = 9 取 9</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        num--; 取 9 num1 8</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        5 * 7 - 7 + 9 / 9 => 35 - 7 + 1 ==> 28 + 1 => 29</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"36-逻辑运算符短路原则\"><a class=\"anchor\" href=\"#36-逻辑运算符短路原则\">#</a> 3.6 逻辑运算符短路原则</h5>\n<blockquote>\n<p>案例一【逻辑与短路原则】</p>\n<p>逻辑与要求：同真为真，有假【即】假</p>\n<p>逻辑与短路原则，一旦发现运算表达式结果中存在 false 条件，整个表达式最终结果为 false，false 条件之后的所有内容不在执行。降低计算机的运算逻辑复杂度。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">boolean</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">20</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">++</span>num <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>案例二【逻辑或短路原则】</p>\n<p>逻辑或要求：有真【即】真，同假为假</p>\n<p>逻辑或短路原则，一旦发现运算表达式中存在 true 条件，整个表达式结果为 true，true 条件之后的所有内容不再执行。降低计算机的运算逻辑复杂度。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">boolean</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">||</span> <span class=\"token operator\">++</span>num <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"day02分支循环\"><a class=\"anchor\" href=\"#day02分支循环\">#</a> day02 分支，循环</h2>\n<h4 id=\"1-分支结构\"><a class=\"anchor\" href=\"#1-分支结构\">#</a> 1. 分支结构</h4>\n<blockquote>\n<p>分支结构来处理生活逻辑中，需要进行判断，选择，多种条件的情况。例如：商城打折，会员价，会员主题</p>\n<p>if 分支结构</p>\n<p>switch case 分支结构</p>\n</blockquote>\n<h5 id=\"11-if-分支\"><a class=\"anchor\" href=\"#11-if-分支\">#</a> 1.1 if 分支</h5>\n<h6 id=\"111-if-结构\"><a class=\"anchor\" href=\"#111-if-结构\">#</a> 1.1.1 if 结构</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 条件判断，结果类型为 boolean */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 满足 if 之后条件判断为 true ，执行大括号内容代码块</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>执行流程:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t1. 判断 if 之后小括号中表达式结果为 true</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t2. true 执行大括号代码块内容</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t3. false 直接执行大括号之和代码</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * if 分支结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/19 9:39</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         判断某一年是否为 闰年 假设 变量为 year</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         闰年条件:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            1. 可以被 4 整除但是不能被 100 整除</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                year % 4 == 0 &amp;&amp; year % 100 != 0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            2. 可以被 400 整除</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                year % 400 == 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> <span class=\"token number\">2023</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>  year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是一个闰年！！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"代码继续执行~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"112-if-else-结构\"><a class=\"anchor\" href=\"#112-if-else-结构\">#</a> 1.1.2 if else 结构</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 条件判断，结果类型为 boolean */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 条件判断结果为 true 对应的代码执行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 条件判断结果为 false 对应的代码执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>执行流程:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t1. 判断 if 之后小括号内容是否 true</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t2. true 执行 if 之后大括号代码块内容</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t3. false 执行 else 之后大括号代码块内容</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t4. 跳出大括号执行后续代码。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * if else 分支结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/19 9:51</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        1. 判断一个字符是否为英文字母，假设变量为 ch</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            ch >= 'A' &amp;&amp; ch &lt;= 'z' 不允许，因为大小写英文字母之间在 ASCII 中有其他字符存在</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            正确条件</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                ch >= 'A' &amp;&amp; ch &lt;= 'Z' 大写字母数据范围</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                ch >= 'a' &amp;&amp; ch &lt;= 'z' 小写字母数据范围</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">'\\\\'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'Z'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">>=</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"英文字母\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不是英文字母\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"113-if-else-if-结构\"><a class=\"anchor\" href=\"#113-if-else-if-结构\">#</a> 1.1.3 if else if 结构</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 条件 1 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 处理方式 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 条件 2 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 处理方式 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 条件 3 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 处理方式 3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 条件 4 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 处理方式 4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> \t<span class=\"token comment\">// 没有任何的一个匹配，else 为最终处理方式   </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>执行流程：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t1. 当前判断数据内容和 if 之后的条件进行匹配</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t2. 如果有存在的 if 条件匹配，执行对应的处理方式</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t3. 如果没有任何一个 if 条件匹配，执行 else 中的最终处理方式</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * if else if 分支结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/19 10:06</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        狗鸽超市消费</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              0 ~ 500           9.5</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>              500 ~ 2000        9.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              2000 ~ 5000       8.8</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              5000 ~ 10000      8.5</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              10000 ~ 50000     8.0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              50000 ~ 200000    7.8</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 小数据范围条件到大数据范围条件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> money <span class=\"token operator\">=</span> <span class=\"token number\">300000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> money <span class=\"token operator\">&lt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.95</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">>=</span> <span class=\"token number\">500</span> <span class=\"token operator\">&amp;&amp;</span> money <span class=\"token operator\">&lt;</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">>=</span> <span class=\"token number\">2000</span> <span class=\"token operator\">&amp;&amp;</span> money <span class=\"token operator\">&lt;</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">>=</span> <span class=\"token number\">5000</span> <span class=\"token operator\">&amp;&amp;</span> money <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.85</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">>=</span> <span class=\"token number\">10000</span> <span class=\"token operator\">&amp;&amp;</span> money <span class=\"token operator\">&lt;</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">>=</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"欢迎光临~~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 大数据范围条件到小数据范围条件</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">>=</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">>=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">>=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.85</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">>=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>money <span class=\"token operator\">>=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">*</span> <span class=\"token number\">0.95</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"12-switch-case\"><a class=\"anchor\" href=\"#12-switch-case\">#</a> 1.2 switch case</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 变量支持的数据类型: int char String 枚举，推荐使用 int 和 枚举</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 变量 存储数据内容 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">case</span> 常量 <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t处理方式 <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">case</span> 常量 <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t处理方式 <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">case</span> 常量 <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    \t处理方式 <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       \t最终处理方式<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>执行流程</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t1. switch case 结构会提取小括号中的变量存储数据内容</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t2. 和 case 之后的条件进行匹配。如果有匹配项，执行对应的处理方式，【case 选择平级】</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t3. 如果没有任何一个 case 选择匹配，执行最终 default 对应处理方式。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * switch case 结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/19 11:10</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        点菜</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            1. GOD Use VPN   1500</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            2. M10 菲力       900</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            3. 蟹粉豆腐 纯螃蟹版  7500</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            4. 一斤鱼子酱拌饭  5000</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> choose <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choose<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GOD Use VPN 佛跳墙 1500\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"M10 菲力 900\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"蟹粉豆腐 纯螃蟹版  7500\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一斤鱼子酱拌饭  5000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请重新选择\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2-循环结构\"><a class=\"anchor\" href=\"#2-循环结构\">#</a> 2. 循环结构</h4>\n<blockquote>\n<p>循环结构主要有 while 循环，do while 循环 ，for 循环，后续可以使用 Stream 流来处理大量数据，提升效率</p>\n</blockquote>\n<h5 id=\"21-while-循环\"><a class=\"anchor\" href=\"#21-while-循环\">#</a> 2.1 while 循环</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 循环条件，要求为 boolean */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 循环体【循环控制 / 循环条件控制】</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>执行流程：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t1. 判断 while 之后循环条件是否为 true</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t2. true 执行循环体【循环控制 / 循环条件控制】，重新判断 while 之和循环条件</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t3. false 跳出循环</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * while 循环</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/19 11:34</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃饭，睡觉，写代码~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 循环控制 / 循环变量控制</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            num <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// num--;  --num;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"22-do-while-循环\"><a class=\"anchor\" href=\"#22-do-while-循环\">#</a> 2.2 do while 循环</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 循环体【循环控制 / 循环条件控制】</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 循环条件，要求为 boolean */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>执行流程:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t1. do while 循环结构第一次循环体执行，无需任何的限制</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t2. 执行第一次循环体内容之后，执行 while 之后的循环控制判断</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t3. true 结果情况下，继续执行循环体</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t4. false 结果情况下，终止循环</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_loop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * do while 循环结构</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/7/19 11:44</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"周末去露营~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            num<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"23-for-循环重点\"><a class=\"anchor\" href=\"#23-for-循环重点\">#</a> 2.3 for 循环【重点】</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 循环条件初始化 */</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 循环条件判断 */</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 循环条件修改 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay02-%E5%88%86%E6%94%AF%EF%BC%8C%E5%BE%AA%E7%8E%AF%5Cimg%5C01-for%E5%BE%AA%E7%8E%AF%E5%9B%BE%E4%BE%8B.png\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_loop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * for 循环</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/7/19 14:34</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        for 循环中常用的循环变量</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            i j k l m n</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前排推荐&lt;&lt;纸牌屋>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"24-break-关键字\"><a class=\"anchor\" href=\"#24-break-关键字\">#</a> 2.4 break 关键字</h5>\n<blockquote>\n<p>循环执行过程中，满足某些条件的情况下，终止循环运行。break 操作需要通过条件控制，这里需要 if 分支结构。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * break 关键字演示</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/19 14:40</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             当 i 的值为 5 时，利用 break 关键字跳出循环结构</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             5 == i ---> 5 = i</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             i == 5 ---> i = 5</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             常量和变量等值判断，推荐常量在前，变量在后</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"25-continue-关键字\"><a class=\"anchor\" href=\"#25-continue-关键字\">#</a> 2.5 continue 关键字</h5>\n<blockquote>\n<p>zhong 止当前循环，直接进入下一次循环，while 循环和 do while 中使用需要非常小心，</p>\n<p><strong>不推荐在 while 和 do while 循环使用，有且只在 for 循环中使用</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * continue</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/19 14:48</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"continue 操作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3-作业题\"><a class=\"anchor\" href=\"#3-作业题\">#</a> 3. 作业题</h4>\n<pre><code>1. 展示0 ~ 100以内的所有偶数\n2. 展示0 ~ 100以内的所有奇数\n3. 计算1 - 150 的和\n4. 逢7过！！！ 【100以内的】\n5. 多种方法打印26个小写字母\n6. 例如:\n\t输入 5  8；\n\t计算 5 + 6 + 7 + 8；\n\t输出 26.\n7. 整数逆序输出, 例如输入一个整数12345,输出5 4 3 2 1\n8. \n   *****\n   *****\n   *****\n   *****\n   *****\n9.\n  *\n  **\n  ***\n  ****\n  *****\n10.   \n      *\n     ***\n    *****\n   *******\n  *********\n11.【拔高题】\n    *\n   ***\n  *****\n *******\n*********\n *******\n  *****\n   ***\n    *\n12.【拔高题】\n    A\n   ABA\n  ABCBA\n ABCDCBA\nABCDEDCBA\n ABCDCBA\n  ABCBA\n   ABA\n    A\n13.【拔高题】\n   ###*###\n   ##*#*##\n   #*###*#\n   *#####*\n   #*###*#\n   ##*#*##\n   ###*###\n</code></pre>\n<h2 id=\"day03方法数组初识\"><a class=\"anchor\" href=\"#day03方法数组初识\">#</a> day03 方法，数组初识</h2>\n<h4 id=\"1-方法重点\"><a class=\"anchor\" href=\"#1-方法重点\">#</a> 1. 方法【重点】</h4>\n<h5 id=\"11-方法重点\"><a class=\"anchor\" href=\"#11-方法重点\">#</a> 1.1 方法重点</h5>\n<blockquote>\n<ol>\n<li>入参和出参概念</li>\n<li>方法封装的基本格式</li>\n<li>方法的三要素 返回值 方法名 形式参数列表</li>\n<li>方法功能单一化</li>\n</ol>\n</blockquote>\n<h5 id=\"12-方法的基本格式\"><a class=\"anchor\" href=\"#12-方法的基本格式\">#</a> 1.2 方法的基本格式</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>修饰符 返回值类型 方法名<span class=\"token punctuation\">(</span>形式参数列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t方法体<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Modifers</span> <span class=\"token class-name\">ReturnType</span> <span class=\"token function\">methodName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ParameterTypes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">Method</span> body</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li>返回值类型 / ReturnType\n<ul>\n<li>方法执行之后对外的结果返回，在控制台打印展示不是返回值。</li>\n</ul>\n</li>\n<li>方法名 methodName\n<ul>\n<li>见名知意，动宾结构，当前方法执行唯一的名称，CPU 需要通过方法名找到对应的目标执行二进制字节码内容</li>\n</ul>\n</li>\n<li>形式参数列表\n<ul>\n<li>明确当前方法执行是否需要外来数据支持，方法执行过程中必要提供对应数据类型的实际参数。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"13-有参数有返回值方法重点\"><a class=\"anchor\" href=\"#13-有参数有返回值方法重点\">#</a> 1.3 有参数有返回值方法【 <code>重点</code> 】</h5>\n<blockquote>\n<p>方法执行有必要的参数需求，并且对外有结果产出。</p>\n<p>需求：计算两个 int 类型数据的和</p>\n</blockquote>\n<blockquote>\n<p>方法分析:</p>\n<p>目前阶段方法所需的修饰符:</p>\n<ul>\n<li>public static [不要问]</li>\n</ul>\n<p>返回值类型:</p>\n<ul>\n<li>可以确定为整数类型，可以选择 int or long ，long 类型考虑两 int 类型数据相加之后超出 int 数据存储范围</li>\n</ul>\n<p>方法名:</p>\n<ul>\n<li>见名知意，动宾结构，可以选择方法名为 sum</li>\n</ul>\n<p>形式参数列表:</p>\n<ul>\n<li>需求中告知，计算两个 int 类型数据，当前方法的参数为两个 int 类型，需要提供参数类型和参数名称，格式</li>\n<li>(int num1, int num2) int 告知参数类型，num1 num2 是参数名称，同时可以作为方法内部的变量使用。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>方法声明</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<p>方法实现和调用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 有参数有返回值方法案例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 注意:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *      1. 方法和方法之间是平级关系，方法不可以直接嵌套另一个方法。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *      2. 强制要求，必须完成自定义方法的完整【文档注释 JavaDoc】内容。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author Anonymous 2023/7/20 10:05</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        调用方法</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            1. 方法名，通过方法名称调用对应方法</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            2. 方法如果有参数需求，必须提供符合参数类型要求的实际数据</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            3. 方法如果存在返回值类型，可以选择使用对应数据类型的变量接收存储对应返回值情况</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法调用之前: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        value <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法调用之后: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 计算用户提供的两个 int 类型数据之和，通过方法返回值反馈</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @param num1 int 类型数据</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * @param num2 int 类型数据</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * @return 用户提供的两个 int 类型数据之和</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        return 关键字</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            1. 将关键字之后的数据反馈到方法之外，要求 return 之后数据类型和方法声明的返回值数据类型一致。</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            2. return 关键字可以终止方法的运行。</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"14-有参数无返回值方法\"><a class=\"anchor\" href=\"#14-有参数无返回值方法\">#</a> 1.4 有参数无返回值方法</h5>\n<blockquote>\n<p>有参数需求，但是没有数据反馈，适用于：日志记录，数据存储，数据发送</p>\n<p>需求：在控制台展示用户提供的 int 类型数据</p>\n</blockquote>\n<blockquote>\n<p>方法分析：</p>\n<p>目前阶段方法所需的修饰符:</p>\n<ul>\n<li>public static [不要问]</li>\n</ul>\n<p>返回值类型:</p>\n<ul>\n<li>当前方法有且只是在控制台展示数据内容，没有数据反馈，无需返回值</li>\n<li>void 表示当前方法没有返回值类型。</li>\n</ul>\n<p>方法名:</p>\n<ul>\n<li>需求展示用户提供的 int 类型数据，方法名推荐 printIntValue，logIntValue，showIntValue</li>\n</ul>\n<p>形式参数列表:</p>\n<ul>\n<li>展示用户提供的 int 类型数据，数据个数 1 个，数据类型为 int</li>\n<li>(int num)</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>方法声明:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printIntValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<p>方法实现和调用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 有参数无返回值方法案例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/7/20 10:52</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        通过方法名调用对应方法，同时提供必要的参数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printIntValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        如果方法声明明确告知需要指定类型参数，调用时提供的实际参数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        数据类型，数据个数，数据类型顺序必须完全一致。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// printIntValue(10.5);</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 在控制台展示用户提供的 int 类型数据内容</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @param num 用户提供的 int 类型数据</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printIntValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户提供的 int 类型数据为: \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"15-无参数有返回值方法\"><a class=\"anchor\" href=\"#15-无参数有返回值方法\">#</a> 1.5 无参数有返回值方法</h5>\n<blockquote>\n<p>当前方法执行无需任何的外来数据，直接提供数据给方法外部使用，适用于：提取类内数据存储情况，文件数据内容获取，数据库存储内容获取...</p>\n<p>需求：完成方法，方法执行之后对外反馈 int 类型数据 5</p>\n</blockquote>\n<blockquote>\n<p>方法分析：</p>\n<p>目前阶段方法所需的修饰符:</p>\n<ul>\n<li>public static [不要问]</li>\n</ul>\n<p>返回值类型:</p>\n<ul>\n<li>方法的最终执行目标是返回一个 int 类型数据 5，所以当前方法的返回值为 int 类型</li>\n</ul>\n<p>方法名:</p>\n<ul>\n<li>类似于数据提取方法，通常推荐的方法前缀为 get，例如: giveMeFive, getNum, getValue</li>\n</ul>\n<p>形式参数列表:</p>\n<ul>\n<li>当前方法执行无需任何的外来数据，直接调用获取数据</li>\n<li>() 方法没有参数需求，但是必须有小括号，变量名和方法名的最大区别就是小括号</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>方法声明:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<p>方法实现和调用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 无参数有返回值方法演示</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/7/20 11:06</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法调用之前: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        value <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法调用之后: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 当前方法返回一个 int 类型数据 5</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @return 方法返回值为 5</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"16-无参数无返回值方法\"><a class=\"anchor\" href=\"#16-无参数无返回值方法\">#</a> 1.6 无参数无返回值方法</h5>\n<blockquote>\n<p>方法没有参数和返回值，一般用于类内的辅助方法，对外不公开核心模块方法</p>\n<p>需求：在控制台展示 Hello World!</p>\n</blockquote>\n<blockquote>\n<p>方法分析：</p>\n<p>目前阶段方法所需的修饰符:</p>\n<ul>\n<li>public static [不要问]</li>\n</ul>\n<p>返回值类型:</p>\n<ul>\n<li>当前方法功能是直接在控制台展示，对外没有数据提供。【切记】控制台打印不是返回值！！！</li>\n</ul>\n<p>方法名:</p>\n<ul>\n<li>见名知意，动宾结构，小驼峰命名法，printHelloWorld</li>\n</ul>\n<p>形式参数列表:</p>\n<ul>\n<li>方法执行目标已明确，无需任何的外来数据内容</li>\n<li>()</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>方法声明:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<blockquote>\n<p>方法实现和调用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_method</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 无参数无返回值方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/7/20 11:19</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">printHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 当前方法在控制台展示 Hello World!</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，世界! Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"17-方法练习题\"><a class=\"anchor\" href=\"#17-方法练习题\">#</a> 1.7 方法练习题</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>要求:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t1. 方法功能单一化！！！越单一越好！！！</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t2. 不允许在方法中使用 Scanner 从键盘上获取数据！！！</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t3. 所有方法必须调用通过，可以运行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t4. 方法体实现，调用通过就 OK</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t5. 完成每一个方法对应的文档注释，注意格式。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 封装一个方法，返回两个整数里的较大那个</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxOfNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 封装一个方法，返回两个浮点数里的较小那个</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">minOfNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 封装一个方法，来判断一个字符是否是大写字母</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 如果是，返回 true, 否则返回 false</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMyUpper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 封装一个方法，来判断一个字符是否是数字字符</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 如果是，返回 true，否则返回 false!</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMyNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 封装一个方法，来判断一个字符是否是英文字母</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 如果是，返回 true, 否则返回 false! </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMyEnglish</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 封装一个方法，传入一个字符，如果是大写那么转化小写然后返回，否则保持不变返回</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token function\">toMyLower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// 封装一个方法，实现将一个正整数，倒序打印输出！1234 4321 </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 表达式（立方）\t编写程序，计算该数的立方</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// 流程控制（闰年问题）\t输入一个年份，判断该年份是平年还是闰年：</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 注：闰年就是第二个月有 29 天的那一年，能被 4 整除但是不能被 100 整除的是闰年，或者能被 400 整除的也是闰年</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">// 如果是返回 true  不是返回 false</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isLeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 表达式 (正数判断) 传入一个数字，判断这个数是否是正数 (是，打印 YES，不是输出 NO)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">isPositiveNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"18-其他练习题\"><a class=\"anchor\" href=\"#18-其他练习题\">#</a> 1.8 其他练习题</h5>\n<pre><code>1. 斐波那契数列 30 位以内数据实现\n\t1 1 2 3 5 8 13 21 34 55\n\t前两位固定位 1 ，从第三位开始，数据为前两位数据之和\n\n2. 阶乘代码实现，20 以内的阶乘\n\t重点考虑数据类型\n</code></pre>\n<h4 id=\"2-数组初识\"><a class=\"anchor\" href=\"#2-数组初识\">#</a> 2. 数组初识</h4>\n<h5 id=\"21-数组的必要性\"><a class=\"anchor\" href=\"#21-数组的必要性\">#</a> 2.1 数组的必要性</h5>\n<blockquote>\n<p>开发中存在以下场景，代码中可能会存在相同数据类型的数据大量使用，如果按照变量逐一定义的模式，会导致</p>\n<ul>\n<li>代码变量定义冗余</li>\n<li>操作不便</li>\n<li>阅读性极差</li>\n</ul>\n<p>考虑数据管理，基本情况下采用【数组形式】</p>\n<ul>\n<li>数据类型存储一致</li>\n<li>数据存储空间连续</li>\n<li>每一个单元空间都有唯一的标识 /index</li>\n</ul>\n</blockquote>\n<p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay03-%E6%96%B9%E6%B3%95%E5%92%8C%E6%95%B0%E7%BB%84%E5%88%9D%E8%AF%86%5Cimg%5C02-%E6%95%B0%E7%BB%84%E5%9B%BE%E4%BE%8B.png\" alt=\"\" /></p>\n<h5 id=\"22-java-定义数组的形式\"><a class=\"anchor\" href=\"#22-java-定义数组的形式\">#</a> 2.2 Java 定义数组的形式</h5>\n<blockquote>\n<p>数据类型 [] 数组名 = new 数据类型 [容量 Capacity];</p>\n</blockquote>\n<pre><code>数据类型:\n\t明确告知 Java 编译器，当前数组可以存储的数据类型是哪一个，并且有且只允许存储对应数据类型内容，严格遵守数据类型一致化原则。\n\n[]:\n\t1. 告知当前定义的数据类型为数组类型\n\t2. 数组名为【引用数据】类型\n\t\t跳转和指向\n\n数组名\n\t1. 数组操作重要名称，后续操作需要通过数组名 + 下标/索引方式完成\n\t2. 数组名是一个【引用数据类型变量】\n\nnew\n\t1. new 关键字会根据当前数据所需的空间大小，在内存的【堆区】申请对应内存空间\n\t\t【堆区】 仓库\n\t2. new 关键字可以将申请的内存空间进行数据擦除。\n\t\t申请的仓库区域打扫卫生\n\n数据类型\n\t前后一致，严格遵守数据类型一致化要求。\n\n[容量]:\n\t数组容量一旦确定，无法修改，并且容量支持的数据类型为 int 类型。\n</code></pre>\n<h5 id=\"23-数组基本案例\"><a class=\"anchor\" href=\"#23-数组基本案例\">#</a> 2.3 数组基本案例</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_array</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/20 17:21</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         数据类型 [] 数组名 = new 数据类型 [容量 Capacity];</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         这里定义了一个可以存储数据类型为 int 类型，容量为 10 的数组</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         并且数组名为 arr</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        操作数组中的元素内容，或者说每一个单元格数据内容</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        需要利用下标操作，下标范围是 0 ~ 数组容量 - 1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        例如:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            数组容量为 10 的情况，有效下标位置 0 ~ 9</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        数组 arr 下标为 5 的元素赋值为 10</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组中下标为 5 的元素数据存储情况 : \"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 数组中元素被 new 关键字清理所有的内存数据，int 类型对应 \"零\" 值为 0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组中下标为 0 的元素数据存储情况 : \"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"day04数组重点\"><a class=\"anchor\" href=\"#day04数组重点\">#</a> day04 数组【重点】</h2>\n<h4 id=\"1-数组基础\"><a class=\"anchor\" href=\"#1-数组基础\">#</a> 1. 数组基础</h4>\n<h5 id=\"11-数组的合法下标和错误问题\"><a class=\"anchor\" href=\"#11-数组的合法下标和错误问题\">#</a> 1.1 数组的合法下标和错误问题</h5>\n<blockquote>\n<p>合法下标 / 有效下标是 0 ~ 数组容量 - 1</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_array</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 数组有效下标使用和非法下标情况</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/7/21 9:41</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        定义一个 int 类型数组，可以存储的数据容量为 10</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 有效下标为 0 ~ 9</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        代码【运行时】提示异常 数组下标越界异常</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            ArrayIndexOutOfBoundsException: 10</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            数组名 + 下标方式，下标只要满是为 int 类型数据 Java 编译器从语法角度</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            分析没有问题，只有在运行代码时，发现数组下标越界异常</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            【运行时异常】</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            正数都有可能是一个【正常的下标位置】，需要结合上下文分析。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// arr[10] = 20;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// System.out.println(arr[10]);</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        ArrayIndexOutOfBoundsException: -1</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        -1 虽然满足 int 类型数据需求，但是数组下标最小从 0 开始</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        -1 是一个 100% 的错误下标 / 非法下标</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        数组操作 -1 下标数据内容，常用于数组操作错误情况提示，错误信息提示</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        arr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"12-数组内存分析图\"><a class=\"anchor\" href=\"#12-数组内存分析图\">#</a> 1.2 数组内存分析图</h5>\n<blockquote>\n<p>new 关键字可以申请内存堆区空间，并且对数据空间进行擦除操作</p>\n<p>数组名 / 局部变量在内存的栈区</p>\n</blockquote>\n<p><img data-src=\"E:/qneiwangtong/JavaEE2310/Day04-%E6%95%B0%E7%BB%84%E3%80%90%E9%87%8D%E7%82%B9%E3%80%91/img/02-%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE.png\" alt=\"\" /></p>\n<h5 id=\"13-数组容量属性property-or-attribute\"><a class=\"anchor\" href=\"#13-数组容量属性property-or-attribute\">#</a> 1.3 数组容量属性 (property or attribute)</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组的容量：\"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>arr.length </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t. ==> 的</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t有且只能获取 length 的数据内容，无法修改，数组容量一旦确定无法修改。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tarr.length 可以在循环操作中作为数组操作的终点标记。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"14-数组和-for-循环基本操作\"><a class=\"anchor\" href=\"#14-数组和-for-循环基本操作\">#</a> 1.4 数组和 for 循环基本操作</h5>\n<blockquote>\n<p>完成数组数据内容的赋值和取值操作</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_array</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 数组和 for 循环使用案例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/7/21 10:44</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 利用 for 循环，使用 i 循环变量控制下标数据，给予数组元素赋值操作</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 利用 for 循环，取值展示数组中存储的数据内容</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组中存储的数据内容 : \"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>功能模块方法封装，数组作为方法参数形式</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_array</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 数组和 for 循环使用案例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 一框 框核心代码</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 二看 上看找参数，下看找返回</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 三封装 补充方法参数，选择合适的修饰符，根据参数和返回完成方法声明，核心代码作为方法体</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @author Anonymous 2023/7/21 10:44</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        方法参数形式为数组形式，需要给予方法的实际参数是数组名</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        要什么给什么，用什么拿什么</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">assignInsArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">printIntArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 在控制台打印展示 int 类型数组存储的数据内容</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @param arr 用户提供的 int 类型数组</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printIntArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 利用 for 循环，取值展示数组中存储的数据内容</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组中存储的数据内容 : \"</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 给予 int 类型数组赋值操作</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * @param arr 用户提供的 int 类型数组</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">assignInsArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 利用 for 循环，使用 i 循环变量控制下标数据，给予数组元素赋值操作</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2-数组操作算法重点\"><a class=\"anchor\" href=\"#2-数组操作算法重点\">#</a> 2. 数组操作 / 算法【重点】</h4>\n<h5 id=\"21-已知数组找出指定元素的第一次出现的下标位置\"><a class=\"anchor\" href=\"#21-已知数组找出指定元素的第一次出现的下标位置\">#</a> 2.1 已知数组找出指定元素的第一次出现的下标位置</h5>\n<pre><code>已知数组:\n\tint[] arr = &#123;1, 3, 5, 7, 9, 1, 3, 5, 7, 9&#125;;\n需求\n\t找出元素 5 第一次出现的下标位置，结果 2\n\t找出元素 15 第一次出现的下标位置，数组中没有对应的元素存在，告知方法调用者，返回结果 -1\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_arrayop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 【已知数组找出指定元素的第一次出现的下标位置】</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 已知数组:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * \t    int [] arr = &#123;1, 3, 5, 7, 9, 1, 3, 5, 7, 9&#125;;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 需求</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * \t    找出元素 5 第一次出现的下标位置，结果 2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * \t    找出元素 15 第一次出现的下标位置，数组中没有对应的元素存在，告知方法调用者，返回结果 -1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author Anonymous 2023/7/21 11:27</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 已知数组</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 目标数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 4. 数据情况最终展示模块</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"目标元素第一次出现的下标位置 : \"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"404 Source Not Found!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 找出指定元素在指定数组中的第一次出现的下标位置，如果没有找到返回 -1</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @param arr    指定查询数据的目标数组</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * @param target 目标数据</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @return 找到目标元素返回值大于等于 0，否则 -1</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         1. 定义一个变量，用于存储目标数据的下标位置</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            index 初始化数据为 -1，在使用 for 循环遍历整个数组数据的过程中</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            如果找到了目标元素，将目标元素下标位置存储到 index 当中，如果没有</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            目标数据存在，index 数据内容依然是 -1</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            后续代码可以根据 index 数据存储情况分析数据是否找到，数据所在下标</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 2. 利用循环遍历整个数组元素</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>             3. if 判断如果发现数组中下标 i 元素和 target 一致</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                3.1 index 变量存储当前下标 i</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                3.2 break 跳出循环终止</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"22-已知数组找出指定元素的最后一次出现的下标位置\"><a class=\"anchor\" href=\"#22-已知数组找出指定元素的最后一次出现的下标位置\">#</a> 2.2 已知数组找出指定元素的最后一次出现的下标位置</h5>\n<pre><code>已知数组:\n\tint[] arr = &#123;1, 3, 5, 7, 9, 1, 3, 5, 7, 9&#125;;\n需求\n\t找出元素 5 第一次出现的下标位置，结果 7\n\t找出元素 15 第一次出现的下标位置，数组中没有对应的元素存在，告知方法调用者，返回结果 -1\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"23-目标数组指定范围数据拷贝到另一个数组中\"><a class=\"anchor\" href=\"#23-目标数组指定范围数据拷贝到另一个数组中\">#</a> 2.3 目标数组指定范围数据拷贝到另一个数组中</h5>\n<pre><code>已知数组:\n\tint[] arr = &#123;1, 3, 5, 7, 9, 1, 3, 5, 7, 9&#125;;\t\n\t限制从下标 2 开始到下标 6 结束，拷贝数组中的数据到新数组中\n\t新数组:\n\t\tint[] newArr = &#123;5, 7, 9, 1&#125;;\n\t\t数据范围限制/约束 要头不要尾\n\n核心问题:\n\t1. 用户提供的下标范围需要进行合法性判断。\n\t2. 尾插法数据存储方式使用\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_arrayop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 【目标数组指定范围数据拷贝到另一个数组中】</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 已知数组:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * \t    int [] arr = &#123;1, 3, 5, 7, 9, 1, 3, 5, 7, 9&#125;;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * \t    限制从下标 2 开始到下标 6 结束，拷贝数组中的数据到新数组中</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * \t    新数组:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * \t\t    int [] newArr = &#123;5, 7, 9, 1&#125;;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * \t\t    数据范围限制 / 约束 要头不要尾</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * 核心问题:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * \t    用户提供的下标范围需要进行合法性判断。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @author Anonymous 2023/7/21 14:32</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 目标数组</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 准备两个变量，对应起始和终止下标位置</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        用户提供下标数据合法性判断</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        错误条件:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            1. begin &lt; 0</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            2. end &lt; 0</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            3. begin > arr.length - 1</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            4. end > arr.length - 1</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            5. begin > end</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        条件限制:</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            1 4 5</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            例如:</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                b = 2  e = 6 正确</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                b = -5 e = 5 错误</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                b = -3 e = -1 错误</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                b = 5 e = -1 错误</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">></span> end <span class=\"token operator\">||</span> begin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> end <span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 以上条件为错误条件，需要终止方法运行。可以直接 return</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 新数组容量获取：终止下标 - 起始下标</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>newCapacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        定义变量 index，作用如下</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            1. 初始化为 0，用于明确当前添加数据操作对应的数据存储下标位置</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            2. 统计当前数据添加之后，有效元素个数</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 利用 for 循环，从 begin 开始到 end 结束，遍历整个数组，注意【要头不要尾】</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// 根据尾插法方式，在 index 数据位置添加元素</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            newArr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">//index +=1 移动到下一个数据存储位置，同时记录当前数组中有效元素个数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>方法实现</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_arrayop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 【目标数组指定范围数据拷贝到另一个数组中】</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 已知数组:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * \t    int [] arr = &#123;1, 3, 5, 7, 9, 1, 3, 5, 7, 9&#125;;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * \t    限制从下标 2 开始到下标 6 结束，拷贝数组中的数据到新数组中</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * \t    新数组:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * \t\t    int [] newArr = &#123;5, 7, 9, 1&#125;;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * \t\t    数据范围限制 / 约束 要头不要尾</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * 核心问题:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * \t    用户提供的下标范围需要进行合法性判断。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @author Anonymous 2023/7/21 14:32</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 目标数组</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 准备两个变量，对应起始和终止下标位置</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newArr <span class=\"token operator\">=</span> <span class=\"token function\">subArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newArr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 指定数据从 begin 下标位置开始到 end 下标结束，截取数组内容，数据范围 (begin &lt;= n &lt; end)</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @param arr   截取数据的目标 int 类型数组</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @param begin 指定截取数据开始的下标位置</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @param end   指定截取数据的结束下标位置</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * @return 截取得到的新数组内容，如果指定下标位置参数有错误，返回 null，表示执行失败</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">subArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        用户提供下标数据合法性判断</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        错误条件:</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            1. begin &lt; 0</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            2. end &lt; 0</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            3. begin > arr.length - 1</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            4. end > arr.length - 1</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            5. begin > end</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        条件限制:</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            1 4 5</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            例如:</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                b = 2  e = 6 正确</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                b = -5 e = 5 错误</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                b = -3 e = -1 错误</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                b = 5 e = -1 错误</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">></span> end <span class=\"token operator\">||</span> begin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> end <span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 利用 return 关键字终止方法的运行，同时利用 null 告知外部，当前方法运行失败</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 新数组容量获取：终止下标 - 起始下标</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>newCapacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        定义变量 index，作用如下</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            1. 初始化为 0，用于明确当前添加数据操作对应的数据存储下标位置</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            2. 统计当前数据添加之后，有效元素个数</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// 利用 for 循环，从 begin 开始到 end 结束，遍历整个数组，注意【要头不要尾】</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token comment\">// 根据尾插法方式，在 index 数据位置添加元素</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            newArr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token comment\">//index +=1 移动到下一个数据存储位置，同时记录当前数组中有效元素个数</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"24-找出目标数组中最大值下标位置\"><a class=\"anchor\" href=\"#24-找出目标数组中最大值下标位置\">#</a> 2.4 找出目标数组中最大值下标位置</h5>\n<pre><code>int[] arr = &#123;1, 3, 5, 7, 9, 21, 4, 6, 8, 10&#125;;\n找出数值中最大值下标位置:\n\tmaxIndex = 5;\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_arrayop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 【找出目标数组中最大值下标位置】</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * int [] arr = &#123;1, 3, 5, 7, 9, 21, 4, 6, 8, 10&#125;;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *      找出数值中最大值下标位置:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * \t    maxIndex = 5;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author Anonymous 2023/7/22 9:09</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 查询最大值的目标数组 【找极值】</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">maxIndexOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最大值数据所在下标位置:\"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 找出数组中最大值所在下标位置</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @param arr 查询最大值数据所在下标的 int 类型数组</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @return 最大值所在下标位置。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 1. 定义一个变量 index 初始化为 0 ，假设下标为 0 的元素是最大值</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 2. 利用循环，遍历整个数组内容，要求从下标 1 开始。</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 3. 如果发现下标为 i 数据大于 index 对应的数据</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 4. index 存储 下标 i 的数据</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"25-找出目标数组中最小值下标位置\"><a class=\"anchor\" href=\"#25-找出目标数组中最小值下标位置\">#</a> 2.5 找出目标数组中最小值下标位置</h5>\n<pre><code>int[] arr = &#123;1, 3, 5, 7, 9, 21, 4, 6, 8, 10&#125;;\n找出数值中最小值下标位置:\n\tminIndex = 0;\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"26-指定数组中最大值元素个数\"><a class=\"anchor\" href=\"#26-指定数组中最大值元素个数\">#</a> 2.6 指定数组中最大值元素个数</h5>\n<blockquote>\n<p>计数器概念</p>\n</blockquote>\n<pre><code>int[] arr = &#123;0, 21, 5, 21, 21, 21, 4, 6, 21, 10&#125;;\n最大值个数\n\tmaxValueCount = 5;\n</code></pre>\n<blockquote>\n<p>双循环方式</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_arrayop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 【指定数组中最大值元素个数】</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *      int [] arr = &#123;0, 21, 5, 21, 21, 21, 4, 6, 21, 10&#125;;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *      最大值个数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *          maxValueCount = 5;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author Anonymous 2023/7/22 9:29</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 目标数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">getMaxValueCount</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 3. 展示最大值个数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最大值个数为: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 找出 int 类型指定数中最大值元素个数</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @param arr 查询数据的目标 int 类型数组</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @return 数组中最大值元素个数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxValueCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 1. 找到最大值数据。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 1.1 假设下标为 0 对应的元素是最大值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 1.2 遍历整个数据内容，找出最大值数据</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 1.3 如果发现下标为 i 的大于 max 存储数据内容</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token comment\">// 1.4 max 存储 arr [i] 对应的数据内容</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 2. 根据最大值数据，计数统计最大值个数</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 2.1 定义一个变量 count 作为计数器变量</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 2.2 遍历循环整个数组，找出最大值对应的下标位置，找到一个计数一个</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// 2.3 如果下标为 i 的元素和 max 一致</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 2.4 count += 1 计数最大值个数</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>单循环方式</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_arrayop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 【指定数组中最大值元素个数】</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *      int [] arr = &#123;0, 21, 5, 21, 21, 21, 4, 6, 21, 10&#125;;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *      最大值个数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *          maxValueCount = 5;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author Anonymous 2023/7/22 9:29</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 目标数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token function\">getMaxValueCount</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最大值个数为: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 找出 int 类型指定数中最大值元素个数</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @param arr 查询数据的目标 int 类型数组</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @return 数组中最大值元素个数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxValueCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 1. 假设下标为 0 的元素是最大值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 2. 定义计数变量</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        3. 遍历整个数组</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        情况一:</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            如果发现数组中下标为 i 的元素大于 max</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            max 保存下标 i 对应的元素内容</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            同时 count 重置 1</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        情况二:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            如果发现数组中下标为 i 的元素等于 max</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            count += 1</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"27-复制指定数组数据内容到新数组\"><a class=\"anchor\" href=\"#27-复制指定数组数据内容到新数组\">#</a> 2.7 复制指定数组数据内容到新数组</h5>\n<pre><code>int[] arr = &#123;1, 3, 5, 7, 9, 21, 4, 6, 8, 10&#125;;\n     复制到新数组中\n     int[] newArr = &#123;1, 3, 5, 7, 9, 21, 4, 6, 8, 10&#125;;\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_arrayop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 【复制指定数组数据内容到新数组】</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * int [] arr = &#123;1, 3, 5, 7, 9, 21, 4, 6, 8, 10&#125;;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *      复制到新数组中</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *      int [] newArr = &#123;1, 3, 5, 7, 9, 21, 4, 6, 8, 10&#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author Anonymous 2023/7/22 9:55</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo6</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 原数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newArr <span class=\"token operator\">=</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 指定原数据数组，同时限制新数组容量情况，要求新数组容量 size >= 原数组容量</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param src  int 类型原数组</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @param size 指定新数组容量，要求大于等于原数组容量</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @return 拷贝成功返回新数组，拷贝失败返回 null</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">copyArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> src<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            newArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"28-指定数组内容逆序\"><a class=\"anchor\" href=\"#28-指定数组内容逆序\">#</a> 2.8  指定数组内容逆序</h5>\n<pre><code>int[] arr = &#123;1, 3, 5, 7, 9, 21, 4, 6, 8, 10&#125;;\n数组内容逆序之后\narr = &#123;10, 8, 6, 4, 2, 9, 7, 5, 3, 1&#125;;\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_arrayop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 【指定数组内容逆序】</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * int [] arr = &#123;1, 3, 5, 7, 9, 21, 4, 6, 8, 10&#125;;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *      数组内容逆序之后</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *      arr = &#123;10, 8, 6, 4, 2, 9, 7, 5, 3, 1&#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author Anonymous 2023/7/22 10:11</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo7</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 原数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 指定数组逆序</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param arr int 类型指定数组</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     利用循环进行数据的交换位置</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     交换次数或者说循环次数是数组有效元素个数 / 2</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"29-指定数组中最大值元素所有对应下标位置要求存储到另一个数组中\"><a class=\"anchor\" href=\"#29-指定数组中最大值元素所有对应下标位置要求存储到另一个数组中\">#</a> 2.9  指定数组中最大值元素所有对应下标位置，要求存储到另一个数组中</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>最大值下标存储数组内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> indexArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>方式一：</p>\n<ul>\n<li>找最大值具体数据</li>\n<li>找最大值个数</li>\n<li>根据最大值个数创建对应的存储下标使用的 int 类型数组</li>\n<li>从原数组中，找出最大值对应的下标位置，移动数据到新数组中</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_arrayop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 指定数组中最大值元素所有对应下标位置，要求存储到另一个数组中</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *  - 找最大值具体数据</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *  - 找最大值个数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *  - 根据最大值个数创建对应的存储下标使用的 int 类型数组</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *  - 从原数组中，找出最大值对应的下标位置，移动数据到新数组中</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author Anonymous 2023/7/22 11:25</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo8</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 目标数组</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> indexArray <span class=\"token operator\">=</span> <span class=\"token function\">maxValueIndexes</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>indexArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 找出指定数组中最大值所在下标位置，返回值是存储所有最大值下标位置的 int 类型数组</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @param arr 查询最大值数据下标的目标数组</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @return 存储当前数组中所有最大值的下标数组</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">maxValueIndexes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 1. 找最大值具体数据和最大值个数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 2. 根据最大值个数，创建存储下标使用的数组</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> indexArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>         3. 从原数组中，找出最大值下标位置，存储到 indexArray 中</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>         利用尾插法方式完成 indexArray 数组数据存储操作</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         int index</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            1. 作为当前添加数据的下标位置，同时添加之后自增 1</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            2. 作为当前数组中存储数据的有效元素个数</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                indexArray<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> indexArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>方式二:</p>\n<ul>\n<li>创建一个存储下标的数组，数组容量和原数组一致</li>\n<li>找出最大值</li>\n<li>从原数组中找出所有最大值下标位置，移动到新数组</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_arrayop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 指定数组中最大值元素所有对应下标位置，要求存储到另一个数组中</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *    - 创建一个存储下标的数组，数组容量和原数组一致</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *    - 找出最大值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *    - 从原数组中找出所有最大值下标位置，移动到新数组</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author Anonymous 2023/7/22 11:25</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo9</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 目标数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 1. 准备数组，数组容量和原数组容量一致。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> indexArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">getMaxCount</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> indexArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         4. 展示存储数组目标元素下标的情况</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         有可能会出现整个 indexArray 数组中所有数据内容都是 0</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         需要 index 来明确数组中下标为 0 的元素存储数据 0 是有效数值</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         index == 1</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            index 存储当前数组中【有效元素个数】</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>indexArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 获取最大值元素个数，同时将最大值对应的下标位置存储到参数 indexArray 中</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @param arr        查询最大值数据的原数组</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @param indexArray 存储最大值下标位置的数组</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @return 最大值下标个数</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> indexArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 2. 找出最大值数据情况</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 3. 利用循环和尾插法，从目标数组中找出最大值下标位置，存储到 indexArray 中</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                indexArray<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"210-在数组指定下标位置添加元素\"><a class=\"anchor\" href=\"#210-在数组指定下标位置添加元素\">#</a> 2.10 在数组指定下标位置添加元素</h5>\n<pre><code>目标数组:\t\n\tint[] arr = &#123;1, 3, 5, 7, 9, 11, 13, 15, 17, 0&#125;;\n\t注意:\n\t\t1. 0 无效元素，仅占位使用\n\t\t2. 插入数据下标的位置必须在合法范围以内\n\t\t例如：\n\t\t\t添加指定元素 20 到下标为 5 的位置\n\t\t\t&#123;1, 3, 5, 7, 9, 20, 11, 13, 15, 17&#125;;\n</code></pre>\n<h5 id=\"211-删除数组中指定下标元素内容\"><a class=\"anchor\" href=\"#211-删除数组中指定下标元素内容\">#</a> 2.11 删除数组中指定下标元素内容</h5>\n<pre><code>目标数组:\n\tint[] arr = &#123;1, 3, 5, 7, 9, 11, 13, 15, 17, 19&#125;;\n\t注意:\n\t\t1. 0 是无效元素，仅占位使用\n\t\t2. 删除之后，要求数组元素向前移动\n\t\t3. 删除数据下标的位置必须在合法范围以内\n\t\t\tArrayIndexOutOfBoundsException \n\t\t例如:\n\t\t\t删除指定下标 5 的元素\n            &#123;1, 3, 5, 7, 9, 13, 15, 17, 19, 0&#125;\n</code></pre>\n<h5 id=\"212-选择排序算法推演\"><a class=\"anchor\" href=\"#212-选择排序算法推演\">#</a> 2.12 选择排序算法推演</h5>\n<pre><code>目标数组:\n\tint[] arr = &#123;1, 3, 5, 7, 9, 2, 4, 6, 8, 10&#125;\n</code></pre>\n<h6 id=\"2121-找出数组中最大值和下标为0的元素交换位置\"><a class=\"anchor\" href=\"#2121-找出数组中最大值和下标为0的元素交换位置\">#</a> 2.12.1 找出数组中最大值和下标为 0 的元素交换位置</h6>\n<h6 id=\"2122-接上一题找出数组中剩余最大值和下标为1的元素交换位\"><a class=\"anchor\" href=\"#2122-接上一题找出数组中剩余最大值和下标为1的元素交换位\">#</a> 2.12.2 接上一题：找出数组中剩余最大值和下标为 1 的元素交换位</h6>\n<h6 id=\"2123-接上一题找出数组中剩余最大值和下标为2的元素交换位\"><a class=\"anchor\" href=\"#2123-接上一题找出数组中剩余最大值和下标为2的元素交换位\">#</a> 2.12.3 接上一题：找出数组中剩余最大值和下标为 2 的元素交换位</h6>\n<h2 id=\"day05面向对象\"><a class=\"anchor\" href=\"#day05面向对象\">#</a> day05 面向对象</h2>\n<h4 id=\"1-面向对象和面向过程对比\"><a class=\"anchor\" href=\"#1-面向对象和面向过程对比\">#</a> 1. 面向对象和面向过程对比</h4>\n<blockquote>\n<p>面向对象：找合适的人做合适的事</p>\n<p>面向过程：自力更生，亲力亲为</p>\n</blockquote>\n<pre><code>烧茄子\n\t找一个餐厅吃\n\t\t1. 付钱\n\t\t2. 拿饭\n\t\t3. 吃\n\t\t4. 走\n\t\t\n\t自己做\n\t\t1. 长条紫茄子，西红柿，菜椒，蒜\n\t\t2. 处理各种菜品，炸茄子，西红柿，菜椒切块，蒜(蒜蓉 蒜片)\n\t\t3. 炒(料汁，水淀粉)\n\t\t4. 吃\n\t\t5. 洗碗刷锅\n</code></pre>\n<h4 id=\"2-类和对象\"><a class=\"anchor\" href=\"#2-类和对象\">#</a> 2. 类和对象</h4>\n<blockquote>\n<p>类是针对于一类事物的统一描述，统一概述，主要包括 数据描述和行为描述</p>\n<p>对象 独立的，唯一的，特殊的个体</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类</th>\n<th style=\"text-align:center\">对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">人</td>\n<td style=\"text-align:center\">麻花藤，李想，雷布斯，马云爸爸，乔布斯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">狗</td>\n<td style=\"text-align:center\">狗鸽，八公，哮天犬，狗鸽的豆豆，王可可</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">猫</td>\n<td style=\"text-align:center\">黑猫警长，Tom，加菲猫，狗鸽的八九</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-java-中定义类的格式\"><a class=\"anchor\" href=\"#3-java-中定义类的格式\">#</a> 3. Java 中定义类的格式</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> 类名 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 属性描述 / 数据描述【成员变量 Field】</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 行为描述 【成员方法 Method】</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>类名：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t1. 要求符合大驼峰命名法</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t2. 要求做到见名知意</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>成员变量:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t1. 要求符合小驼峰命名法</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t2. 要求做到见名知意</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>成员方法:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t1. 要求符合小驼峰命名法</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t2. 要求做到见名知意，动宾结构</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"31-成员变量和成员方法定义\"><a class=\"anchor\" href=\"#31-成员变量和成员方法定义\">#</a> 3.1 成员变量和成员方法定义</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 自定义 class 类型，类型名为 Person，对应人类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *      属性描述 ==> 【成员变量】</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *      行为描述 ==> 【成员方法】</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 属性描述 ==> 【成员变量】</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * id 成员变量，数据类型为 int 类型，对应 Person 的 id ，可以理解为身份证</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * name 成员变量，数据类型为 String 类型，对应 Person 的 name，可以理解为姓名</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * age 成员变量，数据类型为 int 类型，可以理解为年龄</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 行为描述 ==> 【成员方法】</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 睡觉行为描述方法</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我被床封印了！！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 吃饭行为描述</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @param food 字符串类型对应的食物名称</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> food<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中午吃\"</span> <span class=\"token operator\">+</span> food<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * 写代码行为描述</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">coding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键盘敲烂，月薪过万\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"32-实例化对象和对象操作成员\"><a class=\"anchor\" href=\"#32-实例化对象和对象操作成员\">#</a> 3.2 实例化对象和对象操作成员</h5>\n<blockquote>\n<p>实例化对象的固定格式【new 对象】</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>类名 类对象 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 类名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>类名:\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t自定义获取是 Java 中已经存在的类型名称，类名首字母大写。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>类对象:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t操作当前类对应对象的变量名称，可以利用对象名来操作相关成员变量和成员方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>new:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t1. new 根据会当前当前类型所需在内存的【堆区】申请对应的内存空间</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t2. new 关键字会将申请的内存空间擦除干净</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>类名 ();\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t1. 构造方法 Constructor</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t2. 方法名为类名，用于告知 new 关键字当前实例化对象具体数据类型</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t3. 构造方法可以用于初始化实例化对象数据空间内容。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>*/</span></pre></td></tr></table></figure><blockquote>\n<p>实例化对象操作成员</p>\n</blockquote>\n<pre><code>成员变量:\t\n\t类似于 arr.length \n\t格式: 对象名.成员变量名\n成员方法\n\t格式: 对象名.成员方法(实际参数类型);\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        当前操作实例化 Person 对象，对象名为 person</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        对象名称要求符合见名知意，类型指向</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        通过 Person 对象 person 操作成员变量和成员方法</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 给予当前 Person 对象 person id 成员变量赋值具体数据 1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        person<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 赋值 Person 对象成员变量 name 数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 赋值 Person 对象成员变量 age 数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成员变量数据内容:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 提取成员变量保存的数据内容</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID: \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name: \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Age: \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        通过 Person 对象操作成员方法</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成员方法执行效果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        person<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        person<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"牛肉面\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        person<span class=\"token punctuation\">.</span><span class=\"token function\">coding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"4-对象内存分析图\"><a class=\"anchor\" href=\"#4-对象内存分析图\">#</a> 4. 对象内存分析图</h4>\n<p><img data-src=\"E:/qneiwangtong/JavaEE2310/Day05-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/img/01-%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE.png\" alt=\"\" /></p>\n<h4 id=\"5-javabean-规范封装规范\"><a class=\"anchor\" href=\"#5-javabean-规范封装规范\">#</a> 5. JavaBean 规范封装规范</h4>\n<h5 id=\"51-概述\"><a class=\"anchor\" href=\"#51-概述\">#</a> 5.1 概述</h5>\n<pre><code>为了满足后续代码开发的规范，实例化对象，操作数据的一致性，Java 制定了 JavaBean 规范\n\t1. 所有成员变量全部私有化【private】\n    2. 必须提供对应成员变量的【Setter and Getter 方法】，用于满足成员变量赋值和取值规范化操作\n    3. 必须提供无参数构造方法【Constructor】\n</code></pre>\n<h5 id=\"52-private-权限修饰\"><a class=\"anchor\" href=\"#52-private-权限修饰\">#</a> 5.2 private 权限修饰</h5>\n<blockquote>\n<p>权限修饰：可以用于控制成员变量，成员方法，构造方法使用权限</p>\n</blockquote>\n<pre><code>private 权限修饰符:\n\tprivate 可以用于修饰成员变量，成员方法，构造方法，修饰的内容有且只允许在类内使用，类外无法直接调用。\n\t成员方法 采用 private 修饰可以满足类内核心方法，或者辅助方法实现，类外无法调用\n\t构造方法 private 修饰可以用于后续的【单例模式】实现\n\t\npublic 权限修饰符: \n\tpublic 可以用于修饰成员变量，成员方法，构造方法，修饰的内容类外只要符合语法规范，都可以直接使用\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_object</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WOT World Of Tank\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @author Anonymous 2023/7/24 14:37</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        student<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        提示报错，name 成员变量为私有化成员变量，类外无法直接使用</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        student<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        student<span class=\"token punctuation\">.</span><span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        提示报错，test () 成员方法为私有化方法，类外无法直接使用</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        student<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>所有成员变量全部私有化</p>\n</blockquote>\n<pre><code>主要目的是保证成员变量赋值和取值操作规范化，统一化，采用相同的方式方法来完成操作。可以满足后期的框架数据操作需求，例如: JSP 数据取值，Spring 中的 DI 依赖注入。\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    JavaBean 规范第一条，所有成员变量全部私有化限制。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"53-setter-and-getter-方法\"><a class=\"anchor\" href=\"#53-setter-and-getter-方法\">#</a> 5.3 Setter and Getter 方法</h5>\n<blockquote>\n<p>JavaBean 规定要求的给予成员变量进行赋值和取值操作的固定方法，有严格的语法要求和语法形式。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Getter 方法，用于取值成员变量数据内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Getter 取值方法格式</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tpublic 成员变量对应数据类型返回值 get 成员变量名称 () &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\treturn 成员变量；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t要求</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t1. 方法名必须符合小驼峰命名法</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tgetname = 正确 => getName</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        2. 如果成员变量数据类型为 boolean 类型，Getter 方法方法名以 is 开头</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        \tprivate boolean gender;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        \tpublic boolean isGender () &#123;return gender;&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Setter 方法，用于赋值成员变量数据内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Setter 赋值方法格式</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tpublic void set 成员变量名称 (成员变量数据类型所需参数) &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tthis. 成员变量名 = 参数；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t要求</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t1. 方法名必须符合小驼峰命名法</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tsetname = 正确 => setName</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"54-constructor-构造方法\"><a class=\"anchor\" href=\"#54-constructor-构造方法\">#</a> 5.4 Constructor 构造方法</h5>\n<blockquote>\n<p>构造方法作用:</p>\n<ul>\n<li>提供给 new 关键字实例化对象数据类型。构造方法要求方法名必须是类名。</li>\n<li>构造方法参数可以给予实例化对象初始化数据能力。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造方法基本格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> 类名<span class=\"token punctuation\">(</span>实例化对象初始化参数列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    初始化语句<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 针对于 Student 类的无参数构造方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>调用无参数构造方法实例化对象操作，Student 对象数据情况</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Student student = new Student ();</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>student ==> &#123;id=0, name=null, age=0&#125;;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 针对于 Student 类有参数构造方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>调用执行以上有参数构造方法，实例化得到的 Student 对象，成员变量带有初始化数据</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Student student = new Student (1, \"张三\", 25);</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>student ==> &#123;id=1, name=\"张三\", age=25&#125;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>*/</span></pre></td></tr></table></figure><h5 id=\"55-this-鸡肋-关键字\"><a class=\"anchor\" href=\"#55-this-鸡肋-关键字\">#</a> 5.5 this [鸡肋] 关键字</h5>\n<blockquote>\n<p>核心作用是用于区分【参数变量】和【成员变量】</p>\n<p>参数变量名称和成员变量名称一致，为了在方法中区分成员变量和参数变量，可以使用 this. 成员变量 方式来区分。【固定格式规范，可以自动生成】</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     方法内使用的 id 变量为当前方法参数变量 id 不是成员变量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     方法变量使用遵循的是就近原则。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     id = id;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     this.id 可以告知程序，当前 id 为成员变量 id ，非参数 id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"56-符合-javabean-规范实体类定义案例\"><a class=\"anchor\" href=\"#56-符合-javabean-规范实体类定义案例\">#</a> 5.6 符合 JavaBean 规范实体类定义案例</h5>\n<blockquote>\n<p>符合 JavaBean 规范的实体类，可以用于后期的项目开发自动化处理 (自动创建，自动赋值，自动加载...)</p>\n</blockquote>\n<pre><code class=\"language-jaVA\">package com.qfedu.a_object;\n\n/**\n * 符合 JavaBean 规定的实体类\n *\n * @author Anonymous 2023/7/24 15:45\n */\npublic class SingleDog &#123;\n    // 所有成员变量全部私有化\n    private int id;\n    private String name;\n    private int age;\n    private boolean gender;\n\n    // 无参数构造方法 NoArgConstructor\n    public SingleDog() &#123;&#125;\n\n    // 全参数构造方法 AllArgConstructor\n    public SingleDog(int id, String name, int age, boolean gender) &#123;\n        this.id = id;\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n    &#125;\n\n    // Setter and Getter 方法\n    public int getId() &#123;\n        return id;\n    &#125;\n\n    public void setId(int id) &#123;\n        this.id = id;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public boolean isGender() &#123;\n        return gender;\n    &#125;\n\n    public void setGender(boolean gender) &#123;\n        this.gender = gender;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"6-成员变量和局部变量\"><a class=\"anchor\" href=\"#6-成员变量和局部变量\">#</a> 6. 成员变量和局部变量</h4>\n<h5 id=\"61-什么是局部变量\"><a class=\"anchor\" href=\"#61-什么是局部变量\">#</a> 6.1 什么是局部变量</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>以上两个 i 完全不冲突，都是 <span class=\"token keyword\">for</span> 循环中的局部变量<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>语法报错，因为 num 定义在 <span class=\"token keyword\">if</span> 大括号以内，是一个局部变量，超出 <span class=\"token keyword\">if</span> 范围无效</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    1. 涉及到局部变量问题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    2. num 作为方法的参数【值传递 / 值参数】</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 打印结果为 10 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tnum <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"62-成员变量和局部变量对比\"><a class=\"anchor\" href=\"#62-成员变量和局部变量对比\">#</a> 6.2 成员变量和局部变量对比</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对比</th>\n<th>成员变量</th>\n<th style=\"text-align:left\">局部变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">内存</td>\n<td>存在于在内存的【堆区】</td>\n<td style=\"text-align:left\">存在于内存的【栈区】</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用</td>\n<td>成员变量用于描述当前类的数据情况，同时可以存储当前对象的数据内容</td>\n<td style=\"text-align:left\">在代码运行过程中临时存储使用到的数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">初始化数据</td>\n<td>实例化对象过程中如果没有明确给予成员变量赋值操作，成员变量数据内容对应成员变量数据类型的【零值】</td>\n<td style=\"text-align:left\">没有赋值不能参与其他非赋值操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">生存周期</td>\n<td>成员变量随着类对象实例化开始，当前对应实例化对象被 JVM 的【GC】 销毁时结束</td>\n<td style=\"text-align:left\">有且只在定义的大括号范围以内</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">作用域</td>\n<td>对象在哪一个区域，对应的成员变量也在哪一个区域。</td>\n<td style=\"text-align:left\">有且只在定义的大括号范围以内</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"63-零值\"><a class=\"anchor\" href=\"#63-零值\">#</a> 6.3 【零值】</h5>\n<pre><code>实例化对象，没有给予成员变量初始化赋值的情况下，每一个成员变量根据当前数据类型情况，对外数据内容是【零值】\n\n例如：\n\tbyte short int  零值 0\n\tlong            零值 0L\n\tboolean         零值 false\n\tchar            零值 '\\0' 表示编码集当中编号为 0 的字符，是一个不可见字符 nul\n\tfloat           零值 0.0F\t\n\tdouble          零值 0.0\n\t其他引用数据类型   零值  null 内存中编号为 0 的内存名称 \n</code></pre>\n<h5 id=\"64-jvm-的-gc\"><a class=\"anchor\" href=\"#64-jvm-的-gc\">#</a> 6.4 JVM 的 GC</h5>\n<blockquote>\n<p>JVM 的垃圾回收机制。</p>\n</blockquote>\n<p>![](E:/qneiwangtong/JavaEE2310/Day05 - 面向对象 /img/02-JVM GC 机制.png)</p>\n<h4 id=\"7-十二生肖\"><a class=\"anchor\" href=\"#7-十二生肖\">#</a> 7. 十二生肖</h4>\n<pre><code>要求:\n\t【严格遵守 JavaBean 规范】\n\t1. 每一个类对应三个或者三个以上成员变量\n\t2. 每一个类对应三个或者三个以上成员方法，必须保证有一个成员方法至少有一个参数\n\t3. 每一个类必须有三个或者三个以上的构造方法，并且强制要求有一个无参数构造方法\n\t4.【重点】成员变量名称所有类不可重复\n\t\t例如:\n\t\t\tTiger name 成员变量描述名字，其他的 十一个生肖没有名字\n\t5.【重点】成员方法名称所有类不可重复\n\t\t例如:\n\t\t\tTiger sleep() 成员方法描述睡觉行为，其他 十一个生肖不能睡觉\n\t6. 每一个类单独一个文件\n\t\t文件名:\n\t\t\tDemo1.java  \n\t\t\t\t==&gt; public class Demo1\n\t\t\t\t==&gt; class Tiger\n\t7. 每一个类必须使用所有构造方法，创建对应对象，并且使用创建对象，调用所有成员变量数据进行展示，和所有成员方法进行执行。\n\t8. 每一个方法，必须有对应的标准文档注释！！！\n\n以上代码会完成\n\t1. 12 类\n\t2. 36个 成员变量 36个 成员方法 36个 构造方法\n\t3. new 对象 过程 36 次\n\t\t调用成员变量 108 次\n\t\t调用成员方法 108 次\n</code></pre>\n<h2 id=\"day06-面向对象\"><a class=\"anchor\" href=\"#day06-面向对象\">#</a> day06 面向对象</h2>\n<h4 id=\"1-继承\"><a class=\"anchor\" href=\"#1-继承\">#</a> 1. 继承</h4>\n<h5 id=\"11-java-中继承的目的\"><a class=\"anchor\" href=\"#11-java-中继承的目的\">#</a> 1.1 Java 中继承的目的</h5>\n<blockquote>\n<ul>\n<li>数据类型一致化的延续</li>\n<li>成员方法的延续性，一致性和独立性。</li>\n<li>方法支持数据类型多样性的基本实现规则</li>\n<li>继承操作基本上和成员变量无关，成员变量大多数要求 private 私有化修饰</li>\n</ul>\n</blockquote>\n<h5 id=\"12-游戏开发中的继承\"><a class=\"anchor\" href=\"#12-游戏开发中的继承\">#</a> 1.2 游戏开发中的继承</h5>\n<blockquote>\n<p>【模版概念】在基础的模版之上，根据当前的特征需求，加入特征元素 (属性，方法)，从而满足基于模版之上的独立开发模式，降低基础类型的开发压力。</p>\n<p>模版一般规定基本属性，基本方法，继承模版的类型，在基础之上进行个性化的增强。</p>\n</blockquote>\n<h5 id=\"13-java-中继承的基本格式和语法要求\"><a class=\"anchor\" href=\"#13-java-中继承的基本格式和语法要求\">#</a> 1.3 Java 中继承的基本格式和语法要求</h5>\n<blockquote>\n<p>继承使用的关键字 extends</p>\n<p>基本格式:</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>A 类是 B 类的一个子类</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>B 类是 A 类的唯一父类</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr></table></figure><blockquote>\n<p>语法要求</p>\n<ul>\n<li>子类可以通过继承得到父类中的非私有化成员变量和成员方法</li>\n<li>子类不可以通过继承得到父类私有化成员变量和成员方法</li>\n<li>Java 的继承重点关注数据类型延续和方法一致</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 父类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 私有化成员变量和公共成员变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"私有化成员变量\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> <span class=\"token string\">\"public 修饰成员变量\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 私有化成员方法和公共成员方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"私有化成员方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOL PUBG WOT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * SubClass 继承 SuperClass</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * SubClass 是 SuperClass 的一个子类</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * SuperClass 是 SubClass 唯一父类</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @author Anonymous 2023/7/25 9:56</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">SubClass</span> subClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        - 子类可以通过继承得到父类中的非私有化成员变量和成员方法</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        - 子类不可以通过继承得到父类私有化成员变量和成员方法</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        subClass<span class=\"token punctuation\">.</span><span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>subClass<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        subClass.test();</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        System.out.println(subClass.msg);</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"14-父类方法无法满足子类需求解决方案\"><a class=\"anchor\" href=\"#14-父类方法无法满足子类需求解决方案\">#</a> 1.4 父类方法无法满足子类需求解决方案</h5>\n<blockquote>\n<p>重写 Override</p>\n<ul>\n<li>解决在继承的情况下，父类的方法实际执行效果无法满足子类需求，不修改方法声明，利用重写在子类对目标方法体进行子类特征化实现。</li>\n</ul>\n<p>语法要求</p>\n<ul>\n<li>子类重写父类方法，方法声明必须完全一致，权限修饰符必须大于等于父类，一般情况下权限修饰符都是和父类一致</li>\n<li>子类可以根据自身需求修改方法体内容。</li>\n<li>必须使用 @Override 注解开启重写格式严格检查</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_extends</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"机械工程师\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"捕鱼达人 黄金矿工 麻将 斗地主\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    @Override 注解</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        开启重写代码格式严格检查！！！要求 Java 编译器检查当前重写格式是否符合要求。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Java 原作者建议，@Override 不可以省略</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"卖艺！！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LOL PUBG WOT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @author Anonymous 2023/7/25 10:08</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Son</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        父类方法的实际运行效果无法满足子类【特征需求】</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        son<span class=\"token punctuation\">.</span><span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        son<span class=\"token punctuation\">.</span><span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        子类自定义功能方法，功能形式继承父类方法相似，可以解决当前问题</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        但是会导致代码冗余，方法冗余，开发压力较大。</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        可以利用【重写 Override】解决问题。 </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        son.jobSon ();</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        son.gameSon ();</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"15-继承带来的问题-abstract-关键字使用\"><a class=\"anchor\" href=\"#15-继承带来的问题-abstract-关键字使用\">#</a> 1.5 继承带来的问题 - abstract 关键字使用</h5>\n<blockquote>\n<p>父类通过继承给到子类的方法，应该是一个【规范 / 模版】，子类【必须】重写 / 实现目标方法，从而满足子类的特征化方法的实现。</p>\n<p>需要利用 abstract 关键字来解决问题。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_abstract</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>abstract 关键字修饰的方法，要求子类【强制】实现 implement</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>第一个错误:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Abstract method in non-abstract class</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        abstract 修饰方法定义在一个非 abstract 修饰类内</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Class 'LOLHero' must either be declared abstract or implement abstract method 'q ()' in 'LOLHero'</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        LOLHero 必须定义为 abstract 修饰，或者实现 abstract 修饰方法 q ()</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Alt + Enter 快速修复 选择处理方式:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        Make 'LOLHero' abstract</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>第二个错误:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Abstract methods cannot have a body</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        abstract 修饰方法不能有方法体</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Alt + Enter 快速修复 选择处理方式:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Delete method body</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>第三个错误:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Class 'HappyWindBoy' must either be declared abstract or implement abstract method 'q ()' in 'LOLHero'</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        HappyWindBoy 类必须是一个 abstract 修饰类，或者实现 LOLHero 类内的 abstract 修饰方法 q ();</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Class 'Varus' must either be declared abstract or implement abstract method 'q ()' in 'LOLHero'</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        Varus 类必须是一个 abstract 修饰类，或者实现 LOLHero 类内的 abstract 修饰方法 q ();</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    Alt + Enter 快速修复 选择处理方式:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        Implement methods</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>LOLHero 类，目的是定义 LOL 英雄技能规范，限制每一个英雄有 QWER 方法</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>每一个方法都是 abstract 修饰</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LOLHero</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> * 快乐风男类</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * 继承 abstract 修饰的 LOL Hero 类需要【实现】所有 abstract 修饰的方法</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HappyWindBoy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LOLHero</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"斩钢闪\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"风之障壁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"踏前斩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"狂风绝息斩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"75\"></td><td><pre> * 维鲁斯</pre></td></tr><tr><td data-num=\"76\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Varus</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LOLHero</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"穿刺之箭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"枯萎箭袋\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"恶灵箭雨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"腐败锁链\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"100\"></td><td><pre> * @author Anonymous 2023/7/25 14:37</pre></td></tr><tr><td data-num=\"101\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token class-name\">HappyWindBoy</span> happyWindBoy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HappyWindBoy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token class-name\">Varus</span> varus <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Varus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        happyWindBoy<span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        happyWindBoy<span class=\"token punctuation\">.</span><span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        happyWindBoy<span class=\"token punctuation\">.</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        happyWindBoy<span class=\"token punctuation\">.</span><span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        varus<span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        varus<span class=\"token punctuation\">.</span><span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        varus<span class=\"token punctuation\">.</span><span class=\"token function\">w</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        varus<span class=\"token punctuation\">.</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>执行结果:</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    踏前斩</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    斩钢闪</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    狂风绝息斩</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    风之障壁</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    恶灵箭雨</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    穿刺之箭</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    枯萎箭袋</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    腐败锁链</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"2-类作为方法参数案例\"><a class=\"anchor\" href=\"#2-类作为方法参数案例\">#</a> 2. 类作为方法参数案例</h4>\n<blockquote>\n<p>后期的项目代码中，基本上所有的参数都是类对象形式，类对象作为数据的载体或者方法的执行者，作为方法参数方式提供给方法执行。</p>\n</blockquote>\n<blockquote>\n<p>案例:</p>\n<p>​\t修理汽车，修理轮胎</p>\n<p>修理厂类</p>\n<ul>\n<li>属性：店名，地址，联系方式</li>\n<li>行为：修车</li>\n</ul>\n<p>汽车类</p>\n<ul>\n<li>属性：品牌，颜色，轮胎个数</li>\n<li>行为：飙车</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>汽车类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_repaired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/25 15:59</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> wheelCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  \t<span class=\"token comment\">// 根据所需完成 Constructor 和 Getter and Setter 方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    功能方法，飙车</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        轮胎个数 == 4 可以飙车，如果小于 4 需要去修理厂</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">==</span> wheelCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开着\"</span> <span class=\"token operator\">+</span> color <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"在金梭路 15 KM/H 狂飙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"轮胎有问题！！！需要去修理厂！！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>修理厂</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_repaired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/25 16:07</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> telephone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 根据所需完成 Constructor 和 Getter and Setter 方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    核心功能方法</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        修理汽车方法，该方法所需参数是 Car 类型的对象。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 修理汽车方法，方法要求提供的参数是 Car 类型的对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param car Car 类型对象。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fix</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> car<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 判断实际参数 Car 类型对象轮胎个数数据情况</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span><span class=\"token function\">getWheelCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 需要进行修理</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"轮胎出现问题，修理中~~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 修理完毕，汽车的轮胎个数 ==> 4</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            car<span class=\"token punctuation\">.</span><span class=\"token function\">setWheelCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本次维修费用 20W 美元\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您的车辆没有任何的问题！！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>执行代码</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_repaired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/25 16:03</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 实例化 Car 类型对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Car</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"布加迪威龙\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"黑色\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            car<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 程序暂停 0.5 S</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"轮胎 Boom！！！掉了两个！！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        car<span class=\"token punctuation\">.</span><span class=\"token function\">setWheelCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        car<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 实例化一个修理厂对象</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Factory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"狗鸽黑心修理厂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"唐宁街 10 号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setTelephone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"138后面随便\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        通过修理厂对象，调用 fix 方法，修理汽车，方法需要的参数</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        是 Car 类型的对象</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">fix</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            car<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 程序暂停 0.5 S</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3-自定义类型作为成员变量\"><a class=\"anchor\" href=\"#3-自定义类型作为成员变量\">#</a> 3. 自定义类型作为成员变量</h4>\n<blockquote>\n<p>键盘类</p>\n<ul>\n<li>属性：品牌名称，按键个数</li>\n</ul>\n<p>屏幕类</p>\n<ul>\n<li>屏幕：品牌名称，尺寸</li>\n</ul>\n<p>电脑类</p>\n<ul>\n<li>属性：键盘类对象，屏幕类对象</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>键盘类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 键盘类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/25 16:49</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Keyboard</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> keyCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 根据所需完成 Constructor 和 Getter and Setter 方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>屏幕类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 屏幕类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/25 16:50</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Screen</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 根据所需完成 Constructor 和 Getter and Setter 方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>电脑类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>d_computer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 电脑类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/7/25 16:52</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 电脑类键盘成员变量，使用的数据类型是自定义键盘类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Keyboard</span> keyboard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 电脑类屏幕成员变量，使用的数据类型是自定义屏幕类</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Screen</span> screen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 电脑类有参数构造方法，所需参数是键盘类对象和屏幕类对象，需要提供给</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 当前电脑类的是自定义类型的对象。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @param keyboard 键盘类对象</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param screen   屏幕类对象</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Keyboard</span> keyboard<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Screen</span> screen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyboard <span class=\"token operator\">=</span> keyboard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>screen <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Keyboard</span> <span class=\"token function\">getKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> keyboard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 方法的参数所需是 Keyboard 类型，用于替换当前电脑对象的键盘成员变量</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * @param keyboard 键盘类对象</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Keyboard</span> keyboard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyboard <span class=\"token operator\">=</span> keyboard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Screen</span> <span class=\"token function\">getScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> screen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * 方法的参数所需是 Screen 类型，用于替换当前电脑对象的屏幕成员变量</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * @param screen 屏幕类对象</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setScreen</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Screen</span> screen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>screen <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     * 展示当前电脑的配置</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        通过当前 Computer 类对象中的成员变量</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            键盘和屏幕来获取相关的数据信息，键盘和屏幕对象都是【数据的载体】</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"屏幕品牌 : \"</span> <span class=\"token operator\">+</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", 屏幕尺寸 : \"</span> <span class=\"token operator\">+</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键盘品牌 : \"</span> <span class=\"token operator\">+</span> keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", 键盘按键个数 : \"</span> <span class=\"token operator\">+</span> keyboard<span class=\"token punctuation\">.</span><span class=\"token function\">getKeyCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>案例代码</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>d_computer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 【重点】</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *      要什么，给什么，用什么，拿什么</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author Anonymous 2023/7/25 17:05</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        备货:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            键盘类对象，屏幕类对象</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Keyboard</span> keyboard <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cherry 3494 红轴\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">104</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Screen</span> screen <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Screen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dell\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        组装电脑，使用键盘和屏幕类对象作为构造方法参数，实例化 Computer 电脑类对象</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Computer</span> computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span>keyboard<span class=\"token punctuation\">,</span> screen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        查看电脑配置</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        更换键盘</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Keyboard</span> keyboard1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IKBC C87\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">setKeyboard</span><span class=\"token punctuation\">(</span>keyboard1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        查看电脑配置</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        更换屏幕</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Screen</span> screen1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Screen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AOC\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">49F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">setScreen</span><span class=\"token punctuation\">(</span>screen1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        查看电脑配置</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"4-final-关键字\"><a class=\"anchor\" href=\"#4-final-关键字\">#</a> 4. final 关键字</h4>\n<blockquote>\n<p>最终的，不变的</p>\n</blockquote>\n<h5 id=\"41-成员变量重点\"><a class=\"anchor\" href=\"#41-成员变量重点\">#</a> 4.1 成员变量 [重点]</h5>\n<blockquote>\n<p>final 修饰成员变量特征:</p>\n<ul>\n<li>可以认为当前成员变量为【带有名称的常量】</li>\n<li>要求在使用当前常量之前，必须赋值操作【默认值】和【有参数构造方法赋值】</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>e_final</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Variable 'MSG' might not have been initialized</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        MSG 变量可能尚未初始化</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        【方案一】定义时采用默认值方式给予当前 MSG 赋值操作</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        【方案二】利用有参数构造方法，对 final 修饰成员变量进行构造初始化操作。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">MSG</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"不要买钻戒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INFO</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    利用有参数构造方法，在使用当前成员变量之前，对成员变量进行初始化操作，</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    并且赋值操作之后，当前变量的数据内容无法修改，可以认为是带有名称的常量</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    【注意 语法特征】</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        一旦当前类内有程序员自定义构造方法，Java 编译器不在提供任何的无参数构造方法</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        供程序员使用。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        并且如果使用有参数构造方法方式给予 final 修饰成员变量进行赋值操作，当前代码</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        不支持自定义无参数构造方法。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TypeA</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token constant\">INFO</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INFO</span> <span class=\"token operator\">=</span> <span class=\"token constant\">INFO</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @author Anonymous 2023/7/25 19:43</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">TypeA</span> typeA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"买黄金最保值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>typeA<span class=\"token punctuation\">.</span><span class=\"token constant\">MSG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        Cannot assign a value to final variable 'MSG'</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        不允许给 final 修饰的成员变量进行二次赋值操作，</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        final 修饰的成员变量是带有名称的常量</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">//typeA.MSG = \"尤其不要买 DR\";</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>typeA<span class=\"token punctuation\">.</span><span class=\"token constant\">INFO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"42-成员方法\"><a class=\"anchor\" href=\"#42-成员方法\">#</a> 4.2 成员方法</h5>\n<blockquote>\n<p>final 修饰的成员方法</p>\n<ul>\n<li>不可以被子类重写，可以认为是最终方法 / 终极方法。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>e_final</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeB</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我想去成都看熊猫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeC</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TypeB</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    'test ()' cannot override 'test ()' in 'com.qfedu.e_final.TypeB'; overridden method is final</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        TypeC 类无法重写 TypeB 类中的 final 修饰 test 方法。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// @Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// public void test() &#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//     System.out.println (\"我想去重庆吃火锅\");</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * @author Anonymous 2023/7/25 19:58</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">TypeC</span> typeC <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        typeC<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"43-类\"><a class=\"anchor\" href=\"#43-类\">#</a> 4.3 类</h5>\n<blockquote>\n<p>断子绝孙</p>\n<p>final 修饰的类不能被继承，Java 中的部分基础类型采用的就是 final 修饰，例如 String 类型</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>e_final</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Cannot inherit from final 'com.qfedu.e_final.TypeD'</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    不能继承一个 final 修饰的类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeE</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TypeD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @author Anonymous 2023/7/25 20:03</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"44-局部变量\"><a class=\"anchor\" href=\"#44-局部变量\">#</a> 4.4 局部变量</h5>\n<blockquote>\n<p>final 修饰的局部变量不可以二次赋值。一般用于固定数据操作，或者用于延长局部变量【生存周期】</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>e_final</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/25 20:07</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        Variable 'num' might already have been assigned to</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            num 变量可能已经被赋值过了！</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// num = 20;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        面试题</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            Student 成员变量有 &#123;id, name, age&#125;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            final Student stu = new Student ();</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            1. stu = new Student ();</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            2. stu.id = 10;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            3. stu.name = \"张三\";</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            4. stu.age = 16;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            答案:</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                A. 1 × 234 √</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                B. 1 √ 234 ×</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                C. 1234 √</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                D. 1234 ×</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            A</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        final 修饰引用数据类型 / 对象类型</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            【注意一】指向不可变</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            【注意二】指向空间内容数据可变</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"day07static\"><a class=\"anchor\" href=\"#day07static\">#</a> day07static</h2>\n<h4 id=\"1-类加载问题\"><a class=\"anchor\" href=\"#1-类加载问题\">#</a> 1. 类加载问题</h4>\n<pre><code>做某件事情\n\t【准备工作】，需要准备相关的物料，同时不会准备无关的内容。\n游戏中的读条行为\n\t也是在游戏开始之前，准备游戏的相关资源。\n\t\n类加载:\n\tJava 程序在执行之前，JVM 会根据当前程序所需选择加载准备的 .class 二进制可执行字节码文件，所有的 .class 字节码文件准备就绪才会开始执行程序。\n\tJVM 根据程序选择需要加载的 .class 字节码文件，会在程序运行过程中，选择加载哪一个 .class 字节码文件到内存中执行相关程序。\n\n类加载:\n\t1. 程序的准备工作，在程序执行之前准备就绪 【做菜之前备菜】\n\t2. .class 字节码文件会根据程序的执行流程、顺序，在 JVM 的控制下加载到内存中。【做菜流程】\n</code></pre>\n<h4 id=\"2-static-关键字概述\"><a class=\"anchor\" href=\"#2-static-关键字概述\">#</a> 2. static 关键字概述</h4>\n<blockquote>\n<p>可以用于修饰成员变量，成员方法，代码块，技术中重点:</p>\n<ul>\n<li>【没有对象】</li>\n<li>static 修饰内容是随着类文件加载，属于程序的【准备阶段】</li>\n<li>static 修饰成员变量，一般用于类内的统计数据使用，共享资源操作，类唯一变量</li>\n<li>static 修饰成员方法，一般作为工具类方法，使用方便，操作快捷，执行效率高</li>\n<li>static 修饰代码块，一般用于项目的启动阶段必要资源加载，配置文件读取，程序准备操作。</li>\n</ul>\n</blockquote>\n<h4 id=\"3-static-修饰成员变量\"><a class=\"anchor\" href=\"#3-static-修饰成员变量\">#</a> 3. static 修饰成员变量</h4>\n<h5 id=\"31-共享单车引入-static-成员变量概念\"><a class=\"anchor\" href=\"#31-共享单车引入-static-成员变量概念\">#</a> 3.1 共享单车引入 static 成员变量概念</h5>\n<pre><code>共享单车:\n\t1. 占用的空间 属于公共区域，非私人空间\n\t2. 归属权 归属于运营公司\n\t3. 使用权 每一个用户都有使用权\n\t4. 车辆出现问题 所有用户都无法使用\n\t5. 共享单车 属于共享资源\n\n概述:\n\t1. 空间占用 公共\n\t2. 归属权 类\n\t3. 使用权 每一个对象\n\t4. 出现更改 所有使用位置同步修改\n\t5. 共享资源\n</code></pre>\n<h5 id=\"32-static-修饰静态成员变量基本语法实现和特征\"><a class=\"anchor\" href=\"#32-static-修饰静态成员变量基本语法实现和特征\">#</a> 3.2 static 修饰静态成员变量基本语法实现和特征</h5>\n<blockquote>\n<p>特征:</p>\n<ul>\n<li>推荐使用类名调用，不推荐使用类对象调用【没有对象】</li>\n<li>static 修饰的静态成员变量，在类文件加载阶段【程序准备阶段】，在内存的【数据区】申请内存空间，在程序运行之前已经准备就绪，已具备变量存储能力和数据提供能力。生存周期早于类对象出现、【没有对象】</li>\n<li>static 修饰的静态成员变量，对于当前类，当前程序，有且只有一个。无论通过哪一种方式对当前数据进行修改，所有使用到静态成员变量的位置都会收到影响。【共享资源，独一份】</li>\n<li>static 修饰的静态成员变量，也可以称之为【类变量】</li>\n<li>Java 程序退出，首先会销毁实例化对象占用的内存空间，之后在销毁 static 修饰内容占用内存空间，静态成员变量晚于类对象销毁。静态成员变量生存周期和类对象不一致【没有对象】</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_static</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 使用 static 修饰的静态成员变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author Anonymous 2023/7/26 10:02</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// TypeA typeA = new TypeA();</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Static member 'com.qfedu.a_static.TypeA.num' accessed via instance reference</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            static 修饰的成员变量不应该实例化对象调用</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            【推荐】通过类名直接调用</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        静态成员变量从代码执行实现角度，类对象和类名都可以直接调用，类对象调用不符合一定的代码</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        特性要求，但是不违背语法规范。依然推荐使用类名直接调用。【没有对象】</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token comment\">//  System.out.println(typeA.num);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TypeA</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"4-static-修饰静态成员方法\"><a class=\"anchor\" href=\"#4-static-修饰静态成员方法\">#</a> 4. static 修饰静态成员方法</h4>\n<h5 id=\"41-案例\"><a class=\"anchor\" href=\"#41-案例\">#</a> 4.1 案例</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_static</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 静态成员方法演示</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeB</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 非静态成员变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"非静态成员变量\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 静态成员变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> <span class=\"token string\">\"静态成员变量\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 非静态成员方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 静态成员方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        Non-static field 'msg' cannot be referenced from a static context</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            不可以在 static 修饰的区域中，调用非静态成员变量，【没有对象】</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            因为 static 修饰的静态成员方法可以通过类名调用，但是非静态成员变量</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            需要类对象进行调用操作，当前方法不具备对象特征，无法使用，</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// System.out.println(msg);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        Non-static method 'test ()' cannot be referenced from a static context</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            不可以在 static 修饰的静态区域中，调用非静态成员方法。【没有对象】</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            非静态成员方法需要实例化对象调用，但是静态成员方法没有对象存在，无法调用。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// test();</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        难兄难弟，互不嫌弃</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        静态成员方法可以直接使用类内的静态成员变量</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态成员方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"44\"></td><td><pre> * @author Anonymous 2023/7/26 10:52</pre></td></tr><tr><td data-num=\"45\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        静态成员方法可以通过类名直接调用</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">TypeB</span><span class=\"token punctuation\">.</span><span class=\"token function\">testStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">TypeB</span> typeB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        Static member 'com.qfedu.a_static.TypeB.testStatic ()' accessed via instance reference</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            static 修饰的静态成员方法不推荐使用类对象调用。【没有对象】</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        typeB<span class=\"token punctuation\">.</span><span class=\"token function\">testStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"42-静态成员方法特征总结重点\"><a class=\"anchor\" href=\"#42-静态成员方法特征总结重点\">#</a> 4.2 静态成员方法特征总结【重点】</h5>\n<blockquote>\n<ul>\n<li>静态成员方法推荐使用类名调用，不推荐使用类对象调用【没有对象】</li>\n<li>静态成员方法可以直接使用类内的静态成员 (静态成员方法，静态成员变量)【难兄难弟，互不嫌弃】</li>\n<li>静态成员方法不可以使用类内的非静态成员。【没有对象】</li>\n<li>静态成员方法在类文件 (.class 字节码文件) 加载阶段 / 程序准备阶段，在内存的【方法区】准备必要的内存空间存储当前方法的可执行内容，加载之后方法已具备【执行能力】，所有和方法执行相关的内容都已经完成【权限修饰，返回值数据类型，方法名，形式参数列表，方法体，异常】</li>\n<li>静态成员方法通常用于【工具类】封装，提升代码执行效率。</li>\n</ul>\n</blockquote>\n<h5 id=\"43-static-静态成员方法工具类\"><a class=\"anchor\" href=\"#43-static-静态成员方法工具类\">#</a> 4.3 static 静态成员方法工具类</h5>\n<pre><code>为什么静态成员方法执行效率高\n\t1. 时间效率高\n\t2. 空间效率高\n\t非静态成员方法调用需要类对象支持，对象实例化操作需要执行时间和内存空间，相较于静态成员方法效率较低。\n\n成员方法，通过对象调用，期望使用的是对象执行方法的特征性\n静态成员方法，通过类名调用，完成的代码是通识性，通配性方法。\n\n学习 Java 中的数组工具类 Arrays\n\tpublic static void sort(int[] arr);\n\t\tArrays 数组工具类排序方法，采用的排序方式为【双轴快排】。默认升序排序\n\tpublic static String toString(int[] arr);\n\t\t将数组内容元素使用 [] 包含，每一个元素直接使用 逗号 + 空格方式隔开，最终数据反馈形式为字符串形式，描\n\t\t述当前数组存储数据内容情况\n\tpublic static int binarySearch(int[] arr, int target);\t\n\t\t二分法查询，找出指定数据在数组中的下标位置，要求数组必须通过 sort 排序，找到数据返回值大于等于 0，如\n\t\t果没有找到返回负数，\n\t\t【注意】不保证找到的目标数据在数组下标是第几个\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_static</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * Arrays 工具类</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * \tpublic static void sort (int [] arr);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * \t\tArrays 数组工具类排序方法，采用的排序方式为【双轴快排】。默认升序排序</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * \tpublic static String toString (int [] arr);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * \t\t将数组内容元素使用 [] 包含，每一个元素直接使用 逗号 + 空格方式隔开，最终数据反馈形式为字符串形式，描</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * \t\t述当前数组存储数据内容情况</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * \tpublic static int binarySearch (int [] arr, int target);</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * \t\t二分法查询，找出指定数据在数组中的下标位置，要求数组必须通过 sort 排序，找到数据返回值大于等于 0，如</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * \t\t果没有找到返回负数，</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * \t\t【注意】不保证找到的目标数据在数组下标是第几个</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @author Anonymous 2023/7/26 11:32</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"5-static-修饰静态代码块\"><a class=\"anchor\" href=\"#5-static-修饰静态代码块\">#</a> 5. static 修饰静态代码块</h4>\n<h5 id=\"51-什么是代码块\"><a class=\"anchor\" href=\"#51-什么是代码块\">#</a> 5.1 什么是代码块</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造代码块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 局部代码块</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 静态代码块</span></pre></td></tr></table></figure><blockquote>\n<p>构造代码块</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_static</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeC</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     构造代码块，推荐定义位置 在成员变量之后，构造方法之前</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     在 Java 编译器编译当前代码时，会将构造代码块内容填充到每一个构造方法中第一行 [first statement]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     可以认为，在执行当前类内任意构造方法，都会首先执行构造代码块内容</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------构造代码块内容--------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TypeC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------构造方法内容--------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TypeC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------构造方法内容--------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TypeC</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------构造方法内容--------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TypeC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------构造方法内容--------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * @author Anonymous 2023/7/26 14:32</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">TypeC</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">TypeC</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeC</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">TypeC</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeC</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">TypeC</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeC</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token punctuation\">,</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>局部代码块</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_static</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/26 14:40</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        局部代码块，可以限制变量的作用范围，同时提升当前变量占用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        内存的空间的回收效率</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        局部代码块中定义变量，超出大括号范围无法使用。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// System.out.println(i);</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"52-静态代码块\"><a class=\"anchor\" href=\"#52-静态代码块\">#</a> 5.2 静态代码块</h5>\n<blockquote>\n<p>特征:</p>\n<ul>\n<li>静态代码块，在类文件加载过程中一定会执行，有且只执行一次</li>\n<li>静态代码块不可以使用类内的其他非静态成员</li>\n<li>静态代码块可以使用类内的其他静态成员</li>\n<li>静态代码块一般用于项目启动阶段，资源加载，配置文件读取，项目配置加载...</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_static</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 非静态成员变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"非静态成员变量\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 静态成员变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> <span class=\"token string\">\"静态成员变量\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    静态代码块，推荐定义位置在成员变量之后，构造方法之前</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    静态代码块，在类文件加载阶段一定执行，并且有且只执行一次。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    一般用于项目启动阶段，资源加载，配置文件读取，项目配置加载...</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        static 修饰的静态代码块，不可以使用非静态成员变量和非静态成员方法</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        【没有对象】</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        System.out.println (msg);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        test ();</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        static 修饰的静态代码块，可以直接调用类内其他静态成员【难兄难弟，互不嫌弃】</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~~~~静态代码块执行~~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">testStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 非静态成员方法</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"非静态成员方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态成员方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> * @author Anonymous 2023/7/26 14:43</pre></td></tr><tr><td data-num=\"43\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo6</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo6 代码执行~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">TypeD</span> typeD1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">TypeD</span> typeD2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">TypeD</span> typeD3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">TypeD</span> typeD4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">TypeD</span> typeD5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">TypeD</span> typeD6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">TypeD</span> typeD7 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">TypeD</span> typeD8 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"6-静态面试题\"><a class=\"anchor\" href=\"#6-静态面试题\">#</a> 6. 静态面试题</h4>\n<blockquote>\n<p>简单模式</p>\n<ul>\n<li>静态成员变量在类文件加载阶段，申请内存【数据区】内存空间，已具备数据存储能力和数据提供能力。</li>\n<li>静态代码块在类文件加载过程中，一定执行，有且只执行一次，并不是第一个执行。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Demo</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Demo</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Demo</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>以上代码的执行流程:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay07-static%E5%92%8C%E6%8E%A5%E5%8F%A3%5Cimg%5C01-%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%86%E6%9E%90.png\" alt=\"\" /></p>\n<blockquote>\n<p>进阶模式</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Demo</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Demo</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Demo</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>以上代码的执行流程:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay07-static%E5%92%8C%E6%8E%A5%E5%8F%A3%5Cimg%5C02-%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%86%E6%9E%90.png\" alt=\"\" /></p>\n<blockquote>\n<p>地狱模式</p>\n<ul>\n<li>继承情况下实例化对象代码执行流程</li>\n<li>继承情况下加载相关静态资源流程</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Father 构造代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Father 静态代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son 构造代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Son 静态代码块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    隐含知识点:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    \t子类实例化对象过程中，会默认调用父类的无参数构造方法。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    \t【有其父才有其子】</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    \t父类构造方法的使用，是用于初始化父类可以继承给子类对象使用内容的内存空间。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   \t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   \t父类和子类都没有【显式】定义构造方法，Java 编译器会自动提供无参数构造方法，供程序员使用</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   \t同时构造代码块内容会同步到无参数构造方法中</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   \t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    整个代码块执行流程:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    \tFather 静态代码块</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    \tSon 静态代码块</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    \tFather 构造代码块</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    \tSon 构造代码块</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">Son</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"7-静态相关总结\"><a class=\"anchor\" href=\"#7-静态相关总结\">#</a> 7. 静态相关总结</h4>\n<h5 id=\"71-静态成员变量\"><a class=\"anchor\" href=\"#71-静态成员变量\">#</a> 7.1 静态成员变量</h5>\n<blockquote>\n<ul>\n<li>静态成员变量推荐使用类名调用，不推荐使用类对象调用【没有对象】</li>\n<li>静态成员变量在类文件加载阶段，申请内存【数据区】空间，已经具备数据的存储能力和数据提供能力</li>\n<li>静态成员变量在代码中唯一，对于类唯一，对于当前程序也是唯一。</li>\n<li>静态成员变量一般用于共享资源，记录数据操作，一处修改，所有位置都会受到影响。</li>\n<li>静态成员变量也可以称之为【类变量】</li>\n</ul>\n</blockquote>\n<h5 id=\"72-静态成员方法\"><a class=\"anchor\" href=\"#72-静态成员方法\">#</a> 7.2 静态成员方法</h5>\n<blockquote>\n<ul>\n<li>静态成员方法推荐使用类名调用，不推荐使用类对象调用【没有对象】</li>\n<li>静态成员方法可以直接使用类内的其他静态资源</li>\n<li>静态成员方法不可以使用类内非静态资源</li>\n<li>静态成员方法在类文件加载阶段，申请内存【方法区】空间，在方法区中已经具备执行能力，执行相关的所有内容都已准备就绪【权限修饰，返回值类型，方法名，形式参数列表，方法体，异常】</li>\n<li>静态成员方法也可以称之为【类方法】</li>\n<li>静态成员方法常用于工具类封装，代码执行效率高</li>\n</ul>\n</blockquote>\n<h5 id=\"73-静态代码块\"><a class=\"anchor\" href=\"#73-静态代码块\">#</a> 7.3 静态代码块</h5>\n<blockquote>\n<ul>\n<li>静态代码块在类文件加载阶段一定执行，有且只执行一次。</li>\n<li>静态代码块可以直接使用类内的其他静态资源</li>\n<li>静态代码块不可以使用类内非静态资源</li>\n<li>静态代码块常用于项目启动阶段资源加载，配置加载，程序准备...</li>\n</ul>\n</blockquote>\n<h5 id=\"74-静态资源内存图\"><a class=\"anchor\" href=\"#74-静态资源内存图\">#</a> 7.4 静态资源内存图</h5>\n<p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay07-static%E5%92%8C%E6%8E%A5%E5%8F%A3%5Cimg%5C03-%E9%9D%99%E6%80%81%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90.png\" alt=\"\" /></p>\n<h2 id=\"接口-interface\"><a class=\"anchor\" href=\"#接口-interface\">#</a> 接口 interface</h2>\n<h4 id=\"1-生活中的接口\"><a class=\"anchor\" href=\"#1-生活中的接口\">#</a> 1. 生活中的接口</h4>\n<pre><code>接口:\n\tUSB HDMI TypeC USB-C 3.5MM mirco-usb nona-usb VGA RJ45\n\n接口功能：\n\t1. 拓展功能，可以在当前设备的基础上，通过接口连接不同的设备，拓展功能\n\t\t例如 USB 接口连接 摄像头设备，鼠标设备，移动硬盘设备\n\t2. 制定规范，制定标准，满足一致化操作。\n\n知晓:\n\t1. 接口能够做什么是接口连接的设备来决定的，非接口本身。接口只是决定了该做什么，而不是去做什么\n\t2. 接口存在固定，公开的数据。\n</code></pre>\n<h4 id=\"2-java-中的接口\"><a class=\"anchor\" href=\"#2-java-中的接口\">#</a> 2. Java 中的接口</h4>\n<h5 id=\"21-基本语法规则和关键字\"><a class=\"anchor\" href=\"#21-基本语法规则和关键字\">#</a> 2.1 基本语法规则和关键字</h5>\n<blockquote>\n<p>接口定义的关键字: interface</p>\n<p>接口的定义格式:</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> 接口名 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 成员变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 成员方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>接口名要求符合大驼峰命名法，见名知意。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>也可以认为接口是一个特殊的【类】</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr></table></figure><blockquote>\n<p>遵从接口关键字: implements</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeA</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>代码案例</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_interface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 自定义 A 接口</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Variable 'num' might not have been initialized</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        num 变量可能尚未初始化？？？</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Java 中接口成员变量【缺省属性 / 默认属性】 public static final</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    interface abstract methods cannot have body</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        接口中 abstract 修饰的成员方法不能有方法体</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Java 中接口成员方法【缺省属性 / 默认属性】 public abstract</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * TypeA 类遵从接口 A ，需要实现接口 A 所有缺省属性 / 默认属性为 public abstract 修饰方法。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> * TypeA 类是接口 A 的实现类</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeA</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TypeA 类实现接口 A 中的成员方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> * @author Anonymous 2023/7/26 16:39</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">TypeA</span> typeA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TypeA</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        typeA<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"day08接口和多态\"><a class=\"anchor\" href=\"#day08接口和多态\">#</a> day08 接口和多态</h2>\n<h4 id=\"1-接口\"><a class=\"anchor\" href=\"#1-接口\">#</a> 1. 接口</h4>\n<h5 id=\"11-接口的特色语法\"><a class=\"anchor\" href=\"#11-接口的特色语法\">#</a> 1.1 接口的特色语法</h5>\n<h6 id=\"111-一个类可以同时遵从多个接口\"><a class=\"anchor\" href=\"#111-一个类可以同时遵从多个接口\">#</a> 1.1.1 一个类可以同时遵从多个接口</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_interface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 接口 A testA 方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 听 A 的</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 听 B 的</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> * TypeA 同时遵从接口 A 和 接口 B ，不同的接口之间使用</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * 逗号隔开</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeA</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * TypeA 遵从接口 A 实现的 testA 方法</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TypeA 接口实现 testA 方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TypeA 遵从接口 A  B 中有方法声明完全一致的方法，需要实现一次即可\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TypeA 接口实现 testB 方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * 一个类遵从多个接口</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> * @author Anonymous 2023/7/27 9:36</pre></td></tr><tr><td data-num=\"52\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">TypeA</span> typeA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        typeA<span class=\"token punctuation\">.</span><span class=\"token function\">testA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        typeA<span class=\"token punctuation\">.</span><span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"112-接口可以继承其他接口并且允许多继承\"><a class=\"anchor\" href=\"#112-接口可以继承其他接口并且允许多继承\">#</a> 1.1.2 接口可以继承其他接口，并且允许多继承</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_interface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">USB1_0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">usb10Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">USB2_0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">usb20Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * USB 3.0 接口继承 USB1_0, USB2_0 接口。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">USB3_0</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">USB1_0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">USB2_0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">usb30Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Udisk</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">USB3_0</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">usb10Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USB 1.0 协议实现\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">usb20Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USB 2.0 协议实现\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">usb30Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USB 3.0 协议实现\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> * 接口继承其他继承，并且允许多继承</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> * @author Anonymous 2023/7/27 9:46</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Udisk</span> udisk <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Udisk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        udisk<span class=\"token punctuation\">.</span><span class=\"token function\">usb10Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        udisk<span class=\"token punctuation\">.</span><span class=\"token function\">usb20Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        udisk<span class=\"token punctuation\">.</span><span class=\"token function\">usb30Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"113-default-关键字使用\"><a class=\"anchor\" href=\"#113-default-关键字使用\">#</a> 1.1.3 default 关键字使用</h6>\n<blockquote>\n<p>在 JDK 1.8 版本以上，接口可以使用  default 关键字修饰方法，为默认方法，允许有方法体。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_interface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * default 修饰的方法支持方法体存在</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接口中的默认方法，default 修饰\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeB</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接口中的缺省属性为 public abstract 修饰方法实现\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[重写]接口当前的 default 修饰默认方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * default 关键字修饰接口中方法，为默认方法，允许有方法体</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> * @author Anonymous 2023/7/27 9:51</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">TypeB</span> typeB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        typeB<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        typeB<span class=\"token punctuation\">.</span><span class=\"token function\">testDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"114-类可以继承父类的同时遵从接口\"><a class=\"anchor\" href=\"#114-类可以继承父类的同时遵从接口\">#</a> 1.1.4 类可以继承父类的同时，遵从接口</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_interface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"坦克大战\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * 类首先继承父类，之后遵从接口</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WOT 坦克世界\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"遵从接口要求实现的方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> * 类继承父类同时遵从接口</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> * @author Anonymous 2023/7/27 9:59</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Son</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        son<span class=\"token punctuation\">.</span><span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        son<span class=\"token punctuation\">.</span><span class=\"token function\">testD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"12-后续接口知识点\"><a class=\"anchor\" href=\"#12-后续接口知识点\">#</a> 1.2 后续接口知识点</h5>\n<blockquote>\n<ul>\n<li>匿名内部类</li>\n<li>Lambda 表达式</li>\n<li>函数式接口</li>\n<li>Stream 流</li>\n<li>方法引用</li>\n<li>MVC 设计模式接口连接套路</li>\n</ul>\n</blockquote>\n<h4 id=\"2-多态\"><a class=\"anchor\" href=\"#2-多态\">#</a> 2. 多态</h4>\n<h5 id=\"21-动物园\"><a class=\"anchor\" href=\"#21-动物园\">#</a> 2.1 动物园</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 动物类的父类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>猴子，老虎，熊猫都是动物类的子类。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Monkey</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tiger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Panda</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * 多态的总结；</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *      1. 方法所需类型为父类类型，提供给当前方法作为方法实际参数的类型，可以是父类类型本身</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> *      或者其子类对象</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> *          拓宽方法的参数支持范围，也可以降低开发的压力。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> *      2. 方法返回值类型为父类类型，可以直接返回父类对象本身，获取其子类对象，可以拓宽方法</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> *      返回值数据范围</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> *      3. 强制类型转换，大数据类型转换为小数据类型，需要明确类型的一致性。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * @author Anonymous 2023/7/27 10:54</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Animal</span> animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Monkey</span> monkey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Monkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Tiger</span> tiger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tiger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Panda</span> panda <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Panda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">feedAnimal</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        Monkey 类对象继承 Animal 类，可以认为是 Animal 类型</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">feedAnimal</span><span class=\"token punctuation\">(</span>monkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        Tiger 类对象继承 Animal 类，可以认为是 Animal 类型</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">feedAnimal</span><span class=\"token punctuation\">(</span>tiger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        Panda 类对象继承 Animal 类，可以认为是 Animal 类型</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">feedAnimal</span><span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        调用领养动物方法</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        显式类型: Animal 类型</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        真实类型: Panda 类型</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            父类引用指向子类对象。</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            Panda 继承 Animal ，是 Animal 类的一个子类，可以认为是 Animal 类型</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            符合数据类型一致化原则，这里包含【类型自动向上转型】</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                可以将 Panda 看做是 Animal 类型</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">Animal</span> animal1 <span class=\"token operator\">=</span> <span class=\"token function\">getAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        【强制类型转换】</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        已知 animal1 对象真实数据类型为 Panda 类型，考虑到后期更好的使用，</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        强制类型转换为 Panda 类型</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            (Panda) 强制类型转换格式，告知 Java 编译器，当前 animal1 对应的</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            对象转换为 Panda 类型</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            【注意】</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                如果 animal1 对应的对象非 Panda 类型，运行时报错</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                ClassCastException 类型转换异常</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token class-name\">Panda</span> panda1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Panda</span><span class=\"token punctuation\">)</span> animal1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"展示:\"</span> <span class=\"token operator\">+</span> panda1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>     * 喂食动物的方法，需要的参数是 Animal 动物类对象。</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>     * @param animal Animal 动物类对象</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">feedAnimal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animal</span> animal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        animal.getClass () 可以获取当前对象对应的具体数据类型</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 来吃饭了~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>     * 从动物园领养一只动物，方法返回值类型为 Animal 类型</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>     * @return Animal 对象</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Animal</span> <span class=\"token function\">getAnimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Panda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        return new Animal();</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        return new Tiger();</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        return new Monkey();</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"E:/qneiwangtong/JavaEE2310/Day08-%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%A4%9A%E6%80%81%E5%92%8C%E6%B3%9B%E5%9E%8B/img/01-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E8%B4%A6%E5%9B%BE%E4%BE%8B.png\" alt=\"\" /></p>\n<h5 id=\"22-usb-接口和-usb-设备\"><a class=\"anchor\" href=\"#22-usb-接口和-usb-设备\">#</a> 2.2 USB 接口和 USB 设备</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">USB</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * USB 接口规定 USB 设备必须实现的方法，在方法中描述</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * USB 设备对应的功能。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * 键盘 遵从 USB 接口</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * 键盘是【USB 设备】</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Keyboard</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">USB</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键盘连接电脑，作为输入设备\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * IKBC 继承 Keyboard ，间接遵从 USB 接口</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * 也可以认为是 USB 接口实现类 / USB 设备</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IKBC</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Keyboard</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IKBC C87 茶轴/红轴\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * 鼠标 遵从 USB 接口</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> * 鼠标是【USB 设备】</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">USB</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鼠标连接电脑，控制光标\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre> * Logi 继承 Mouse 类。间接遵从 USB 接口</pre></td></tr><tr><td data-num=\"46\"></td><td><pre> * 也可以认为是 USB 接口实现类 / USB 设备</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Logi</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Mouse</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logi G502 Hero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     * 电脑类使用 USB 接口方法，参数对应的数据类型为 USB 接口类型</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     * 相当于当前电脑预留了 USB 接口用于连接 USB 设备。</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     * 【方法所需参数为接口类型，执行方法所需实际参数为接口实现类对象】</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     * @param usb USB 接口类型，实际参数是 USB 接口的实现类，可以理解为 USB 设备</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">useUsbInterface</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">USB</span> usb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        貌似是 USB 接口的引用调用了 USB 接口的 connect () 方法</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        看上去 connect () 方法没有方法体！！！</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        在方法的实际执行过程中，USB usb 引用指向的是一个 USB 接口的实现类对象</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        实现类已经实现了 connect () 方法功能！！！</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        当前代码只是描述 USB 设备应该执行的方法是哪一个。</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        usb<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"78\"></td><td><pre> * 接口多态特征:</pre></td></tr><tr><td data-num=\"79\"></td><td><pre> *      1. 方法参数类型为接口类型，方法执行实际参数是接口的实现类对象。</pre></td></tr><tr><td data-num=\"80\"></td><td><pre> *      2. 方法参数类型为接口类型，可以传入的实际参数为接口实现类或者接口的间接实现类</pre></td></tr><tr><td data-num=\"81\"></td><td><pre> *      拓宽了方法的参数范围</pre></td></tr><tr><td data-num=\"82\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"83\"></td><td><pre> * @author Anonymous 2023/7/27 14:40</pre></td></tr><tr><td data-num=\"84\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token class-name\">Computer</span> computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token class-name\">Mouse</span> mouse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token class-name\">Keyboard</span> keyboard <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        Computer 类对象调用 useUsbInterface 方法，传入参数</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        Keyboard 对象和 Mouse 对象，都是 USB 接口实现类对象 / USB 设备</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">useUsbInterface</span><span class=\"token punctuation\">(</span>mouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">useUsbInterface</span><span class=\"token punctuation\">(</span>keyboard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token class-name\">IKBC</span> ikbc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IKBC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token class-name\">Logi</span> logi <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Logi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">useUsbInterface</span><span class=\"token punctuation\">(</span>ikbc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">useUsbInterface</span><span class=\"token punctuation\">(</span>logi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        Lambda 表达式</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">useUsbInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这里是一个没有外壳的鼠标\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        Function Reference 方法引用【四饼】</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">useUsbInterface</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Demo2</span><span class=\"token operator\">::</span><span class=\"token function\">test</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这里是一个非量产的键盘\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"23-多态总结\"><a class=\"anchor\" href=\"#23-多态总结\">#</a> 2.3 多态总结</h5>\n<blockquote>\n<ul>\n<li>编译看左，运行看右\n<ul>\n<li>编译看左：Java 编译代码过程中，以左侧的大类型为主，右侧数据只要是子类或者实现类即可</li>\n<li>运行看右：运行过程中会根据右侧的真实类型，来执行目标方法，提供目标数据</li>\n</ul>\n</li>\n<li>父类的引用指向子类对象</li>\n<li>接口的引用指向实现类对象</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>作用:</p>\n<ul>\n<li>拓宽方法的参数支持范围\n<ul>\n<li>方法所需参数为父类类型，可以给予当前方法的实际参数父类对象或者其子类对象</li>\n<li>方法所需参数为接口类型，可以给予当前方法的实际参数是接口的实现类对象或者间接实现类对象</li>\n</ul>\n</li>\n<li>拓宽方法的返回值类型范围\n<ul>\n<li>方法返回值类型为父类类型，可以返回的数据类型包括父类对象本身或者其子类对象</li>\n<li>方法返回值类型为接口类型，可以返回的数据类型是接口的实现类或者间接实现类</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>[toc]</p>\n<h2 id=\"泛型重点\"><a class=\"anchor\" href=\"#泛型重点\">#</a> 泛型【重点】</h2>\n<h4 id=\"1-泛型\"><a class=\"anchor\" href=\"#1-泛型\">#</a> 1. 泛型</h4>\n<h5 id=\"11-泛型体验卡\"><a class=\"anchor\" href=\"#11-泛型体验卡\">#</a> 1.1 泛型体验卡</h5>\n<blockquote>\n<p>传统形式</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 泛型体验卡</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 补充知识点：方法的重载【reload】</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     1. 在同一个类内或者接口内</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     2. 要求方法名称必须完全一致</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     3. 要求方法的形式参数列表不一致，数据类型，数据格式，数据顺序。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *     4. Java 编译器会根据实际参数数据类型，选择目标方法执行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *      【方法调用执行的两大要素 方法名 + 实际参数数据类型】</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author Anonymous 2023/7/27 15:56</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.5F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        以上方法调用都是展示【数据】，只不过是不同类型的【数据】</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        核心目标 展示【数据】</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户提供数据:\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户提供数据:\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户提供数据:\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户提供数据:\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>引入泛型操作对应的效果</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 泛型体验卡</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @author Anonymous 2023/7/27 15:56</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.5F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t * 原本情况</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t * \t\t&lt;T>void com.qfedu.c_generic.Demo1.printValue (T t)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t * 方法调用实际参数提供之后的数据形式</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t * \t\t&lt;String> void com.qfedu.c_generic.Demo1.printValue (String t)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t * </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t * 方法调用提供的实际参数数据类型为 String 类型，当前方法使用的泛型 T 约束的具体数据类型为 String 类型</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t * 所有使用到泛型 T 的位置都是字符串 String 类型</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t * </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t * 泛型支持数据类型多样性，但是一旦确定泛型对应的具体数据类型，严格遵守数据类型一致化原则</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t * 以上方法调用都是展示【数据】，只不过是不同类型的【数据】 核心目标 展示【数据】</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t * 当前方法声明告知采用【泛型 T】 操作 </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t * </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t * @param &lt;T> 告知 Java 编译器当前方法使用的泛型占位符为 T </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t * @param t 参数类型为泛型 T 类型，对应的具体数据类型由【实际参数决定】</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户提供数据:\"</span> <span class=\"token operator\">+</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"E:/qneiwangtong/JavaEE2310/Day08-%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%A4%9A%E6%80%81%E5%92%8C%E6%B3%9B%E5%9E%8B/img/02-%E6%B3%9B%E5%9E%8B%E4%BD%93%E9%AA%8C%E5%8D%A1%E6%96%B9%E6%B3%95%E6%95%88%E6%9E%9C.png\" alt=\"\" /></p>\n<h5 id=\"12-泛型概述\"><a class=\"anchor\" href=\"#12-泛型概述\">#</a> 1.2 泛型概述</h5>\n<pre><code>泛型基本格式:\n\t&lt;自定义无意义大写单个英文字母占位符&gt;\n\t推荐:\n\t\t&lt;T&gt; Type     类型\n\t\t&lt;E&gt; Element  元素\n\t\t&lt;K&gt; Key      键\n\t\t&lt;V&gt; Value    值\n\t\t&lt;R&gt; Return   返回值\n\t主要用于方法的【增强】，偶尔用于成员变量和局部变量\n\t\n可以约束的内容:\n\t1. 单一方法\n\t2. 类\n\t3. 接口\n\t\t气管炎模式\n\t\t自由模式\n</code></pre>\n<h5 id=\"13-泛型增强单一方法\"><a class=\"anchor\" href=\"#13-泛型增强单一方法\">#</a> 1.3 泛型增强单一方法</h5>\n<blockquote>\n<p>格式要求</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>修饰符 <span class=\"token operator\">&lt;</span>自定义泛型占位符<span class=\"token operator\">></span> 返回值类型 方法名<span class=\"token punctuation\">(</span>形式参数列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 方法体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>要求:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t1. 方法参数列表中必须有一个参数对应自定义泛型，用于在方法调用过程中，明确泛型对应的具体数据类型。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t如果没有【语法报错】</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t2. 方法的返回值可以利用自定义泛型</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t3. 方法体中的局部变量可以声明自定义泛型变量</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr></table></figure></blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 泛型约束单一方法案例</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t * &lt;Integer> Integer com.qfedu.c_generic.Demo2.getType (Integer t)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t * tips: Integer ==> int </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t * </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t * 实际参数类型为 int 类型，当前方法所有泛型对应具体数据类型都是 int 类型</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t * &lt;String> String com.qfedu.c_generic.Demo2.getType (String t)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t * </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t * 实际参数类型为 String 类型，当前方法所有泛型对应具体数据类型都是 String 类型</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"泛型咯咯哒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">Demo2</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t * &lt;Demo2> Demo2 com.qfedu.c_generic.Demo2.getType (Demo2 t)</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t * </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t * 实际参数类型为 Demo2 类型，当前方法所有泛型对应具体数据类型都是 Demo2 类型</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">Demo2</span> d1 <span class=\"token operator\">=</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t * 当前方法所有使用到的数据都是泛型占位符，具体数据类型有调用过程中，、</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t * 实际参数对应 数据类型进行【约束操作】</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t * </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t * @param &lt;T> 自定义泛型占位符</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t * @param t   形式列表参数，参数数据类型为自定义泛型 T ，需要实际参数约束对应的具体数据类型</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t * @return 自定义泛型 T 对应的具体数据类型，需要根据参数形式来确定</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"14-泛型增强类目标核心还是方法\"><a class=\"anchor\" href=\"#14-泛型增强类目标核心还是方法\">#</a> 1.4 泛型增强类，目标核心还是方法</h5>\n<blockquote>\n<p>格式要求</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> 类名<span class=\"token operator\">&lt;</span>自定义泛型占位符<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 推荐成员方法可以使用自定义泛型<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 不推荐<span class=\"token operator\">/</span>不建议成员变量使用自定义泛型<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>要求:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t1. 泛型对应的具体数据类型需要在实例化对象过程中约束</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t例如: class TypeA&lt;T> &#123;...&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t \tEclipse</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t \t\tTypeA&lt;String> t1 = new TypeA&lt;String>();</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t \t\t约束当前 TypeA 类对象 t1，所有使用到泛型位置对应具体数据类型为 String 类型</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t \t\tTypeA&lt;Demo1> t2 = new TypeA&lt;Demo1>();</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t \t\t约束当前 TypeA 类对象 t2，所有使用到泛型位置对应具体数据类型为 Demo1 类型</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t \tIDEA</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t \t\tTypeA&lt;String> t1 = new TypeA&lt;>();</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t \t\t约束当前 TypeA 类对象 t1，所有使用到泛型位置对应具体数据类型为 String 类型</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t \t\tTypeA&lt;Demo1> t2 = new TypeA&lt;>();</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t \t\t约束当前 TypeA 类对象 t2，所有使用到泛型位置对应具体数据类型为 Demo1 类型</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t2. 所有使用泛型的方法，泛型对应具体数据类型根据当前实例化对象约束明确</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t3. 【强制建议】任何一个带有自定义泛型的类，在使用之前必须实例化对象约束泛型对应的具体类型。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*/</span></pre></td></tr></table></figure></blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 自定义类型带有泛型占位符 T</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeA</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t * 当前方法使用的泛型是 类声明泛型，泛型对应的具体数据类型需要实例化对象明确</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t * </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t * @param t 泛型对应参数，具体数据类型依赖于实例化对象操作</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t * @return 泛型对应参数，具体数据类型依赖于实例化对象操作</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t * 知识点:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t * \t1. static 修饰的静态成员方法在类文件加载阶段已经具备执行能力。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t *  2. 类声明泛型，需要在实例化对象之后，才可以明确泛型对应的具体数据类型。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t * </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t * 解释错误:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t * \tstatic 修饰的静态成员方法使用类名声明的泛型，两者生命周期不同，无法满足</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t *  静态方法在加载之后的执行能力，无法明确泛型对应的具体数据类型</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t *  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t * 解决方案:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t * \tstatic 修饰静态成员方法，自定义泛型使用，但是推荐和类名使用不同的泛型</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t *  占位符，提升代码的阅读性</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">A</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t * 实例化对象约束泛型对应的具体数据类型为 String 类型</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">TypeA</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeA</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t * 当前 getType 方法泛型对应具体数据类型为 String 类型</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> string <span class=\"token operator\">=</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t * 实例化对象约束泛型对应的具体数据类型为 int 类型</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token class-name\">TypeA</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeA</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t * 当前 getType 方法泛型对应具体数据类型为 int 类型</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t * 实例化对象过程没有明确泛型对应的具体数据类型，当前对象</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t * 所有泛型对应数据位置都是 Object 类型</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t * 【墙裂 / 强烈不推荐】</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token class-name\">TypeA</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tt3<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tt3<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"321321\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tt3<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"15-泛型增强接口目标核心还是方法\"><a class=\"anchor\" href=\"#15-泛型增强接口目标核心还是方法\">#</a> 1.5 泛型增强接口，目标核心还是方法</h5>\n<blockquote>\n<p>格式要求:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> 接口名<span class=\"token operator\">&lt;</span>自定义泛型占位符<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 成员变量不得使用自定义泛型<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 成员方法和<span class=\"token keyword\">default</span> 修饰方法可以使用自定义泛型<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>要求:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t1. 成员变量缺省属性为 public static final 要求定义时必须初始化，如果使用自定义泛型，泛型在没有明确</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t对应具体数据类型的情况下，无法选择合适的数据进行初始化操作。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t2. 缺省属性为 public abstract 修饰的成员方法和 default 修饰成员方法推荐使用泛型，接口的泛型就是为</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t了方法</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t3. 接口中泛型对应的具体数据类型有两种形式约束</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t3.1 妻管严模式 【使用最多】</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t3.2 媳妇回娘家 (自由) 模式</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr></table></figure></blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_generic</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 带有自定义泛型的接口</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @author Anonymous</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @param &lt;T> 自定义泛型占位符</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t * 方法使用的泛型为接口声明的泛型 </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t * </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t * @param t 自定义泛型类型</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t * @return 自定义泛型类型</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token class-name\">T</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * 媳妇回娘家 (自由) 模式</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * \t\t你媳妇告诉你要吃饭【约束】，类型自行选择</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * 自定义类带有泛型，泛型和接口泛型一致，没有明确的数据类型约束</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * 当前泛型对应的具体数据类型由实例化对象过程约束，比较自由。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeB</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">A</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t * 方法泛型 T 依然还是占位符形式</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> * 妻管严模式 【使用最多】</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> * \t\t你媳妇告诉你要吃饭【约束】，并且限制了吃饭的类型</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"40\"></td><td><pre> * 类遵从带有接口的泛型， 在遵从接口的同时，泛型直接明确约束指定数据类型</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> * 类实现接口中带有泛型的方法，泛型对应的具体数据类型和接口遵从声明一致</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeC</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">A</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t * 实现接口中带有自定义泛型的方法，泛型对应的具体数据类型已明确</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t * 无法修改！！！</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token comment\">// TODO Auto-generated method stub</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t * 泛型对应的具体数据类型需要实例化对象过程约束，当前约束泛型对应具体</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t * 数据类型为 String 类型</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token class-name\">TypeB</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeB</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串类型\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t * 泛型对应的具体数据类型需要实例化对象过程约束，当前约束泛型对应具体</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t * 数据类型为 Integer 类型</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token class-name\">TypeB</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeB</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token class-name\">TypeC</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> type <span class=\"token operator\">=</span> t3<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"气管炎模式\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"day09异常\"><a class=\"anchor\" href=\"#day09异常\">#</a> day09 异常</h2>\n<h4 id=\"1-异常概述\"><a class=\"anchor\" href=\"#1-异常概述\">#</a> 1. 异常概述</h4>\n<blockquote>\n<p>异常是代码运行过程中，抛出到程序中的错误 / 异常信息，可以告示程序员当前程序运行有那些问题，有那些必要要求有预案处理的问题。</p>\n<p>今天的课程讲完之后只需要记住 Alt + Enter + Enter</p>\n<p>ExceptionHandler</p>\n</blockquote>\n<h4 id=\"2-异常相关类型和相关方法\"><a class=\"anchor\" href=\"#2-异常相关类型和相关方法\">#</a> 2. 异常相关类型和相关方法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Throwable</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Java</span> 中的所有异常<span class=\"token operator\">/</span>错误的基类，主要规定了异常<span class=\"token operator\">/</span>错误必须有【message 信息】</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Exception</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">Java</span> 中的异常，异常可以处理，处理之后 <span class=\"token constant\">JVM</span> 认为代码中没有任何的异常</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Error</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">Java</span> 中的错误，无法处理，只能避免。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Throwable</span> 相关方法</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t构造方法<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t无参数构造方法，一般情况下是 <span class=\"token constant\">JVM</span> 调用，实例化当前异常对象进行异常提示<span class=\"token operator\">/</span>抛出</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tmessage 作为 <span class=\"token class-name\">Throwable</span> 对象的异常<span class=\"token operator\">/</span>错误信息，实例化 <span class=\"token class-name\">Throwable</span> 对象</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t成员方法<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t获取当前异常<span class=\"token operator\">/</span>错误的信息描述</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t获取当前异常<span class=\"token operator\">/</span>错误的简要信息描述，包括异常<span class=\"token operator\">/</span>错误类型和异常<span class=\"token operator\">/</span>错误信息</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t在控制台展示当前异常<span class=\"token operator\">/</span>错误的前因后果</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_throwable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/28 10:06</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Throwable</span> throwable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"兜里没有钱异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message: \"</span> <span class=\"token operator\">+</span> throwable<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString: \"</span> <span class=\"token operator\">+</span> throwable<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Throwable</span> throwable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"23333333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        throwable<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3-exception-和-error-的区别\"><a class=\"anchor\" href=\"#3-exception-和-error-的区别\">#</a> 3. Exception 和 Error 的区别</h4>\n<pre><code>Exception 异常，可以处置\n\tJava 中所有的异常类型都是以 Exception 结尾。\n\t\tNullPointerException ArrayIndexOutOfBoundsException\n\t处理方式:\n\t\t1. 抛出\n\t\t2. 捕获\n\t异常分类：\n\t\t1. 运行时异常 RuntimeException\n\t\t2. 编译时异常\n\t\nError 错误，只能避免\n\tJava 中所有的错误类型都是以 Error 结尾。\n\t\tIOError OutOfMemoryError\n</code></pre>\n<h4 id=\"4-抛出异常\"><a class=\"anchor\" href=\"#4-抛出异常\">#</a> 4. 抛出异常</h4>\n<blockquote>\n<p>涉及到的关键字:</p>\n<ul>\n<li>\n<p>throw    在方法中通过条件判断之后，明确抛出异常对象。</p>\n</li>\n<li>\n<p>throws  在方法的【声明位置】告知方法调用者，当前方法有那些异常抛出</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_throwable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileNotFoundException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author Anonymous 2023/7/28 10:56</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 方法内部通过判断抛出了指定异常，需要在方法的声明位置，明确告知方法的调用</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 者当前方法有异常抛出</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 方法可以在声明告知对外声明多个异常情况，不同的异常通过，隔开</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param filePath 文件路径</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @throws FileNotFoundException 用户提供路径对应的文件不存在</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @throws InterruptedException 线程中断异常</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">FileNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        首先对应用户提供的路径进行基本情况判断</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        用户提供的 filePath 是否为 null，或者 filePath 对应的路径是否为 \"\" 空字符串</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> filePath <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            在判断用户提供的数据之后，选择抛出异常 FileNotFoundException，</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            实例化 FileNotFoundException 异常对象，并且赋予异常信息</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            当前方法有明确的异常抛出，但是没有在方法的声明位置告知方法调用者，</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            当前方法有异常情况</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        代码运行暂停 1 s</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        Thread.sleep (1000) 抛出 InterruptedException</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * 【调用方法带有明确的异常抛出，选择抛出异常处理】</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * 异常演示方法，需要在方法声明位置告知调用当前方法的异常抛出情况，明确告知用户那些情况会导致</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 当前异常的出现。</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     * @param filePath 文件路径</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * @throws FileNotFoundException 用户提供路径对应的文件不存在</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">openFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        代码中如果出现错误情况，错误情况对应的是【编译时异常提示】，需要明确处理当前异常类型</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        Alt + Enter 来处理当前异常情况</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            选择 在方法声明位置抛出异常。</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            FileInputStream 抛出 FileNotFoundException</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        close 抛出 IOException</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        fileInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"5-捕获异常\"><a class=\"anchor\" href=\"#5-捕获异常\">#</a> 5.  捕获异常</h4>\n<blockquote>\n<p>语法格式:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">// 有可能出现异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 异常类型对象 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// 针对于当前异常的处理方式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 异常类型对象 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">// 针对于当前异常的处理方式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h4 id=\"6-捕获和抛出异常\"><a class=\"anchor\" href=\"#6-捕获和抛出异常\">#</a> 6. 捕获和抛出异常</h4>\n<p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay09-%E5%BC%82%E5%B8%B8%EF%BC%8C%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95%5Cimg%5C01-%E6%8A%9B%E5%87%BA%E5%92%8C%E6%8D%95%E8%8E%B7%E5%9C%BA%E6%99%AF%E5%AF%B9%E6%AF%94.png\" alt=\"\" /></p>\n<h2 id=\"day10集合重点\"><a class=\"anchor\" href=\"#day10集合重点\">#</a> day10 集合【重点】</h2>\n<h4 id=\"1-集合概述\"><a class=\"anchor\" href=\"#1-集合概述\">#</a> 1. 集合概述</h4>\n<pre><code>数组作为基本的大量数据存储方式，有以下问题\n\t1. 数据类型支持单一\n\t2. 配套功能方法较少，需要程序自行完成，并且具有一定的数据类型约束性。\n\t3. 数组容量无法修改，动态数据存储无法满足。\n\t\nJava 中的【集合 Collection】就可以处理以上问题\n\t1. 数据类型支持多样性，同时可以保证数据类型一致化要求，存在泛型约束\n\t2. 配套方法众多，配套工具类，以及 Stream 流可以满足集合的操作方便性\n\t3. 容量问题不需要调用者考虑，自动扩容。\n</code></pre>\n<h4 id=\"2-集合的类型架构\"><a class=\"anchor\" href=\"#2-集合的类型架构\">#</a> 2. 集合的类型架构</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Java</span> 中所有集合的总接口，规定了集合的基本方法，基本形式。并且带有泛型约束。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">|</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">List</span> 集合接口，特征：有序，可重复</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token operator\">--</span><span class=\"token operator\">|</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t底层数据存储结构采用的是 <span class=\"token class-name\">Object</span> 类型数组，特征<span class=\"token operator\">:</span> 增删慢，查询快</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token operator\">--</span><span class=\"token operator\">|</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t底层数据存储结构采用的是【双向有头链表】，特征<span class=\"token operator\">:</span> 增删快，查询慢</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token operator\">--</span><span class=\"token operator\">|</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t底层数据存储结构采用的是 <span class=\"token class-name\">Object</span> 类型数组，源自于 <span class=\"token constant\">JDK1</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span>，相较于 <span class=\"token class-name\">ArrayList</span> 性能较差，线程安全</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">|</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token class-name\">Set</span> 集合接口，特征：无序，不可重复</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token operator\">--</span><span class=\"token operator\">|</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t底层数据存储结构采用的是【哈希表】结构，存储效率极高</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token operator\">--</span><span class=\"token operator\">|</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t底层数据存储结构采用的是【平衡二叉树】结构，【重点】要求添加的元素有自然顺序，或者可排序规则</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">TreeSet</span> 或补充重点知识 <span class=\"token class-name\">Comparator</span> 和 <span class=\"token class-name\">Comparable</span> 接口</pre></td></tr></table></figure><h4 id=\"3-collection-集合相关方法\"><a class=\"anchor\" href=\"#3-collection-集合相关方法\">#</a> 3. Collection 集合相关方法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>增</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t当前集合中，添加实例化集合对象泛型约束对应具体数据类型对象。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t当前集合中，添加另一个集合对象，要求参数集合对象存储的元素为当前集合约束类型或者其子类类型</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>删</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t删除当前集合中指定的元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t调用方法集合中，删除与参数集合的交集</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t调用方法集合中，仅保留与参数集合的交集</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t清空整个集合中的元素。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>查</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t获取集合中存储的有效元素个数。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t判断当前集合是否为空，如果为空，返回 <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t判断当前集合是否包含参数对象</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t判断参数集合是否为当前集合的子集合</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t集合中所有元素打包为 <span class=\"token class-name\">Object</span> 类型数组返回</pre></td></tr></table></figure><h4 id=\"补充知识点泛型的上限\"><a class=\"anchor\" href=\"#补充知识点泛型的上限\">#</a> 【补充知识点】泛型的上限</h4>\n<pre><code>&lt;? extends E&gt;\n\nclass Animal &#123;&#125;\nclass Tiger extends Animal &#123;&#125;\nclass Panda extends Animal &#123;&#125;\nclass Monkey extends Animal &#123;&#125;\n\n? 是一个通配符，可以表示任意类型\nextends 表示继承关系\nE 是泛型，由实例化对象约束明确\n\nCollection&lt;Animal&gt;\n\taddAll(Collection&lt;? extends Animal&gt; c);\n\t要求参数集合中的存储类型为 Animal 类型或者其子类类型\n\t相当于这里要求的最高类型为 Animal 类型，做了一个上限约束！！\n\n【建议】\n\t在真实的开发场景中，要求类型完全一致化，虽然有上限或者下限约束，但是基本上都是对应指定类型。\n\t严格遵守数据类型一致化要求。\n</code></pre>\n<h4 id=\"4-list-集合\"><a class=\"anchor\" href=\"#4-list-集合\">#</a> 4. List 集合</h4>\n<h5 id=\"41-list-集合特征\"><a class=\"anchor\" href=\"#41-list-集合特征\">#</a> 4.1 List 集合特征</h5>\n<blockquote>\n<p>有序：添加顺序和存储顺序一致，存在【下标】关系</p>\n<p>可重复: List 集合中存储的元素可以重复</p>\n</blockquote>\n<h5 id=\"42-list-集合常用方法\"><a class=\"anchor\" href=\"#42-list-集合常用方法\">#</a> 4.2 List 集合常用方法</h5>\n<blockquote>\n<p>List 集合相关方法因为存在下标概念，方法中都补充了针对于下标的相关操作。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>增</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t添加在实例化对象过程中约束泛型对应具体数据类型元素对象。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t添加参数集合到当前调用方法集合中，要求参数集合对象存储数据类型必须是当前集合对象实例化过程中，约束泛型对应具体数据类型，或者其子类类型。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t在指定下标位置，添加在实例化对象过程中约束泛型对应具体数据类型元素对象。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t在指定下标位置，添加参数集合到当前调用方法集合中，要求参数集合对象存储数据类型必须是当前集合对象实例化过程中，约束泛型对应具体数据类型，或者其子类类型。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>删</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t在当前<span class=\"token class-name\">List</span>集合中，删除指定下标元素，返回值是被删除元素对象本身</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t在当前集合中，删除指定元素</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t在当前集合中，删除参数集合和当前集合的交集</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t在当前集合中，仅保留参数集合和当前集合的交集</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t清空当前集合中所有数据内容</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>改</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token class-name\">E</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t在 <span class=\"token class-name\">List</span> 集合中，使用符合实例化对象过程中约束泛型对应具体数据类型对象，替换指定下标元素，返回值是被替换元素对象本身</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>查</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t当前集合中有效元素个数</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t判断当前集合是否为空</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t判断参数对象是否在当前集合中存在</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t判断参数集合是否是当前集合的子集合</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t返回当前集合中所有元素对象的<span class=\"token class-name\">Object</span>类型数组</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token class-name\">E</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t在当前集合中，获取指定下标元素</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t获取指定元素在当前集合中第一次出现的下标位置</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t获取指定元素在当前集合中最后一次出现的下标位置</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fromIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> toIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t从 fromIndex 下标开始，到 toIndex 下标结束，获取子集合对象，要求要头不要尾</pre></td></tr></table></figure><h5 id=\"43-arraylist-特征分析\"><a class=\"anchor\" href=\"#43-arraylist-特征分析\">#</a> 4.3 ArrayList 特征分析</h5>\n<h6 id=\"431-arraylist-结构特征\"><a class=\"anchor\" href=\"#431-arraylist-结构特征\">#</a> 4.3.1 ArrayList 结构特征</h6>\n<blockquote>\n<p>ArrayList 底层数据存储采用的是 Object 数组形式，基于数组数据存储的特征，数据存储效果【增删慢，查询快】</p>\n</blockquote>\n<blockquote>\n<p>增删慢</p>\n<ul>\n<li>增加删除操作，有可能会导致数组中的元素整体移动，移动过程，效率较低。【时间浪费】</li>\n<li>删除操作有可能会导致数组中容量和有效元素比例失衡，例如：容量为 10 亿，有效元素个数为 10 个，会导致大量的空间浪费，也会触发【缩容 trimToSize ()】操作。【空间浪费，时间浪费】</li>\n<li>添加操作有可能会触发【扩容 grow ()】，因为数组容量一旦确定无法修改，当底层 Object 数组不足元素添加使用，需要进行扩容操作，扩容操作流程中，涉及到新的空间占用和数据移动。【空间浪费，时间浪费】</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>查询快</p>\n</blockquote>\n<p><img data-src=\"E:/qneiwangtong/JavaEE2310/Day10-%E9%9B%86%E5%90%88%EF%BC%8CList%E5%92%8CArrayList%E5%8E%9F%E7%A0%81/img/01-%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E5%88%86%E6%9E%90%E5%9B%BE.png\" alt=\"\" /></p>\n<h6 id=\"432-arraylist-使用场景分析\"><a class=\"anchor\" href=\"#432-arraylist-使用场景分析\">#</a> 4.3.2 ArrayList 使用场景分析</h6>\n<blockquote>\n<p>已知数据容量，可以在实例化 ArrayList 集合对象时，明确当前数据的容量存储范围，采用尾插法方式将数据逐一放入到集合中，对于数组元素增删慢弊端就可以避免，方便后期作为数组搜索，排序，查询等相关操作。</p>\n<ul>\n<li>数据库查询目标内容</li>\n<li>前端提交数据解析</li>\n</ul>\n</blockquote>\n<h5 id=\"44-arraylist-原码实现\"><a class=\"anchor\" href=\"#44-arraylist-原码实现\">#</a> 4.4 ArrayList 原码实现</h5>\n<h6 id=\"441-数据存储结构和构造方法基本设计\"><a class=\"anchor\" href=\"#441-数据存储结构和构造方法基本设计\">#</a> 4.4.1 数据存储结构和构造方法基本设计</h6>\n<blockquote>\n<p>底层数据存储结构为数组结构 Object []，提供给用户两个构造方法，分别是</p>\n<ul>\n<li>无参数构造方法，需要提供 ArrayList 基本数据存储能力，需要【默认容量 DEFAULT_CAPACITY】</li>\n<li>根据用户指定 int 范围底层数组容量作为初始化容量大小的构造方法</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/7/31 16:00</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    底层 Object 类型数组选择</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        - 静态 static 修饰</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            会导致所有 MyArrayList 类对象使用的数组是同一个，无法满足数据独立性和特征性需求。【不合适】</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        - 非静态</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            实例化 MyArrayList 对象，每一个对象中都是独立的一个 Object 类型数组，具备特征性和独立性</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     private 修饰</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        不能对外公开，会导致当前数据丢失，有一定的风险，针对于当前底层存储的数组所有操作都应该是通过</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        MyArrayList 方法来进行操作，保证数据安全。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     数组需要初始化容量吗？？？</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 底层用于存储数据的 Object 类型数组</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 数组允许的最大容量</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAX_ARRAY_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span> <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * 无参数构造方法，实例化对象过程中，底层 Object 类型数组默认容量</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * 无参数构造方法，在实例化 MyArrayList 对象时，底层 elements 存储数组的容量</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 容量为默认容量 10</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        elements <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token constant\">DEFAULT_CAPACITY</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     * 根据用户提供的初始化底层数组容量，在实例化 MyArrayList 对象过程中，对于底层</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * 存储数据的 Object 数组进行容量限制，采用 initialCapacity</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     * @param initialCapacity 用户指定的初始化容量</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyArrayList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        initialCapacity 用户提供的初始化容量数据必须在合法的容量以内</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        大于等于 0 并且 在 int 范围以内</pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        Java 规定数组允许的容量范围是 0 ~ int 最大值 - 8</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        int 最大值 - 8，需要预留一定的内存空间，给予数组相关配套信息空间存储，</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        例如：数组名.length 获取数组容量属性操作，该属性需要占用一定的数组内存。</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> initialCapacity <span class=\"token operator\">></span> <span class=\"token constant\">MAX_ARRAY_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            抛出非法参数异常</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户指定的底层数组容量不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        elements <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>initialCapacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"442-add-相关操作\"><a class=\"anchor\" href=\"#442-add-相关操作\">#</a> 4.4.2 add 相关操作</h6>\n<blockquote>\n<p>相关方法:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>有且只需要完成带有下标限制的添加方法，就可以给用户提供不同的操作套餐。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token constant\">XXX</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token constant\">XXX</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>【重点】尾插法变量选择</strong></p>\n<ol>\n<li>\n<p><strong>记录添加数据的下标位置</strong></p>\n</li>\n<li>\n<p><strong>记录有效元素个数</strong></p>\n</li>\n</ol>\n<ul>\n<li>静态成员变量\n<ul>\n<li>因为静态成员变量对于当前类有且只有一个，不具备特征性和独立性，无法满足多个对象直接数据不同的情况【不合适】</li>\n</ul>\n</li>\n<li>成员变量\n<ul>\n<li>每一个对象都有独立的成员变量，并且相互之间独立，满足数据生命周期所需。【选择】</li>\n</ul>\n</li>\n<li>局部变量\n<ul>\n<li>每一次调用方法，局部变量都是重新定义，不能记录之前的数据内容，无法满足数据统计和尾插法需求【不合适】</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 在当前 MyArrayList 集合末尾添加目标元素，添加的元素必须符合实例化对象泛型要求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param e 用户指定添加的元素内容</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @return 添加成功返回 true</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * 用户指定下标位置添加目标元素内容，要求下标在合法范围以内，添加的元素必须符合实例化对象</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * 泛型要求</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @param index 用户指定添加数据的下标位置</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @param e     用户指定添加的元素内容</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @return 添加成功返回 true</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 1. 判断用户指定的下标位置是否合法，用户所有操作数据的范围上限 size 范围以内。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayIndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数下标越界异常:\"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 2. 从原本最后一个有效下标位置开始，到用户指定的添加数据下标结束，移动数据</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        elements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 3. 用户指定下标位置赋值为 目标数据内容</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    elements<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 4. 有效元素个数 + 1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    size <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"443-扩容方法思路和实现\"><a class=\"anchor\" href=\"#443-扩容方法思路和实现\">#</a> 4.4.3 扩容方法思路和实现</h6>\n<blockquote>\n<p>扩容思路</p>\n<ul>\n<li>添加数据操作中，如果发现当前数组的容量无法满足有效元素个数需求，需要进行扩容操作。</li>\n</ul>\n</blockquote>\n<pre><code>教室容量 60 人 班级学生人数 55 人\n新来小伙伴 10 人，目前教室容量无法满足需求。\n我去找校长！！！\n目前班级作为无法满足学生需求，我需要换教室。最小容量需求【55 + 10 ==&gt; 65】\n校长根据情况，你原来教室容量多少? 60 个座位，校长说给你一个 90 人的教室，可以不? \n非常可以！！！需要判断新教室容量是否满足最小容量需求\n\n学生搬东西到新教室\n教室门口的信息，修改为原班级信息\n</code></pre>\n<blockquote>\n<p>核心思路:</p>\n<ol>\n<li>知晓最小容量需求，原有效元素个数 + 添加的数据元素个数。</li>\n<li>获取原数组容量</li>\n<li>计算得到新数组容量，大约是原数组容量的 1.5 倍</li>\n<li>计算得到的新数组容量是否满足最小容量需求，如果不能满足，新数组容量按照最小容量需求完成。</li>\n<li>判断新数组容量是否超出 MAX_ARRAY_SIZE，无能为力，【Error OOM】</li>\n<li>根据新数组容量，创建新数组</li>\n<li>原数组数据内容移动到新数组中</li>\n<li>MyArrayList 底层 elements 保存新数组地址</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 添加配套方法，用于添加操作容量不足的情况下，进行扩容操作、</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param minCapacity 最小容量需求</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *                    1. 知晓最小容量需求，原有效元素个数 + 添加的数据元素个数。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/* 2. 获取原数组容量 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> oldCapacity <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/* 3. 计算得到新数组容量，大约是原数组容量的 1.5 倍 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> oldCapacity <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> oldCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/* 4. 计算得到的新数组容量是否满足最小容量需求，如果不能满足，新数组容量按照最小容量需求完成。 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">&lt;</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        newCapacity <span class=\"token operator\">=</span> minCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/* 5. 判断新数组容量是否超出 MAX_ARRAY_SIZE，无能为力，【Error OOM】*/</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">></span> <span class=\"token constant\">MAX_ARRAY_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutOfMemoryError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超出当前数组允许的最大容量范围\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    6. 根据新数组容量，创建新数组</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    7. 原数组数据内容移动到新数组中</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    8. MyArrayList 底层 elements 保存新数组地址</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    public static &lt;T> T [] copyOf (T [] t, int size);</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        根据用户指定的新数组容量创建和当前参数数组类型一致的新数组，并且</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        将原数组数据移动到新数组中，返回值是新数组地址。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    elements <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"day11linkedlist-set\"><a class=\"anchor\" href=\"#day11linkedlist-set\">#</a> day11LinkedList, Set</h2>\n<h4 id=\"1-linkedlist\"><a class=\"anchor\" href=\"#1-linkedlist\">#</a> 1. LinkedList</h4>\n<h5 id=\"11-有头双向链表图例\"><a class=\"anchor\" href=\"#11-有头双向链表图例\">#</a> 1.1 有头双向链表图例</h5>\n<p><img data-src=\"E:/qneiwangtong/JavaEE2310/Day11-ArrayList%E5%8E%9F%E7%A0%81%E5%92%8CLinkedList/01-LinkedList%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\" /></p>\n<h5 id=\"12-linkedlist-涉及到的方法\"><a class=\"anchor\" href=\"#12-linkedlist-涉及到的方法\">#</a> 1.2 LinkedList 涉及到的方法</h5>\n<blockquote>\n<p>LinkedList 是 List 接口的实现类，List 接口中所有方法都可以使用，针对于 LinkedList 头尾操作效率较高的情况，针对性的提供了以下方法</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t在 <span class=\"token class-name\">LinkedList</span> 集合末尾添加元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    在 <span class=\"token class-name\">LinkedList</span> 集合头部添加元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">E</span> <span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t获取 <span class=\"token class-name\">LinkedList</span> 最后一个结点元素存储数据内容</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">E</span> <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t获取 <span class=\"token class-name\">LinkedList</span> 第一个结点元素存储数据内容</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">E</span> <span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t删除 <span class=\"token class-name\">LinkedList</span> 集合最后一个结点数据，同时返回值是被删除的数据内容</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">E</span> <span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t删除 <span class=\"token class-name\">LinkedList</span> 集合第一个结点数据，同时返回值是被删除的数据内容</pre></td></tr></table></figure><h2 id=\"day12set-map-和-string-字符串\"><a class=\"anchor\" href=\"#day12set-map-和-string-字符串\">#</a> day12Set ，Map 和 String 字符串</h2>\n<h4 id=\"1-set\"><a class=\"anchor\" href=\"#1-set\">#</a> 1. Set</h4>\n<blockquote>\n<p>核心知识点:</p>\n<ul>\n<li>equals 和 hashCode 方法</li>\n<li>Comparator 和 Comparable 接口使用</li>\n</ul>\n</blockquote>\n<h5 id=\"11-set-概述\"><a class=\"anchor\" href=\"#11-set-概述\">#</a> 1.1 Set 概述</h5>\n<blockquote>\n<p>Set 所使用的方法都是 Collection 集合方法。</p>\n<p>interface Set&lt;E&gt;</p>\n<p>--| class  HashSet&lt;E&gt; implements Set&lt;E&gt; 哈希表形式存储数据内容，需要对象的【hashCode】方法支持</p>\n<p>--| class  TreeSet&lt;E&gt; implements Set&lt;E&gt; 底层存储数据结构为【平衡二叉树】，要求添加的数据内容有自然顺序或者比较方式</p>\n<p>特征：无序，不可重复</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashSet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author Anonymous 2023/8/2 9:56</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        无序 添加顺序和存储不一致，有可能会受到添加数据顺序情况影响</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        不可重复 Set 集合中不允许出现相同元素</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"母鸡汤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驴肉汤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"疙瘩汤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"胡辣汤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"老鸭汤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"羊肉汤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"牛肉汤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"丸子汤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"12-hashset-存储数据要求和流程\"><a class=\"anchor\" href=\"#12-hashset-存储数据要求和流程\">#</a> 1.2 HashSet 存储数据要求和流程</h5>\n<h6 id=\"121-补充知识点-equals-和-hashcode-方法\"><a class=\"anchor\" href=\"#121-补充知识点-equals-和-hashcode-方法\">#</a> 1.2.1 【补充知识点】 equals 和 hashCode 方法</h6>\n<pre><code>Object 类内方法\n\tboolean equals(Object obj);\t\n\t\t判断调用方法对象和当前参数对象是否为同一个对象\n\t\t【注意】\n\t\t\t== 判断是否等值关系，有且只可以使用在基本数据类型\n\t\t\t引用数据类型需要进行等值判断，必须采用 equals 方法\n\t\t\n\tint hashCode();\t\n\t\t获取当前对象的 哈希值，哈希值可以认为是当前对象在内存中的【身份证号码】唯一标识\n\t\t\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Alt + Insert 快捷键重写 equals 和 hashCode</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    this 表示调用当前方法的对象，o 是参数对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    == 判断，判断调用方法对象和参数对象是否为同地址对象，100% 同一个对象</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    1. 参数变量为 null 【错误条件】</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    2. getClass () != o.getClass () 判断调用方法对象数据类型和参数对象数据类型是否不一致。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    如果参数为 null 或者参数对象类型和当前调用方法类型不一致，直接返回 false</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     [强制类型转换] 通过以上两个 if 条件判断，可以明确参数真实类型为 Student，同时</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     参数对象和当前调用方法对象不是同一个对象，可以进行强转之后取值判断内容情况</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 根据调用方法对象数据内容和参数对象数据内容进行比对，如果完全一致，返回 true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> id <span class=\"token operator\">==</span> student<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&amp;&amp;</span> age <span class=\"token operator\">==</span> student<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>hashCode 要求</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    如果两个对象 equals 方法判断结果为 true ，hashCode 结果必须一致。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    IDEA 重写 hashCode 方法逻辑是【参与 equals 判断比较的成员变量全部参与 hashCode 数据实现】</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Objects Object 工具类</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        public static int hash (Object... args);</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            根据提供的数据内容，生成对应的哈希值，不要关注哈希值如何生成。</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            【重点】Object... args 可变长参数</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                当前方法参数类型要求为 Object 类型，可以支持 Java 中的任意数据类型</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                同时当前参数个数不做限制，可以一个，可以多个，可以没有</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                不定长参数在方法内部是一个【对应数据类型数组】</pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        hashCode 重写不会影响对象的真实地址，只是修改了 哈希值规则，原本采用内存地址方式</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        现在采用指定数据内容生成方式、</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"122-hashset-存储元素和-equals-hashcode-方法关系\"><a class=\"anchor\" href=\"#122-hashset-存储元素和-equals-hashcode-方法关系\">#</a> 1.2.2 hashSet 存储元素和 equals hashCode 方法关系</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashSet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/8/2 11:05</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        1. Student 类型已经完成了 equals 和 hashCode 方法重写</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        2. Set 中数据存储不可以重复。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        【重点】</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            1. HashSet 存储元素需要调用元素的 hashCode 方法，获取对应的 哈希值</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                为什么要获取哈希值？</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                hashSet 需要根据当前对象的 哈希值，给予对象分配房间【单元格】</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            2. 如果出现了添加元素 hashCode 数据一致，对应的存储单元格位置一致，需要</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                目前已存储到单元格中的元素，调用 equals 方法和后续元素比较，如果结果为 true</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                无法添加后续元素</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">boolean</span> ret <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        ret <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"13-treeset\"><a class=\"anchor\" href=\"#13-treeset\">#</a> 1.3 TreeSet</h5>\n<h6 id=\"131-树形结构\"><a class=\"anchor\" href=\"#131-树形结构\">#</a> 1.3.1 树形结构</h6>\n<p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay12%5Cimg%5C01-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0.png\" alt=\"\" /></p>\n<h6 id=\"132-treeset-存储自定义类型问题和解决方案\"><a class=\"anchor\" href=\"#132-treeset-存储自定义类型问题和解决方案\">#</a> 1.3.2 TreeSet 存储自定义类型问题和解决方案</h6>\n<blockquote>\n<p>【解决方式一】<br />\n自定义类型遵从【Comparable 接口】，增强自定义类型为可比较类型。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * 自定义类遵从【Comparable 接口】，需要完成 compareTo 方法，当前接口有泛型约束，通常情况下</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 当前泛型约束方式为【气管炎方式】，遵从接口时直接明确泛型对应的具体数据类型为当前增强类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    * Comparable&lt;T> 接口实现类，在存储到需要进行排序的结构中，或者进行排序操作，都会自动执行 compareTo</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    * 方法，相当于当前类型已具备【自然顺序】</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    * @param o 泛型约束的具体数据对象</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    * @return 返回值为 0 表示两个元素一致，其他数据存在大小关系。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>【解决方式二】【常用方式】<br />\nTreeSet 构造方法提供 Comparator 接口实现类对象作为方法参数，Comparator 接口实现类提供针对于当前 TreeSet 存储类型比较形式。【Comparator  比较器接口】</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t* 比较器接口要求完成的方法，泛型对应的具体数据类型需要在实现类遵从接口时明确，采用【气管炎模式】</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t* 方法返回值类型为 int 类型，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t* @param o1 泛型约束数据类型对应对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t* @param o2 泛型约束数据类型对应对象</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t* @return 返回值为 0 表示两个元素一致，其他数据存在大小关系。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>以上解决方式推荐使用 方式二</p>\n<p>方式一增强目标存储类型，会导致代码冗余，同时代码的灵活性不足，如果需要修改功能，需要对源码进行修改</p>\n</blockquote>\n<h4 id=\"2-comparator-接口完成统一排序算法\"><a class=\"anchor\" href=\"#2-comparator-接口完成统一排序算法\">#</a> 2. Comparator 接口完成统一排序算法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_compare</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 期望可以完成针对于任意数据类型，用户指定条件的排序算法，不限于已知类型。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 使用的技术：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *  1. 泛型</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *      a. 增强方法</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *      b. 满足数据类型多样性，同时严格遵守数据类型一致化原则。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *  2. Comparator 接口</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *      指定规则，拓宽功能</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @author Anonymous 2023/8/2 16:02</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">SingleTeacher</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> teas <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleTeacher</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleTeacher</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleTeacher</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleTeacher</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleTeacher</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleTeacher</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleTeacher</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleTeacher</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cats <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"豆包\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"豆包\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"豆包\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"豆包\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"豆包\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"豆包\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"豆包\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"豆包\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"老师类型，ID 升序降序\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>teas<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySingleTeacherIDDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"猫咪类型，年龄升序排序\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>cats<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cat</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * 使用泛型约束数组类型，同时要求 Comparator 接口采用泛型约束，方法中泛型对应的</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * 具体数据类型由实际参数数组来约束。数组的实际类型，同时约束方法中 Comparator 接口</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 泛型类型和方法中使用的变量泛型类型</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     * @param arr 需要进行排序的任意类型数组</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * @param com 针对于用户提供的实际参数数组类型 Comparator 比较器实现</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     * @param &lt;T> 自定义泛型</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> com<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 数据拷贝，保护源数据</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sortTemp <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 选择排序算法</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sortTemp<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 找极值</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sortTemp<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                需要使用 Comparator 接口来替换排序规则，替换代码中排序算法找极值的规则</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                 */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>com<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>sortTemp<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sortTemp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    index <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">// 交换位置</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token class-name\">T</span> temp <span class=\"token operator\">=</span> sortTemp<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                sortTemp<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sortTemp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                sortTemp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>sortTemp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"day13stringmap和反射\"><a class=\"anchor\" href=\"#day13stringmap和反射\">#</a> day13String，Map 和反射</h2>\n<h4 id=\"1-string\"><a class=\"anchor\" href=\"#1-string\">#</a> 1. String</h4>\n<h5 id=\"11-字符串比较和内存分析\"><a class=\"anchor\" href=\"#11-字符串比较和内存分析\">#</a> 1.1 字符串比较和内存分析</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/8/3 9:07</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"常用方法很重要\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"常用方法很重要\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"常用方法很重要\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> str4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        Java 中规定，字符串常量内容如果一致，在内存中有且只有一个。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        == 判断有且只是判断变量存储的数据内容情况，无法判断引用数据类型指向空间内容情况</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1 == str2 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str2 == str3 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>str2 <span class=\"token operator\">==</span> str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str3 == str4 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>str3 <span class=\"token operator\">==</span> str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1 == str4 : \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        equals 方法是 Object 类内方法，在 String 中进行了重写，比较字符串内容。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1.equals(str2) : \"</span> <span class=\"token operator\">+</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str2.equals(str3) : \"</span> <span class=\"token operator\">+</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str3.equals(str4) : \"</span> <span class=\"token operator\">+</span> str3<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1.equals(str4) : \"</span> <span class=\"token operator\">+</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"12-获取方法\"><a class=\"anchor\" href=\"#12-获取方法\">#</a> 1.2 获取方法</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t获取当前字符串有效字符个数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t获取当前字符串中指定下标的对应的字符，<span class=\"token class-name\">StringIndexOutOfBoundsException</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t在当前字符串中找出指定字符第一次出现的下标位置。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t【说明】\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 字符对于计算机而言都是【编码值】，可以认为是 <span class=\"token keyword\">int</span> 类型</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 数据类型所需为 <span class=\"token keyword\">int</span> 类型，但是实际上在 <span class=\"token keyword\">int</span> 类型内存中，有且只有 低 <span class=\"token number\">16</span> 位有效</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t在当前字符串中找出指定字符串第一次出现的下标位置。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t在当前字符串中找出指定字符最后一次出现的下标位置。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t在当前字符串中找出指定字符串最后一次出现的下标位置。</pre></td></tr></table></figure><h5 id=\"13-判断方法\"><a class=\"anchor\" href=\"#13-判断方法\">#</a> 1.3 判断方法</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t判断当前字符串是否以指定参数字符串结尾</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t判断当前字符串是否以指定参数字符串开头</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token constant\">JDK</span> <span class=\"token number\">1.6</span> 版本以上有效，判断当前字符串是否为空，空字符串 <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">Override</span> method in <span class=\"token class-name\">Type</span> <span class=\"token class-name\">Object</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    重写 <span class=\"token class-name\">Object</span> 方法，判断两个字符串是否一致</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t忽略大小写比较字符串是否一致。</pre></td></tr></table></figure><h5 id=\"14-转换方法\"><a class=\"anchor\" href=\"#14-转换方法\">#</a> 1.4 转换方法</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t【构造方法】将字符数组转换为字符串</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t【构造方法】将字符数组转换为字符串，要求从指定下标 off 位置开始，计数 len 长度字符内容，转换为目标字符串</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\toff <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tlen <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"bcd\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t【静态成员方法】将字符数组转换为字符串</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t【静态成员方法】将字符数组转换为字符串，要求从指定下标 off 位置开始，计数 len 长度字符内容，转换为目标字符串</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\toff <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tlen <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"bcd\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t将字符串内容，转换为字符数组</pre></td></tr></table></figure><h5 id=\"15-其他方法\"><a class=\"anchor\" href=\"#15-其他方法\">#</a> 1.5 其他方法</h5>\n<blockquote>\n<ul>\n<li>以下方法操作返回值类型都是字符串类型，或者字符串数组类型</li>\n<li>以下方法操作对于原字符串内容无任何影响，所有的执行效果，都是通过返回值得到新的字符串内容，字符串是一个【常量】</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> oldChar<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> newChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t调用方法字符串使用新的字符，替换指定的老字符，返回值类型为替换之后的字符串结果</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t【重点方法】调用方法字符串根据，参数字符串内容进行字符串切割操作。结果内容为字符串数组</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    例如<span class=\"token operator\">:</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"className:com.qfedu.entity.Student\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> className<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tarr <span class=\"token operator\">==</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"com.qfedu.entity.Student\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t调用方法字符串，从指定下标位置开始，到字符串末尾结束，获取子字符串内容</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t调用方法字符串，从指定下标位置开始，到指定下标结束结束，获取子字符串内容，范围要求要头不要尾</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t调用方法字符串所有英文字符转换为大写</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t调用方法字符串所有英文字符转换为小写</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t去除字符串两端无效空格</pre></td></tr></table></figure><h5 id=\"16-字符串常量面试题\"><a class=\"anchor\" href=\"#16-字符串常量面试题\">#</a> 1.6 字符串常量面试题</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 【字符串是一个常量】</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 字符串 + 拼接累加操作会在内存中形成新的字符串</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 10 + 9 + 1 ==> 20</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * JDK 1.8 及其以上版本 字符串常量累加操作会转换为 StringBuilder 操作，效率较高，内存占用较少</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @author Anonymous 2023/8/3 10:23</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo6</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"胡辣汤\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"油饼\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"水煎包\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"葱油饼\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"油条\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"油馍头\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"牛肉盒子\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"韭菜盒子\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"茄子包子\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        str <span class=\"token operator\">+=</span> <span class=\"token string\">\"茶叶蛋\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这里有几个字符串???\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2-map-非常多\"><a class=\"anchor\" href=\"#2-map-非常多\">#</a> 2. Map 【非常多】</h4>\n<blockquote>\n<p>键值对概念：实际开发中大量存在，前端用户提交的数据内容，后端数据库存储内容，JSON 格式文本，XML 格式文本都是采用键值对数据形式存储，阅读良好，操作方便。</p>\n</blockquote>\n<h5 id=\"21-map-相关类型\"><a class=\"anchor\" href=\"#21-map-相关类型\">#</a> 2.1 Map 相关类型</h5>\n<blockquote>\n<p>interface Map&lt;K, V&gt; Map 双边队列总接口</p>\n<p>--| class HashMap&lt;K, V&gt; implements  Map&lt;K, V&gt;</p>\n<p>​\t底层数据存储方式采用的是哈希表方式，键值对数据存储的位置由 Key 哈希值决定</p>\n<p>--| class TreeMap&lt;K, V&gt; implements  Map&lt;K, V&gt;</p>\n<p>​\t底层数据存储方式采用的是二叉树方式，要求键值对中的 Key 必须有自然顺序或者可比较方式。</p>\n</blockquote>\n<h5 id=\"22-map-相关方法\"><a class=\"anchor\" href=\"#22-map-相关方法\">#</a> 2.2 Map 相关方法</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>增</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t添加键值对数据到当前 <span class=\"token class-name\">Map</span> 双边队列中，要求 <span class=\"token class-name\">K</span> 和 <span class=\"token class-name\">V</span> 类型必须符合实例化 <span class=\"token class-name\">Map</span> 双边队列约束的泛型类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t添加参数 <span class=\"token class-name\">Map</span> 到当前 <span class=\"token class-name\">Map</span> 双边队列中，要求参数 <span class=\"token class-name\">Map</span> 存储 <span class=\"token class-name\">K</span> 和 <span class=\"token class-name\">V</span> 数据类型必须和当前调用方法 <span class=\"token class-name\">Map</span> 一致 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>删</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">V</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t根据 <span class=\"token class-name\">K</span> 删除 <span class=\"token class-name\">Map</span> 中的键值对数据内容，返回值是 <span class=\"token class-name\">K</span> 对应的 <span class=\"token class-name\">V</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t根据 <span class=\"token class-name\">K</span> 和 <span class=\"token class-name\">V</span> 删除 <span class=\"token class-name\">Map</span> 中的键值对数据</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>改</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t如果对应 <span class=\"token class-name\">K</span> 存在，使用参数 <span class=\"token class-name\">V</span> 替换原本的数据</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>查</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t获取当前 <span class=\"token class-name\">Map</span> 双边队列中键值对个数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t判断当前 <span class=\"token class-name\">Map</span> 键值对个数是否为 <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t判断当前 <span class=\"token class-name\">Map</span> 中是否包含指定的 <span class=\"token class-name\">K</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">containsValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t判断当前 <span class=\"token class-name\">Map</span> 中是否包含指定的 <span class=\"token class-name\">V</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t根据 <span class=\"token class-name\">K</span> 找到对应的 <span class=\"token class-name\">V</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t获取当前 <span class=\"token class-name\">Map</span> 中所有 <span class=\"token class-name\">Value</span> 对应的 <span class=\"token class-name\">Collection</span> 集合</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t获取当前 <span class=\"token class-name\">Map</span> 中所有 <span class=\"token class-name\">Key</span> 对应的 <span class=\"token class-name\">Set</span> 集合</pre></td></tr></table></figure><h2 id=\"day143-反射\"><a class=\"anchor\" href=\"#day143-反射\">#</a> day143. 反射</h2>\n<h5 id=\"31-反射内存分析图\"><a class=\"anchor\" href=\"#31-反射内存分析图\">#</a> 3.1 反射内存分析图</h5>\n<p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay13-String%EF%BC%8CMap%E5%92%8C%E5%8F%8D%E5%B0%84%5Cimg%5C02-Java%E7%B1%BB%E5%9E%8B%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD.png\" alt=\"\" /></p>\n<h5 id=\"32-class-对象获取方法万恶之源\"><a class=\"anchor\" href=\"#32-class-对象获取方法万恶之源\">#</a> 3.2 Class 对象获取方法【万恶之源】</h5>\n<blockquote>\n<p>反射操作首先需要获取 Class 对象，Class 对象相当于当前类型在内存方法区中内存空间，可以获取当前类型的所有相关内容。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> 类静态成员方法【使用最多】</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> packageAndClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t根据完整的包名<span class=\"token punctuation\">.</span>类名字符串获取对应类型的 <span class=\"token class-name\">Class</span> 对象，并且当前方法具备加载对应类型的能力。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>通过实例化对象获取对应的 <span class=\"token class-name\">Class</span> 对象，<span class=\"token class-name\">Object</span> 类提供方法【类型比较，类型判断】</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t例如：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> cls <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Java</span> 中类和接口的属性【常用于数据类型约束】</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t类名<span class=\"token operator\">/</span>接口名<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_reflect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 获取 Class 对象，万恶之源</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/8/3 14:50</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Class 类静态成员方法【使用最多】</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            public static Class&lt;?> forName (String packageAndClassName);</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                根据完整的包名。类名字符串获取对应类型的 Class 对象，并且当前方法具备加载对应类型的能力。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            ClassNotFoundException 指定类型未找到异常。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cls1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.qfedu.c_reflect.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        通过实例化对象获取对应的 Class 对象，Object 类提供方法【类型比较，类型判断】</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            public Class&lt;? extends T> getClass ();</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            例如：</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                Person p = new Person ();</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                Class&lt;? extends Person> cls = p.getClass ();</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> cls2 <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        Java 中类和接口的属性【常用于数据类型约束】</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t        Class&lt;T> 类名 / 接口名.class;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> cls3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        以上三种方法获取 Class 对象，只要类型一致，得到的都是同一个 Class 对象</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        因为 Java 代码中，任何一个类型在程序加载阶段有且只加载一次。</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        cls.getName ();</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls1 <span class=\"token operator\">==</span> cls2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls2 <span class=\"token operator\">==</span> cls3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls3 <span class=\"token operator\">==</span> cls1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"33-constructor-构造方法对象获取\"><a class=\"anchor\" href=\"#33-constructor-构造方法对象获取\">#</a> 3.3 Constructor 构造方法对象获取</h5>\n<h6 id=\"331-构造方法对象分析\"><a class=\"anchor\" href=\"#331-构造方法对象分析\">#</a> 3.3.1 构造方法对象分析</h6>\n<blockquote>\n<ul>\n<li>构造方法名称为类名，在 Class 对象中是包含的</li>\n<li>构造方法之间区别是形式参数列表，包括参数个数，参数类型，参数顺序。</li>\n<li>构造方法在类内有可能是多个，在反射操作中，Class 对象内存在构造方法数组</li>\n</ul>\n</blockquote>\n<h6 id=\"332-class-对象获取-constructor-构造方法对象相关方式\"><a class=\"anchor\" href=\"#332-class-对象获取-constructor-构造方法对象相关方式\">#</a> 3.3.2 Class 对象获取 Constructor 构造方法对象相关方式</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Constructor</span> <span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> parameterTypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t有且只可以获取非私有化构造方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t根据指定的构造方法参数数据类型，获取对应的构造方法对象。<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 是 <span class=\"token class-name\">Class</span> 类型对应的不定长参数，可以要求\t提供方法参数对应的 <span class=\"token class-name\">Class</span> 类型，参数个数不限制</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    例如<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.qfedu.c_reflect.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">Constructor</span> c1 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// ==> public Person() &#123;...&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">Constructor</span> c2 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// ==> public Person(int) &#123;...&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">Constructor</span> c3 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// ==> public Person(int, String) &#123;...&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Constructor</span> <span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> parameterTypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t【暴力反射】可以获取类内任意权限修饰的构造方法，包括私有化构造方法</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    根据指定的构造方法参数数据类型，获取对应的构造方法对象。<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 是 <span class=\"token class-name\">Class</span> 类型对应的不定长参数，可以要求\t提供方法参数对应的 <span class=\"token class-name\">Class</span> 类型，参数个数不限制</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    例如<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.qfedu.c_reflect.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">Constructor</span> c1 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// private Person(String) &#123;...&#125;</span></pre></td></tr></table></figure><h6 id=\"333-通过-constructor-构造方法对象实例化目标类型对象\"><a class=\"anchor\" href=\"#333-通过-constructor-构造方法对象实例化目标类型对象\">#</a> 3.3.3 通过 Constructor 构造方法对象实例化目标类型对象</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> parameterValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过 <span class=\"token class-name\">Constructor</span> 构造方法对象调用，需要的参数是构造方法所需的实际参数列表，方法参数为 <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> 支持 <span class=\"token class-name\">Java</span> 任意类型，<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 可变长参数，不限制参数个数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t例如<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token class-name\">Constructor</span> c1 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// ==> public Person() &#123;...&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">Object</span> obj1 <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 真实类型为 Person 类型，返回值类型为 Object</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">Constructor</span> c2 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// ==> public Person(int) &#123;...&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">Object</span> obj2 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 真实类型为 Person 类型，返回值类型为 Object</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">Constructor</span> c3 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// ==> public Person(int, String) &#123;...&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">Object</span> obj3 <span class=\"token operator\">=</span> c3<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 真实类型为 Person 类型，返回值类型为 Object</span></pre></td></tr></table></figure><h5 id=\"34-method-成员方法对象获取\"><a class=\"anchor\" href=\"#34-method-成员方法对象获取\">#</a> 3.4 Method 成员方法对象获取</h5>\n<h6 id=\"341-成员方法对象分析\"><a class=\"anchor\" href=\"#341-成员方法对象分析\">#</a> 3.4.1 成员方法对象分析</h6>\n<blockquote>\n<ul>\n<li>方法的唯一性 方法名 + 形式参数列表</li>\n<li>方法是在类内，需要通过 Class 对象来获取目标 Method 对象。</li>\n</ul>\n</blockquote>\n<h6 id=\"342-class-对象获取-method-构造方法对象相关方式\"><a class=\"anchor\" href=\"#342-class-对象获取-method-构造方法对象相关方式\">#</a> 3.4.2 Class 对象获取 Method 构造方法对象相关方式</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Method</span> <span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> parameterTypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过 <span class=\"token class-name\">Class</span> 对象调用，根据目标方法名称和对应的形式参数列表数据类型，获取对应非私有化成员方法对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> parameterTypes 不定长参数，约束当前方法所需参数类型。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    【补充】getMethod 可以获取继承得到父类或者接口中方法。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t例如<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.qfedu.c_reflect.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Method</span> m1 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"game\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        \t<span class=\"token comment\">// ==> public void game() &#123;...&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       \t<span class=\"token class-name\">Method</span> m2 <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"game\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        \t<span class=\"token comment\">// ==> public void game(String) &#123;...&#125;</span></pre></td></tr></table></figure><h6 id=\"343-通过-method-对象执行对应目标方法\"><a class=\"anchor\" href=\"#343-通过-method-对象执行对应目标方法\">#</a> 3.4.3 通过 Method 对象执行对应目标方法</h6>\n<blockquote>\n<p>原本执行方法的形式</p>\n<pre><code>调用者.方法名(实际参数); 调用者执行目标方法，需要提供必要参数\n</code></pre>\n<p>目前具备: Method 方法对象，缺少内容</p>\n<ul>\n<li>调用者</li>\n<li>实际参数</li>\n</ul>\n<pre><code>method.xxx(调用者，实际参数); 方法执行需要提供调用者和必要参数\n</code></pre>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Method</span> 执行目标方法实现</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> parameterValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t通过 <span class=\"token class-name\">Method</span> 成员方法对象执行对应目标方法，所需参数是执行目标方法的实例化对象，和对应方法的实际参数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj 是执行当前方法的类对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> parameterValues 当前方法所需的实际参数，采用不定长形式，参数个数不限制，数据类型不限制，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            需要根据实际方法情况提供对应的实际参数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    【注意】不要在 <span class=\"token class-name\">Object</span> 中迷失自己，时刻关注数据的【真实类型】</pre></td></tr></table></figure><h5 id=\"35-field-成员变量对象获取\"><a class=\"anchor\" href=\"#35-field-成员变量对象获取\">#</a> 3.5 Field 成员变量对象获取</h5>\n<h6 id=\"351-成员变量对象分析\"><a class=\"anchor\" href=\"#351-成员变量对象分析\">#</a> 3.5.1 成员变量对象分析</h6>\n<blockquote>\n<ul>\n<li>唯一标记，变量名</li>\n<li>按照 JavaBean 规范，成员变量全部私有化</li>\n</ul>\n</blockquote>\n<h6 id=\"352-class-对象获取-field-成员变量方法\"><a class=\"anchor\" href=\"#352-class-对象获取-field-成员变量方法\">#</a> 3.5.2 Class 对象获取 Field 成员变量方法</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Field</span> <span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t【暴力反射】</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t通过 <span class=\"token class-name\">Class</span> 对象调用，根据成员变量名称获取对应类内任意修饰的成员变量对象，可以获取私有化内容。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t例如<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.qfedu.c_reflect.Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">Field</span> id <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token comment\">// ==> private int id;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        \t<span class=\"token comment\">// ==> private String name;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">Field</span> test <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        \t<span class=\"token comment\">// ==> public int test</span></pre></td></tr></table></figure><h6 id=\"353-field-成员变量对象完成取值和赋值操作\"><a class=\"anchor\" href=\"#353-field-成员变量对象完成取值和赋值操作\">#</a> 3.5.3 Field 成员变量对象完成取值和赋值操作</h6>\n<blockquote>\n<p>成员变量赋值和取值操作</p>\n<pre><code>调用者.setXXX(对应成员变量数据类型实际参数);\n对应成员变量数据类型返回 调用者.getXXX()\n</code></pre>\n</blockquote>\n<pre><code>public void set(Object obj, Object value);\n\t通过 Field 成员变量对象调用，需要的参数是当前成员变量所在实例化对象，和赋值当前成员变量对应的实际参数。\n\tObject obj 当前成员变量所在实例化对象 \n\tObject value 赋值当前成员变量对应的实际参数，要求数据类型符合成员变量需求。\n\t\npublic Object get(Object obj);\n\t通过 Field 成员变量对象调用，获取当前成员变量存储的数据内容，参数是从哪一个实例化对象中获取对应的数据内容\n\tObject obj 当前成员变量所在实例化对象 \n\t返回值类型是当前成员变量存储的数据信息。\n</code></pre>\n<h5 id=\"补充知识点私有化反射对象操作权限\"><a class=\"anchor\" href=\"#补充知识点私有化反射对象操作权限\">#</a> 【补充知识点】私有化反射对象操作权限</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">AccessibleObject</span> 类内方法。<span class=\"token class-name\">AccessibleObject</span> 是  <span class=\"token class-name\">Constructor</span> <span class=\"token class-name\">Method</span> <span class=\"token class-name\">Field</span> 的父类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> flag </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t如果操作的反射对象<span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span> <span class=\"token class-name\">Method</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">)</span>为 <span class=\"token keyword\">private</span> 修饰对象，可以利用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> 给予操作权限</pre></td></tr></table></figure><h2 id=\"day15file类io\"><a class=\"anchor\" href=\"#day15file类io\">#</a> day15File 类，IO</h2>\n<h4 id=\"1-file-类\"><a class=\"anchor\" href=\"#1-file-类\">#</a> 1. File 类</h4>\n<h5 id=\"11-概述\"><a class=\"anchor\" href=\"#11-概述\">#</a> 1.1 概述</h5>\n<pre><code>Java 提供的针对于文件、文件夹进行增删改查操作的方式，不可以操作文件内容，文件内容操作需要 IO 支持。必须明确两个内容\n\t1. 路径问题【重点】\n\t2. File 类增删改查方法。\n</code></pre>\n<h5 id=\"12-路径问题\"><a class=\"anchor\" href=\"#12-路径问题\">#</a> 1.2 路径问题</h5>\n<blockquote>\n<p>相对路径</p>\n</blockquote>\n<pre><code>例如：\n\t我在隔壁办公室\n以当前【工作目录】为参照物去往其他目录的相对路径\n\t.  对应当前工作目录\n\t.. 当前工作目录的上级目录\n\n使用较多，服务器端静态相关资源。\n</code></pre>\n<blockquote>\n<p>绝对路径</p>\n</blockquote>\n<pre><code>例如：\n\t河南省郑州市高新区莲花街55号威科姆园区D座千锋教育\nWindows 有盘符关系\t\n\tC D E\n\tC:/aaaa/1.txt;\n\nLinux/UNIX 系统(centOS RedHat)，没有盘符概念，只有\n\t根目录\n</code></pre>\n<h5 id=\"13-file-类相关方法\"><a class=\"anchor\" href=\"#13-file-类相关方法\">#</a> 1.3 File 类相关方法</h5>\n<h6 id=\"131-构造方法\"><a class=\"anchor\" href=\"#131-构造方法\">#</a> 1.3.1 构造方法</h6>\n<blockquote>\n<p>以下方法和对应文件 / 文件夹是否存在无关、</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t根据用户提供的对应文件<span class=\"token operator\">/</span>文件夹的完整路径，创建 <span class=\"token class-name\">File</span> 对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> parent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> childName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t根据用户提供的父目录路径，和对应子文件<span class=\"token operator\">/</span>子文件夹名称，创建 <span class=\"token class-name\">File</span> 对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> parent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> childName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t根据用户提供的父目录 <span class=\"token class-name\">File</span> 类对象，和对应子文件<span class=\"token operator\">/</span>子文件夹名称，创建 <span class=\"token class-name\">File</span> 对象</pre></td></tr></table></figure><h6 id=\"132-创建相关方法\"><a class=\"anchor\" href=\"#132-创建相关方法\">#</a> 1.3.2 创建相关方法</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过 <span class=\"token class-name\">File</span> 对象调用，根据当前 <span class=\"token class-name\">File</span> 对象存储的【文件路径】，创建对应普通文件，创建成功返回 <span class=\"token boolean\">true</span>，否则 <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t失败情况<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 文件路径不合法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 对应文件已存在</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token number\">3.</span> 对应文件夹没有【写入权限】 <span class=\"token class-name\">Linux</span> 文件权限 r<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t通过 <span class=\"token class-name\">File</span> 对象调用，根据当前 <span class=\"token class-name\">File</span> 对象存储的【文件夹路径】，创建对应文件夹，创建成功返回 <span class=\"token boolean\">true</span>，否则 <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t失败情况<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 文件路径不合法</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 对应文件夹已存在</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token number\">3.</span> 对应文件夹没有【写入权限】 <span class=\"token class-name\">Linux</span> 文件权限 r<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>xr<span class=\"token operator\">-</span>x\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token constant\">BT</span> 方法，通过 <span class=\"token class-name\">File</span> 对象调用，根据当前 <span class=\"token class-name\">File</span> 对象存储的【文件夹路径】，创建对应文件夹，创建成功返回 <span class=\"token boolean\">true</span>，否则 <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t【重点】可以创建中间文件夹<span class=\"token operator\">/</span>中间路径文件夹</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">renameTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> destFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t【重命名，移动】</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t通过 <span class=\"token class-name\">File</span> 对象调用，将当前 <span class=\"token class-name\">File</span> 对象对应文件<span class=\"token operator\">/</span>文件夹，转移到 destFile 对应的路径<span class=\"token operator\">/</span>名称</pre></td></tr></table></figure><h5 id=\"133-删除操作\"><a class=\"anchor\" href=\"#133-删除操作\">#</a> 1.3.3 删除操作</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过 <span class=\"token class-name\">File</span> 类对象调用，对应文件或者文件夹，立即删除</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t注意<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 删除文件无法撤回，不是放入回收站</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 不能删除【非空文件夹】</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">deleteOnExit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t通过 <span class=\"token class-name\">File</span> 类对象调用，对应文件或者文件夹，在【程序退出】时删除，可以用于处理缓冲文件，日志文件。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t注意<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 删除文件无法撤回，不是放入回收站</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 不能删除【非空文件夹】</pre></td></tr></table></figure><h5 id=\"134-获取文件相关信息\"><a class=\"anchor\" href=\"#134-获取文件相关信息\">#</a> 1.3.4 获取文件相关信息</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 以下方法实际为字符串操作方法，并且和文件是否存在无关</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t获取文件<span class=\"token operator\">/</span>文件夹名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t获取当前文件<span class=\"token operator\">/</span>文件夹的路径</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t获取当前文件<span class=\"token operator\">/</span>文件夹的上级目录名称</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 以下方法有用</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t获取当前路径对应的绝对路径字符串</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">File</span> <span class=\"token function\">getAbsoluteFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t获取当前路径对应的绝对路径 <span class=\"token class-name\">File</span> 对象</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">lastModified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t获取当前文件<span class=\"token operator\">/</span>文件夹最后修改时间，返回值是时间戳</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t获取当前文件占用的空间字节数，如果是文件夹结果为 <span class=\"token number\">0L</span> or <span class=\"token number\">4096L</span></pre></td></tr></table></figure><h6 id=\"135-判断方法重点\"><a class=\"anchor\" href=\"#135-判断方法重点\">#</a> 1.3.5 判断方法【重点】</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t判断 <span class=\"token class-name\">File</span> 对象对应的文件<span class=\"token operator\">/</span>文件夹是否存在</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t判断 <span class=\"token class-name\">File</span> 对象是否对应一个普通文件</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t判断 <span class=\"token class-name\">File</span> 对象是否对应一个文件夹</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">isAbsolute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t判断 <span class=\"token class-name\">File</span> 对象是否采用绝对路径方式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t判断 <span class=\"token class-name\">File</span> 对象对应的文件<span class=\"token operator\">/</span>文件夹是否为隐藏属性</pre></td></tr></table></figure><h6 id=\"136-文件列表方法\"><a class=\"anchor\" href=\"#136-文件列表方法\">#</a> 1.3.6 文件列表方法</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">listRoots</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    有且只在 <span class=\"token class-name\">Windows</span> 操作系统中有效。获取当前 <span class=\"token class-name\">Windows</span> 操作系统中所有</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    盘符对应的 <span class=\"token class-name\">File</span> 对象数组</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    获取当前 <span class=\"token class-name\">File</span> 对象对应文件夹中所有子文件和子文件夹名称 字符串数组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    获取当前 <span class=\"token class-name\">File</span> 对象对应文件夹中所有子文件和子文件夹 <span class=\"token class-name\">File</span> 对象数组</pre></td></tr></table></figure><h6 id=\"137-文件名过滤器-filenamefilter\"><a class=\"anchor\" href=\"#137-文件名过滤器-filenamefilter\">#</a> 1.3.7 文件名过滤器 FilenameFilter</h6>\n<blockquote>\n<ul>\n<li>函数式接口 @FunctionalInterface 注解严格格式检查。</li>\n<li>常用方法参数，需要通过实例化对象完成接口对应功能，【插件式编程】</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FilenameFilter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 提供给列表方法使用，过滤限制可以存储在文件列表的文件 / 文件夹内容</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    * @param dir   获取文件列表信息对应的文件 File 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    * @param child 当前文件中所有文件 / 文件夹的名称</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    * @return 自行设置目标限制，满足条件返回 true，不满足返回 false</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> dir<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h4 id=\"2-io-流\"><a class=\"anchor\" href=\"#2-io-流\">#</a> 2. IO 流</h4>\n<h5 id=\"21-io-流分类\"><a class=\"anchor\" href=\"#21-io-流分类\">#</a> 2.1 IO 流分类</h5>\n<pre><code>流向分类:\n\t输入流 input\n\t输出流 output\n\t已当前程序所在内存为参照物，数据流出 输出流 output，数据流入 输入流 input\n\n操作形式区分:\n\t字节流【最多】按照字节为操作单位，处理文件内容，可以适用所有的文件。\n\t字符流 有且只可以处理使用【记事本】打开的可视化文本无乱码文件\n\t对象流 一般用于序列化操作，后续可以在 MyBatis 二级缓存中使用\n\n是否使用缓冲\n\t缓冲流【推荐使用】\n\t\n需要学习的类:\n\t字节输入流\n\t\tInputStream\n\t\t文件操作字节输入流 FileInputStream\n\t字节输出流\n\t\tOutputStream\n\t\t文件操作字节输出流 FileOutputStream\n\t字符输入流\n\t\tReader\n\t\t文件操作字符输入流 FileReader\n\t字符输出流\n\t\tWriter\n\t\t文件操作字符输出流 FileWriter\n\t字节缓冲输入流\n\t\tBufferedInputStream\n\t字节缓冲输出流\n\t\tBufferedOutputStream\n</code></pre>\n<h5 id=\"22-文件操作字节输入流\"><a class=\"anchor\" href=\"#22-文件操作字节输入流\">#</a> 2.2 文件操作字节输入流</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> 构造方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t根据指定的文件路径，创建对应当前文件的文件操作字节输入流对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t根据指定的文件 <span class=\"token class-name\">File</span> 对象，创建对应当前文件的文件操作字节输入流对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>读取操作相关方法</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t从文件中读取一个字节数据返回，返回值类型为 <span class=\"token keyword\">int</span> 类型，实际有效数据为 <span class=\"token keyword\">byte</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 【使用最多】</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t从文件中读取数据到 <span class=\"token keyword\">byte</span> 类型的缓冲数组中，返回值类型是本次读取操作存储到 <span class=\"token keyword\">byte</span> 缓冲数组中的字节个数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t从文件中读取数据到 <span class=\"token keyword\">byte</span> 类型的缓冲数组中，要求从 offset 下标位置开始，到 length 计数结束，返回值</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t是读取到数组中的字节个数</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t【注意】</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t如果读取到文件末尾，以上所有方法的返回值都是 <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token constant\">EOF</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">End</span> <span class=\"token class-name\">Of</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>操作流程:</p>\n<ol>\n<li>明确读取内容的文件路径</li>\n<li>打开 FileInputStream 输入流管道对象</li>\n<li>读取文件，推荐使用缓冲方式，效率高</li>\n<li>关闭资源</li>\n</ol>\n</blockquote>\n<h5 id=\"23-文件操作字节输出流\"><a class=\"anchor\" href=\"#23-文件操作字节输出流\">#</a> 2.3 文件操作字节输出流</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileOutputStream</span> 构造方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t根据指定的文件路径，创建对应当前文件的文件操作字节输出流对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t根据指定的文件 <span class=\"token class-name\">File</span> 对象，创建对应当前文件的文件操作字节输出流对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t根据指定的文件路径，创建对应当前文件的文件操作字节输出流对象，append 用于控制当前文件内容写入采取的是</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t追加写<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>还是删除写<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t根据指定的文件 <span class=\"token class-name\">File</span> 对象，创建对应当前文件的文件操作字节输出流对象，append 用于控制当前文件内容写入</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t采取的是追加写<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>还是删除写<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t【注意】</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token number\">1.</span> <span class=\"token class-name\">FileOutputStream</span> 文件操作字节输出流，默认对于文件内容采用的方式是删除写，如果想要在原本的文件内</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t容上追加写，需要使用 <span class=\"token keyword\">boolean</span> append 参数为 <span class=\"token boolean\">true</span> 进行约束和限制。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token number\">2.</span> <span class=\"token class-name\">FileOutputStream</span> 有创建文件的能力，路径合法，文件夹有操作权限，<span class=\"token class-name\">FileOutputStream</span> 对应目标文件</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t不存在，可以自行创建</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>写入操作相关方法</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t写入一个字节数据到文件中</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t写入一个字节数组数据到文件中</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  \t\t写入一个字节数组，从指定 offset 下标开始，计数字节个数 length 数据写入到文件中。</pre></td></tr></table></figure><blockquote>\n<p>操作流程:</p>\n<ol>\n<li>明确写入内容的文件路径</li>\n<li>打开 FileOutputStream 输出流管道对象</li>\n<li>写入数据到文件中，推荐使用缓冲方式，效率高</li>\n<li>关闭资源</li>\n</ol>\n</blockquote>\n<h5 id=\"24-缓冲流\"><a class=\"anchor\" href=\"#24-缓冲流\">#</a> 2.4 缓冲流</h5>\n<blockquote>\n<ul>\n<li>【重点】任何一个缓冲流都没有读写文件的能力，只是提供必要的缓冲数据空间。读取能力需要对应 IO 流对象来提供。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t需要提供 <span class=\"token class-name\">InputStream</span> 字节输入流对象作为缓冲输入流实例化对象参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OutputStream</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t需要提供 <span class=\"token class-name\">OutputStream</span> 字节输出流对象作为缓冲输出流实例化对象参数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>所有相关的读写方法，都是来自于 输入流和输出流 read write</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>输出流如果需要进行追加写，需要 OutputStream 必须有追加写能力</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"day16线程\"><a class=\"anchor\" href=\"#day16线程\">#</a> day16 线程</h2>\n<h4 id=\"1-什么是进程\"><a class=\"anchor\" href=\"#1-什么是进程\">#</a> 1. 什么是进程</h4>\n<pre><code>在计算机中独立运行的完整程序，需要系统分配资源，重点资源\n\t1. CPU 占用率\n\t2. 内存 占用内存空间\n\t3. 硬盘 数据占用和硬盘数据存储速度\n\t4. 网络 带宽情况\n\t5. 电源 供电情况\n\t6. GPU 对于 JavaWEB 服务器使用很少\n\nCPU 运行时间片\n\tCPU 执行一个完成的任务周期的时间，不同的程序在时间片中【抢占】执行。CPU 可以在单位时间片执行多个程序。\n\t【程序抢占执行】【时间片】\n</code></pre>\n<h4 id=\"2-什么是线程\"><a class=\"anchor\" href=\"#2-什么是线程\">#</a> 2. 什么是线程</h4>\n<pre><code>进程一个完整的程序，可以认为是一个【完整的工厂】\n线程可以认为是进程的组成部分，也可以认为是工厂的一条流水线\n\t线程使用的资源由当前进程分配，CPU 内存，硬盘，网络，电源，GPU，并且线程在进程中使用，采用的方式也是【抢占式执行】，也需要【CPU 执行时间片分配】\n\t\n注意\n\t1. 一个进程最少由一个线程存在，如果一个进程中没有任何一个线程，进程关闭\n\t2. Java 程序最少 2 个线程\n\t\ta. main 主线程\n\t\tb. JVM GC 垃圾回收守护/后台线程\n</code></pre>\n<h4 id=\"3-线程和进程关系\"><a class=\"anchor\" href=\"#3-线程和进程关系\">#</a> 3. 线程和进程关系</h4>\n<blockquote>\n<p>线程是进程的组成部分</p>\n<p>进程是线程的生存空间</p>\n<p>JavaWEB 主要开发使用的【线程】，因为 JavaWEB Application 是一个完整的进程，需要在项目中使用多线程技术，来处理用户请求，数据存储，任务实现，同时需要辅助相关的线程技术，锁机制，队列机制，线程池</p>\n</blockquote>\n<h4 id=\"4-线程的优势和劣势\"><a class=\"anchor\" href=\"#4-线程的优势和劣势\">#</a> 4. 线程的优势和劣势</h4>\n<pre><code>优势:\n\t1. 提高资源利用率\n\t2. 提高用户体验\n\n劣势:\n\t1. 会导致硬件负担过重\n\t2. 卡顿导致用户体验较差\n\t3. 容易导致【死锁】\n\n富贵险中求，物极必反\n</code></pre>\n<h4 id=\"5-java-完成多线程代码\"><a class=\"anchor\" href=\"#5-java-完成多线程代码\">#</a> 5.  Java 完成多线程代码</h4>\n<h5 id=\"51-线程代码基本实现\"><a class=\"anchor\" href=\"#51-线程代码基本实现\">#</a> 5.1 线程代码基本实现</h5>\n<blockquote>\n<ul>\n<li>方式一 自定义类型继承 Thread 类型，重写 run 方法，实现自定义线程类</li>\n<li>方式二 自定义类型遵从 Runnable 接口，实现 run 方法，完成自定义线程类</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 线程代码基本实现</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *  - 方式一 自定义类型继承 Thread 类型，重写 run 方法，实现自定义线程类</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *  - 方式二 自定义类型遵从 Runnable 接口，实现 run 方法，完成自定义线程类</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    What will be run ~~~</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    跑啥</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    run 方法内容是当前线程类的功能代码，线程执行任务目标。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~~~~ JDG BLG LNG ~~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~~~~ EDG VS WBG ~~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> * 当前代码有四个线程</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> *  1. mt1</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> *  2. mt2</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> *  3. main 主线程</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> *  4. JVM GC</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> * @author Anonymous 2023/8/8 10:48</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        如果需要执行线程代码，利用 Thread 类 start 方法开启线程</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        不可以使用 run 方法直接调用方式开启线程代码。</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 当前 MyThread1 继承 Thread 类，可以实例化对象，直接调用 start 方法开启线程</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">MyThread1</span> mt1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 利用 Thread 类构造方法，使用 Runnable 接口实例化对象作为构造方法参数</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 明确当前线程对象执行的线程目标。</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">Thread</span> mt2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~~~main 线程 BLG S13总冠军~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        mt1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        mt2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"52-线程操作相关方法\"><a class=\"anchor\" href=\"#52-线程操作相关方法\">#</a> 5.2 线程操作相关方法</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>构造方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t实例化线程对象，未明确线程目标和线程名称</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t实例化线程对象，使用 <span class=\"token class-name\">Runnable</span> 接口实现类明确线程的执行目标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t实例化线程对象，使用 <span class=\"token class-name\">Runnable</span> 接口实现类明确线程的执行目标，同时指定线程的名称</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>成员方法</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t获取线程对象名称</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t设置线程对象名称</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">getPriority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t获取线程对象优先级</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        线程优先级 <span class=\"token number\">1</span> 最低，<span class=\"token number\">10</span> 最高，默认为 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MIN_PRIORITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAX_PRIORITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">NORMAL_PRIORITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newPriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t设置线程对象优先级</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            线程优先级只是提升线程抢占 <span class=\"token constant\">CPU</span> 执行权的概率，并不是执行顺序。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">isDaemon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t判断当前线程是否为【守护<span class=\"token operator\">/</span>后台线程】</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t设置当前线程是否为守护线程，on 为 <span class=\"token boolean\">true</span> 表示当前线程为守护线程</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t在哪一个线程代码中执行，当前线程阻塞指定的时间，时间单位为毫秒</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Thread</span> <span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t在哪一个线程代码中执行，获取当前线程对象。</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Anonymous 2023/8/8 11:24</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程代码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路见不平一声吼，鸽姐没有男朋友。两只黄鹂鸣翠柳，鸽姐是个单身狗。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"某鸽\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        在哪一个线程代码中执行，获取当前线程对象，当前执行位置是 main 方法</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        内容，获取的线程对象是 main 线程</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            Thread [main,5,main]</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        Thread [Thread-0,5,main]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        ThreadName, ThreadPriority, ThreadGroup</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        线程名，线程优先级，线程组</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"53-守护线程\"><a class=\"anchor\" href=\"#53-守护线程\">#</a> 5.3 守护线程</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DownloadThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游戏更新下载中... \"</span> <span class=\"token operator\">+</span> i  <span class=\"token operator\">+</span> <span class=\"token string\">\" %\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                run 方法是实现 Runnable 接口方法，接口中 run 方法没有抛出</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                异常信息，重写 / 实现方法声明必须和接口 / 父类中的声明一致，所有当前</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                实现方法过程中，不可以抛出异常内容，只能捕获</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                因为 RuntimeException 是运行时异常，当前异常类型不需要方法</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                声明告知明确的异常类型，可以用【糖衣炮弹】方式将当前编译时异常</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                包装为运行时异常抛出，方法外部的得到的异常类型不变。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                 */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * 守护线程 / 后台线程</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> *      1. 必须存在其他非守护线程</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> *      2. 一旦代码中有且只有守护线程，进程直接销毁，程序退出。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> * 守护线程可以用于</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> *      1. 日志记录</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> *      2. 监控机制</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> *      3. 阈值监控</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> * @author Anonymous 2023/8/8 11:29</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DownloadThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 设置当前下载线程为守护线程，当前代码中有且只有守护线程的情况下，会自动关闭退出</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大厅游戏等待中~~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"6-同步机制\"><a class=\"anchor\" href=\"#6-同步机制\">#</a> 6. 同步机制</h4>\n<h5 id=\"61-案例分析\"><a class=\"anchor\" href=\"#61-案例分析\">#</a> 6.1 案例分析</h5>\n<pre><code>&lt;&lt;孤注一掷&gt;&gt;\n\t万达影院一场有 100 个座位/ 100 张票\n\t有三个销售渠道\n\t\t1. 猫眼 2. 淘票票 3. 美团\n\t三个销售渠道可以认为是三个线程， 100 张票是【共享资源】\n\n【解决】\n\t三个线程对象，同时销售 100 张票，解决线程冲突问题。\n</code></pre>\n<p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay16-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%5Cimg%5C01-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98.png\" alt=\"\" /></p>\n<h5 id=\"62-同步代码块解决问题\"><a class=\"anchor\" href=\"#62-同步代码块解决问题\">#</a> 6.2 同步代码块解决问题</h5>\n<blockquote>\n<p>同步代码块格式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 锁对象 */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 同步代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>同步代码块中有且只允许一个线程进入执行，其他线程等待状态 / 阻塞状态</li>\n<li>锁对象，要求必须是【对象】，基本数据类型和包装类型都不可以。并且锁对象对于当前限制的线程对象具备唯一性。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lock</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SaleThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> ticket <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 最好使用 final 修饰，确定当前对象的唯一性</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 获取当前执行 run 方法线程对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            类锁</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                SaleThread.class</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                使用当前线程对象数据类型对应的 Class 对象作为锁对象</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                可以限制当前所有的线程对象操作。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            对象锁</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                可以利用自定义锁类型 例如 Lock</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                在当前线程代码中，定义 static 修饰的静态成员变量 Lock 类型对象</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                根据 Lock 对象的唯一性，满足锁对象需求</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ticket <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token comment\">//thread.getName () 获取当前线程名称</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"售出编号为 \"</span> <span class=\"token operator\">+</span> ticket <span class=\"token operator\">+</span> <span class=\"token string\">\" 的电影票\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    ticket<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"售罄\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre> * @author Anonymous 2023/8/8 14:49</pre></td></tr><tr><td data-num=\"46\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SaleThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"美团\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SaleThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"淘票票\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SaleThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"猫眼\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"63-同步方法解决问题\"><a class=\"anchor\" href=\"#63-同步方法解决问题\">#</a> 6.3 同步方法解决问题</h5>\n<blockquote>\n<p>格式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>权限修饰符 <span class=\"token punctuation\">[</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">synchronized</span> 返回值类型 方法名<span class=\"token punctuation\">(</span>形式参数列表<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>静态成员方法推荐使用类名调用。</li>\n<li>非静态成员方法有且只可以通过类对象调用。</li>\n</ul>\n<p>【重点】</p>\n<ul>\n<li>静态同步方法，锁对象为当前类对应的 Class 对象。</li>\n<li>非静态同步方法，锁对象时当前调用方法的类对象。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_thread</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SaleThreadOne</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> ticket <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ticket <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            静态同步方法没有任何问题</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// sale();</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            非静态同步方法无法解决同步问题。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">saleTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 静态同步方法</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 获取当前执行 run 方法线程对象</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ticket <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">//thread.getName () 获取当前线程名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"售出编号为 \"</span> <span class=\"token operator\">+</span> ticket <span class=\"token operator\">+</span> <span class=\"token string\">\" 的电影票\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            ticket<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"售罄\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 非静态同步方法</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saleTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 获取当前执行 run 方法线程对象</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ticket <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">//thread.getName () 获取当前线程名称</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> thread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"售出编号为 \"</span> <span class=\"token operator\">+</span> ticket <span class=\"token operator\">+</span> <span class=\"token string\">\" 的电影票\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            ticket<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"售罄\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"54\"></td><td><pre> * @author Anonymous 2023/8/8 14:49</pre></td></tr><tr><td data-num=\"55\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SaleThreadOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"美团\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SaleThreadOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"淘票票\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SaleThreadOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"猫眼\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"64-静态和非静态同步方法锁限制情况\"><a class=\"anchor\" href=\"#64-静态和非静态同步方法锁限制情况\">#</a> 6.4 静态和非静态同步方法锁限制情况</h5>\n<p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay16-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%5Cimg%5C02-%E9%9D%99%E6%80%81%E5%92%8C%E9%9D%9E%E9%9D%99%E6%80%81%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E9%99%90%E5%88%B6%E5%AF%B9%E6%AF%94.png\" alt=\"\" /></p>\n<h4 id=\"7-单例模式\"><a class=\"anchor\" href=\"#7-单例模式\">#</a> 7. 单例模式</h4>\n<blockquote>\n<p>要求当前类型在整个程序运行过程中，有且只能有一个对象。可以用于后期项目的 Service 层 Dao 层 Controller 层实例化对象使用，保证以上对象的唯一性，可以满足项目代码执行功能唯一性。</p>\n<ul>\n<li>饿汉模式</li>\n<li>懒汉模式</li>\n</ul>\n</blockquote>\n<h5 id=\"71-懒汉模式\"><a class=\"anchor\" href=\"#71-懒汉模式\">#</a> 7.1 懒汉模式</h5>\n<blockquote>\n<ul>\n<li>私有化构造方法\n<ul>\n<li>防止类外通过 new + 构造方法形式直接实例化对象操作，不满足单例模式</li>\n</ul>\n</li>\n<li>对外提供必要的【公开静态】成员方法，返回值类型为当前对象类型。\n<ul>\n<li>public 修饰可以满足类外调用当前方法获取对象需求</li>\n<li>static 修饰，可以保证当前方法通过类名直接调用，不需要实例化对象调用。因为当前类构造方法已经私有化修饰，无法通过 new + 构造方法形式实例化对象操作，获取对象的方法，使用 static 修饰更合适</li>\n</ul>\n</li>\n<li>使用静态成员变量记录第一次创建对象地址，之后方法进行提供数据操作</li>\n<li>【重点】获取对象 getInstance 方法必须采用 synchronized ，避免多线程实例化对象冲突问题</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_single</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 懒汉模式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/8/8 16:58</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleDemo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 私有化静态成员变量 SingleDemo1 类型，用于在用户第一次调用 getInstance 方法</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 获取对象时，创建对象存储对应的地址。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 之后用户再次调用 getInstance 方法，需要从 sd 对象中获取之前的对象内容，保证</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 当前 SingleDemo1 有且只有一个实例化对象。【单例模式】</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingleDemo1</span> sd <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 私有化构造方法，防止类外可以通过 new + 构造方法形式直接</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 实例化对象操作</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 【注意】单例对象不要通过反射操作获取构造方法实例化对象实现。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingleDemo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 获取当前 SingleDemo1 实例化对象操作，用户第一次调用会执行</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * new + 构造方法实例化对象， 并且存储对象到 sd 中，之后的获取</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 都是从 sd 中获取之前的对象内容</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * 【注意】</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     *  当前方法需要使用 synchronized 同步限制，并且方法为静态同步方法</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     *  锁对象是当前 SingleDemo1.Class 对象，通过任何一个方式执行方法</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *  其他调用方法操作都会被限制阻塞。保证实例化对象的唯一性。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * @return SingleDemo1 对象</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">SingleDemo1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> sd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            sd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleDemo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> sd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"72-饿汉模式\"><a class=\"anchor\" href=\"#72-饿汉模式\">#</a> 7.2 饿汉模式</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_single</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 饿汉模式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 是 Spring 管理 Bean 单例对象 默认方式</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author Anonymous 2023/8/8 17:11</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleDemo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * private 对外私有不能随意获取</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * static 保证当前对象在整个程序中唯一，同时利用类加载机制在程序准备阶段，对当前类型进行实例化对象操作。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * final 可以认为当前对象是一个带有名称的常量，也是一个唯一限制</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 后续的 getInstance 获取过程中，直接获取在类文件加载阶段实例化的单例对象。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 【优点】饿汉模式自带线程安全，性能相较于懒汉模式较高</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SingleDemo2</span> <span class=\"token constant\">SD</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleDemo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingleDemo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingleDemo2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">SD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"day17函数式接口和-lambda\"><a class=\"anchor\" href=\"#day17函数式接口和-lambda\">#</a> day17 函数式接口和 Lambda</h2>\n<h4 id=\"1-函数式接口\"><a class=\"anchor\" href=\"#1-函数式接口\">#</a> 1. 函数式接口</h4>\n<h5 id=\"11-要求\"><a class=\"anchor\" href=\"#11-要求\">#</a> 1.1 要求</h5>\n<blockquote>\n<ul>\n<li>要求当前接口有且只有一个尚未完成的缺省属性为 pubilc abstract 修饰方法</li>\n<li>开发要求函数式接口必须有 @FunctionalInterface 注解约束，开始函数式接口严格格式检查</li>\n</ul>\n</blockquote>\n<h5 id=\"12-predicate-函数式接口\"><a class=\"anchor\" href=\"#12-predicate-函数式接口\">#</a> 1.2 Predicate 函数式接口</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 可以用于条件判断操作根据用户指定的数据类型，自行完成判断条件，给予</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    * boolean 类型数据反馈，满足其他功能</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    * </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    * @param t 泛型数据类型，可以是用户约束的任意一个数据类型</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    * @return 返回值为 boolean，可以自行完成对于当前数据的判断约束条件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>案例代码和 Lambda 引入</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_fi</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Predicate</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collectors</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @author Anonymous 2023/8/9 16:05</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> students <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        Predicate 接口中尚未实现的方法</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            boolean test (T t);</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            参数</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                1. 参数个数 1 个</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                2. 参数类型 当前情况下，泛型对应的具体数据类型为 Student 类型</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                3. 参数顺序 一个参数</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            返回值类型:</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                boolean 要求当前 Lambda 表达式必须返回一个 boolean 类型结果</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        Lambda 表达式基本格式:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            (临时参数变量) -> &#123;Lambda 表达式对应方法，方法体实现内容，功能内容&#125;;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        当前 Predicate 接口 Lambda 表达式实现</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            (stu) -> &#123;return stu.getAge () &lt; 15;&#125;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        Lambda 表达式简化 / 优化</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            1. 参数有且只有一个，小括号可以省略</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            2. 方法体 / 功能内容有且只有一行，大括号可以省略，return 可以省略</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            (stu) -> &#123;return stu.getAge () &lt; 15;&#125;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            ==></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            stu -> stu.getAge () &lt; 15</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token function\">filterStudentArray</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">return</span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        list1<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token function\">filterStudentArray</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        list2<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filterStudentArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> filter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            Predicate 过滤器 / 判断器接口中的 test 方法来完成针对于 Student 数据信息</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            过滤限制操作，满足条件，放入到 studentList 集合中</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                studentList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">return</span> studentList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>[toc]</p>\n<h2 id=\"线程状态线程通信和线程池\"><a class=\"anchor\" href=\"#线程状态线程通信和线程池\">#</a> 线程状态，线程通信和线程池</h2>\n<h4 id=\"1-线程状态\"><a class=\"anchor\" href=\"#1-线程状态\">#</a> 1. 线程状态</h4>\n<p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay17-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%5Cimg%5C01-%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.png\" alt=\"\" /></p>\n<h4 id=\"2-线程通信-wait-notify\"><a class=\"anchor\" href=\"#2-线程通信-wait-notify\">#</a> 2. 线程通信 wait notify</h4>\n<h5 id=\"21-相关方法\"><a class=\"anchor\" href=\"#21-相关方法\">#</a> 2.1 相关方法</h5>\n<blockquote>\n<p>以下方法为 Object 类相关方法，Java 中的所有类型都可以调用执行以下方法。都是线程相关操作方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t【通过锁对象调用】</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 在哪一个线程中执行，对应线程进入【等待阻塞】状态，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 开启锁对象，允许其他线程进入 <span class=\"token constant\">CPU</span> 执行权抢占操作。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token number\">3.</span> 当前等待阻塞没有时间限制，需要其他线程通过唤醒操作回到可运行状态</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t【通过锁对象调用】</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 在哪一个线程中执行，对应线程进入【等待阻塞】状态，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 开启锁对象，允许其他线程进入 <span class=\"token constant\">CPU</span> 执行权抢占操作。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token number\">3.</span> 如果当前线程达到指定时间，自动回到【可运行状态】</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token number\">4.</span> 未到指定时间的情况下，中途被其他线程唤醒也可以进入【可运行状态】</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t【通过锁对象调用】</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 唤醒与当前锁对象相关，同时处于【等待阻塞】状态任意一个线程。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 同时开启锁对象，允许其他线程进入 <span class=\"token constant\">CPU</span> 执行权抢占操作。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t【通过锁对象调用】</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token number\">1.</span> 唤醒与当前锁对象相关，同时处于【等待阻塞】状态所有线程。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token number\">2.</span> 同时开启锁对象，允许其他线程进入 <span class=\"token constant\">CPU</span> 执行权抢占操作。</pre></td></tr></table></figure><h5 id=\"22-生产者和消费者\"><a class=\"anchor\" href=\"#22-生产者和消费者\">#</a> 2.2 生产者和消费者</h5>\n<h6 id=\"221-图例分析\"><a class=\"anchor\" href=\"#221-图例分析\">#</a> 2.2.1 图例分析</h6>\n<p><img data-src=\"E:%5Cqneiwangtong%5CJavaEE2310%5CDay17-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%5Cimg%5C02-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E5%9B%BE%E4%BE%8B.png\" alt=\"\" /></p>\n<h6 id=\"222-商品作为共享资源处理\"><a class=\"anchor\" href=\"#222-商品作为共享资源处理\">#</a> 2.2.2 商品作为共享资源处理</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 商品对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Goods</span> goods <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Goods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"科尼塞克\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000000</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 生产者和消费者对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Supplier</span> supplier <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Supplier</span><span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Consumer</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    supplier<span class=\"token punctuation\">.</span><span class=\"token function\">showGoods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    consumer<span class=\"token punctuation\">.</span><span class=\"token function\">showGoods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"223-代码实现\"><a class=\"anchor\" href=\"#223-代码实现\">#</a> 2.2.3 代码实现</h6>\n<blockquote>\n<p>Consumer 消费者</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 消费者</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/8/9 10:14</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * final 修饰 goods 成员变量，保证当前成员变量唯一</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 同时限制使用有参数构造方法对当前 Goods 进行实例化对象操作</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 保证生产者和消费者之间使用的 Goods 对象为同一个对象</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Goods</span> goods<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Goods</span> goods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>goods <span class=\"token operator\">=</span> goods<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showGoods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 判断商品是否可以购买  goods.isProduct () == false</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>goods<span class=\"token punctuation\">.</span><span class=\"token function\">isProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">// 买买买！！！</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 消费者以\"</span> <span class=\"token operator\">+</span> goods<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"价格购买了\"</span> <span class=\"token operator\">+</span> goods<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token comment\">// 修改生产标记</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    goods<span class=\"token punctuation\">.</span><span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token comment\">// 唤醒生产者</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"唤醒生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    goods<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token comment\">// 消费者进入休眠状态</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 消费者进入休眠状态\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        goods<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Supplier 生产者</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 生产者</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 需要加锁</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *      防止出现生产者在生产过程中，被消费者抢占 CPU 执行权。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *      有可能会导致</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *          商品情况为 五菱宏光 Mini 29800</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *          再次生产时，商品名称刚刚修改，价格未修改的情况下，消费者前来购买</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *          商品情况为 红旗 L5  29800</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *          【商品价格错误】</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @author Anonymous 2023/8/9 10:15</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Supplier</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * final 修饰 goods 成员变量，保证当前成员变量唯一</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 同时限制使用有参数构造方法对当前 Goods 进行实例化对象操作</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 保证生产者和消费者之间使用的 Goods 对象为同一个对象</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Goods</span> goods<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Supplier</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Goods</span> goods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>goods <span class=\"token operator\">=</span> goods<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showGoods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token comment\">// 判断当前商品是否需要生产</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">.</span><span class=\"token function\">isProduct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token comment\">// 生产过程</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        goods<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红旗 L5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        goods<span class=\"token punctuation\">.</span><span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">12000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        goods<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"五菱宏光 Mini\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        goods<span class=\"token punctuation\">.</span><span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">29800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者生产了\"</span> <span class=\"token operator\">+</span> goods<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"， 价格为：\"</span> <span class=\"token operator\">+</span> goods<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"元\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token comment\">// 修改生产标记</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    goods<span class=\"token punctuation\">.</span><span class=\"token function\">setProduct</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token comment\">// 唤醒消费者</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"唤醒消费者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    goods<span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token comment\">// 生产者进入休眠状态</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者进入休眠状态\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                        goods<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3-线程池\"><a class=\"anchor\" href=\"#3-线程池\">#</a> 3. 线程池</h4>\n<h5 id=\"31-生活案例\"><a class=\"anchor\" href=\"#31-生活案例\">#</a> 3.1 生活案例</h5>\n<blockquote>\n<p>餐厅服务员</p>\n<ul>\n<li>餐厅服务员最低人员要求，保障餐厅可以正常运营</li>\n<li>餐厅服务人员会根据当前就餐人数动态调整，顾客多，服务员同步添加。</li>\n<li>顾客过多，分发排号，用户等待。</li>\n<li>如果服务员在一定时间内没有任何的任务执行，服务员休息。</li>\n</ul>\n</blockquote>\n<h5 id=\"32-固定容量线程池\"><a class=\"anchor\" href=\"#32-固定容量线程池\">#</a> 3.2 固定容量线程池</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_threadpool</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 固定容量线程池</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @author Anonymous 2023/8/9 14:49</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        public static ExecutorService newFixedThreadPool (int nThreads);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            通过 Executors 类调用方法，创建线程对象个数固定的线程池对象</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> threadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> threadPool1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        Future&lt;?> submit (Runnable task);</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            ExecutorService 线程池对象提交任务方法，方法参数为 Runnable 接口实现类</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            Runnable 接口中核心方法是</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                void run ();</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            Lambda 表达式提交目标任务</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 执行任务中......\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 执行任务中......\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 执行任务中......\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">/* 展示当前 ThreadPool 相关信息</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        [Running, pool size = 5, active threads = 1, queued tasks = 0, completed tasks = 39]</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            Running                  线程状态</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            pool size = 5            当前线程池线程对象容量，</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            active threads = 1       目前正在执行任务的线程对象个数</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            queued tasks = 0         当前线程池尚未执行的任务个数，在【任务队列中】等待的任务个数</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            completed tasks = 39     已完成的任务个数</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadPool : \"</span> <span class=\"token operator\">+</span> threadPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> \" 执行任</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 执行任务中......\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 展示当前 ThreadPool 相关信息</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadPool : \"</span> <span class=\"token operator\">+</span> threadPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        void shutdown ();</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            ExecutorService 关闭线程池方法，会将任务队列中所有尚未执行的任务全部执行完毕之后</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            关闭线程池对象，无法再次添加新的任务</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">//        threadPool.shutdown();</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        List&lt;Runnable> shutdownNow ();</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            立即关闭，返回值内容是 List 集合中，尚未执行的 任务 Runnable 实现类对象 List 集合.</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            无法再次添加新的任务</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> runnables <span class=\"token operator\">=</span> threadPool<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownNow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>runnables<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"33-线程池相关-7-大参数\"><a class=\"anchor\" href=\"#33-线程池相关-7-大参数\">#</a> 3.3 线程池相关 7 大参数</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                              <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                              <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                              <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                              <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                              <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                              <span class=\"token class-name\">RejectedExecutionHandler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>您提供的代码是Java中 ThreadPoolExecutor 类的构造函数。它使用给定的初始参数创建 ThreadPoolExecutor 的新实例。 \n以下是参数的解释： \n-  【corePoolSize】 ：保持在池中的线程数，即使它们是空闲的，除非设置了 allowCoreThreadTimeOut 。 \n-  【maximumPoolSize】 ：允许在池中的最大线程数。 \n-  keepAliveTime ：当线程数大于核心线程数时，多余的空闲线程在终止之前等待新任务的最长时间。 \n-  unit ： keepAliveTime 参数的时间单位。 \n-  workQueue ：在执行任务之前用于保存任务的队列。此队列仅保存由 execute 方法提交的 Runnable 任务。 \t\t\tnewFixedThreadPool 固定容量线程池  任务队列形式 dBlockingQueue&lt;Runnable&gt;\n\t\tnewCachedThreadPool 缓冲/动态容量线程池 任务队列形式 SynchronousQueue&lt;Runnable&gt;\n\t\t\n-  threadFactory ：在执行器创建新线程时使用的工厂。 \n-  handler ：当执行由于线程限制和队列容量达到而被阻塞时使用的处理程序。 \n构造函数对参数进行一些验证，如果不满足任何条件，则抛出异常。 \n总体而言，该构造函数允许您使用特定的配置参数创建一个 ThreadPoolExecutor ，以管理用于并发执行任务的线程池。\n</code></pre>\n<h2 id=\"day18函数式接口lambda-和-stream-流\"><a class=\"anchor\" href=\"#day18函数式接口lambda-和-stream-流\">#</a> day18 函数式接口，Lambda 和 Stream 流</h2>\n<h4 id=\"1-函数式接口-2\"><a class=\"anchor\" href=\"#1-函数式接口-2\">#</a> 1. 函数式接口</h4>\n<h5 id=\"昨日重现-predicate-过滤判断限制\"><a class=\"anchor\" href=\"#昨日重现-predicate-过滤判断限制\">#</a> 昨日重现 Predicate 过滤 / 判断 / 限制</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Predicate</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"11-comparator-比较器接口\"><a class=\"anchor\" href=\"#11-comparator-比较器接口\">#</a> 1.1 Comparator 比较器接口</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 比较器接口对应的 compare 方法，可以提供给排序算法 (sort)，存储结构有排序需求 (Tree 树形结构)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    * </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    * @param o1 泛型限制数据类型对象 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    * @param o2 泛型限制数据类型对象 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    * @return 返回值为 int 类型，0 表示两者一致</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>案例代码和 Lambda 表达式</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_functionalInterface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author Anonymous 2023/8/10 9:49</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> students <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱SD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱SD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱SD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱SD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"某鸽\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱SD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱·SingleDog·鸽\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        分析 Lambda</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            int compare (T o1, T o2);</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            参数</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                1. 参数类型 当前泛型对应数据类型为 Student 类型</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                2. 参数个数 2 个</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                3. 参数顺序 都为 Student 类型</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            返回值:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                1. 数据类型 int</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                2. 需要从两个 Student 对象中得到一个 int 类型数据</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            Lambda 形式</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                (stu1, stu2) -> &#123;return stu1.getAge () - stu2.getAge ();&#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        selectSort (students, (stu1, stu2) -> &#123;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            return stu2.getAge () - stu1.getAge ();</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        &#125;);*/</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        Lambda 形式</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                (stu1, stu2) -> &#123;return stu1.getAge () - stu2.getAge ();&#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        简化优化:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            (stu1, stu2) ->  stu1.getAge () - stu2.getAge ()</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">,</span> stu2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> stu2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> stu1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        Arrays 数组工具类排序方法</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            public static &lt;T> void sort (T [] arr, Comparator&lt;T> comparator);</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token function\">getId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>stu1<span class=\"token punctuation\">,</span> stu2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> stu1<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> stu2<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     * 选择排序算法，支持任意类型数组，需要提供对应类型的 Comparator 比较器实现</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     * @param arr        任意类型数组</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     * @param comparator 需要满足当前数据类型的 Comparator 比较器实现</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * @param &lt;T>        自定义泛型</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>comparator<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    index <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token class-name\">T</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"12-filenamefilter-文件名过滤器接口\"><a class=\"anchor\" href=\"#12-filenamefilter-文件名过滤器接口\">#</a> 1.2 FilenameFilter 文件名过滤器接口</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FilenameFilter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 文件名过滤器方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    * </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    * @param dir       进行文件列表搜索的目标文件夹 File 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    * @param childName 目标文件夹中子文件和子文件夹的名称</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    * @return 根据限制条件返回 boolean 类型结果</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> dir<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> childName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_functionalInterface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * FilenameFilter 文件名过滤器接口</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author Anonymous 2023/8/10 10:48</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:/aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        Lambda 分析</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            boolean accept (File dir, String name);</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            参数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                1. 参数类型 File, String</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                2. 参数个数 2 个</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                3. 参数顺序 File, String</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            返回值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                1. 返回值类型 boolean</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                2. 要求 Lambda 表达式必须返回 boolean 类型数据</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            Lambda 格式:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                要求过滤保存所有的 Java 文件</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                (dir, name) -> &#123;return new File (dir, name).isFile () &amp;&amp; name.endsWith (\".java\");&#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            Lambda 优化 / 简化</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                (dir, name) -> new File (dir, name).isFile () &amp;&amp; name.endsWith (\".java\")</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> listFiles <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">File</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> listFiles2 <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 断言！！！判断的言论</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">assert</span> listFiles <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>listFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">assert</span> listFiles2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>listFiles2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"13-functiont-r-转换器接口重点\"><a class=\"anchor\" href=\"#13-functiont-r-转换器接口重点\">#</a> 1.3 Function&lt;T, R&gt; 转换器接口【重点】</h5>\n<blockquote>\n<ul>\n<li>可以对应 Java 中任意返回值类型，任意参数类型，要求参数只有一个的任意方法。</li>\n<li>Function 函数式接口更多的情况下是需要通过【方法引用操作】</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 转换器接口，可以将 T 类型转换为目标 R 类型，T 和 R 对应的具体数据类型都有用户自行决定</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    * @param t 用户指定的参数类型</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    * @return 返回值类型可以进行明确约束，也可以通过 Lambda 表达式返回数据具体情况约束 R 对应具体数据类型</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">R</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_functionalInterface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Function</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Anonymous 2023/8/10 11:05</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱·SingleDog·鸽\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Lambda 表达式分析</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            R apply (T t);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            参数</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                1. 参数类型 Student</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                2. 参数个数 1 个</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                3. 参数顺序 Student</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            返回值</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                1. 泛型明确约束返回值类型 R 对应 String 类型</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                2. 要求 Lambda 操作需要将 Student 类型转换为 String</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            Lambda 格式:</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                (stu) -> &#123;return stu.toString ();&#125;;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            Lambda 简化 / 优化</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                stu -> stu.toString ()</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token function\">studentInfo</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token function\">studentInfo</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">,</span> stu <span class=\"token operator\">-></span> stu<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * 方法工功能是将 Student 类型数据转换为字符串形式，转换方法由 Function 接口约束提供</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     * @param stu      Student 学生对象类型</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * @param function 转换 Function 接口实现</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     * @return Student 学生对象信息对应的字符串数据内容</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">studentInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> stu<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> function<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"14-consumer-消费者处理器接口\"><a class=\"anchor\" href=\"#14-consumer-消费者处理器接口\">#</a> 1.4 Consumer 消费者 / 处理器接口</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Consumer</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t* 消费者 / 处理器接口方法，需要用户提供目标的数据类型，作为最终的处理方式，可以满足</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t* 日志记录，信息存储，数据发送操作。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t* </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t* @param t 用户约束对应的数据形式。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_functionalInterface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Consumer</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * Consumer 消费者 / 处理器接口</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author Anonymous 2023/8/10 11:18</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"方法引用 Function Reference\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        Lambda 表达式分析</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            void accept (T t);</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            参数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                1. 参数类型 String</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                2. 参数个数 1 个</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                3. 参数顺序 String</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            返回值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                1. 无返回值！！！！</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            Lambda 形式</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                (s) -> &#123;....&#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> s <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// Lambda 内容，代码量过大，并且功能具备复用性！！！可以采用方法引用优化！</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./data/source.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bos <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        bos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        方法引用</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            重点:</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                1. 方法的参数类型和返回值类型满足所需</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                2. 确定方法的调用方式</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    常用【类名调用】【类对象调用】</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                3. Java 会自行将方法所需参数给予方法引用对应的方法填充</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                4. JDK 1.8 以上版本支持</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Demo4</span><span class=\"token operator\">::</span><span class=\"token function\">saveDataToFile</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        handler<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveDataToFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./data/source.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bos <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    bos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"15-supplier-生产者接口获取器接口\"><a class=\"anchor\" href=\"#15-supplier-生产者接口获取器接口\">#</a> 1.5 Supplier 生产者接口 / 获取器接口</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_functionalInterface</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Supplier</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * Supplier 生产者接口</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author Anonymous 2023/8/10 14:29</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> maxIndex <span class=\"token operator\">=</span> <span class=\"token function\">getMaxIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// Lambda 表达式大括号可以使用所在方法的局部变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>maxIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxIndex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2-stream\"><a class=\"anchor\" href=\"#2-stream\">#</a> 2. Stream</h4>\n<h5 id=\"21-概念\"><a class=\"anchor\" href=\"#21-概念\">#</a> 2.1 概念</h5>\n<blockquote>\n<ul>\n<li>流水线编程思路。流式编程，一点到底</li>\n<li>处理的主要数据都是【数组，集合】</li>\n<li>Stream 流操作涉及到，过滤，排序，转换，跳过，限制，去重，计数，转换最终集合形式。。。</li>\n</ul>\n</blockquote>\n<h5 id=\"22-stream-体验卡\"><a class=\"anchor\" href=\"#22-stream-体验卡\">#</a> 2.2 Stream 体验卡</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_stream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @author Anonymous 2023/8/10 14:43</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"羊肉炕馍\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"羊双肠\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"炸弹鸡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"炸弹鸡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"炸弹鸡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"炸弹鸡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黄家包子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黄家包子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黄家包子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"宝正瑧天津包子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"宝正瑧天津包子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"宝正瑧天津包子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"宝正瑧天津包子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"老马烧烤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘洋记全羊鲜汤文化路任寨北街\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"班记油泼面\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"五顺斋烤鸭文化路\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"东北饺子馆\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"永安街阿生哥柳州螺蛳粉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        获取 Stream 流对象，所有 Collection 接口的实现类都可以直接获取 Stream 流</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            Stream&lt;T> stream ();</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        stream<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 按照字符串字符个数升序排序</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 跳过前两个数据</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 限制当前 Stream 中最多 15 个数据</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 仅保留字符串字符个数 > 5</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 去重数据</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 展示</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"23-stream-相关方法\"><a class=\"anchor\" href=\"#23-stream-相关方法\">#</a> 2.3 Stream 相关方法</h5>\n<blockquote>\n<p>Stream 流获取方法</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t集合对象获取，<span class=\"token class-name\">Collection</span> 集合在 <span class=\"token constant\">JDK</span> <span class=\"token number\">1.8</span> 版本以上利用 <span class=\"token keyword\">default</span> 默认方法提供 <span class=\"token class-name\">Stream</span> 流对象获取方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">Arrays</span> 工具类方法，调用 stream 方法，将数组处理为 <span class=\"token class-name\">Stream</span> 流方式，对应的泛型有数组类型明确。</pre></td></tr></table></figure><blockquote>\n<p>Stream 过程方法 / 中间方法</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Stream</span> 对应的数据内容，跳过指定 n 个，删除前 n 个数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">Stream</span> 对应的数据内容，限制数据总长度为 n 个</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">Stream</span> 流过滤限制方法，需要提供 <span class=\"token class-name\">Predicate</span> 过滤器接口实现方式，过滤器接口核心方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t满足条件数据可以存储到 <span class=\"token class-name\">Stream</span> 中</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token class-name\">Stream</span> 流存储元素排序方法，要求存储元素内容必须有自然顺序，或者是 <span class=\"token class-name\">Comparable</span> 接口实现类，并且排序默认</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        为升序形式。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> com<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token class-name\">Stream</span> 流存储元素排序方法，通过 <span class=\"token class-name\">Comparator</span> 比较器接口提供对应的比较方式。要求实现的方法</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       \t<span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token class-name\">Stream</span> 流存储元素去重操作。通过存储元素的 equals 方法判断是否存在其他相同元素。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token class-name\">Stream</span> 流存储元素转换类型方法，可以按照 <span class=\"token class-name\">Function</span> 接口提供的规则，将目前存储的 <span class=\"token class-name\">T</span> 类型数据转换为目标 <span class=\"token class-name\">R</span> 类</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        型数据，<span class=\"token class-name\">Function</span> 接口要求实现的方法</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">R</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Stream 终结方法 / 终止方法</p>\n<ul>\n<li>以下方法返回值类型都不是 Stream 流</li>\n<li>以下方法一旦执行，当前 Stream 直接被关闭。无法继续使用。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">Stream</span> 流中对应的元素有多少个</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">Stream</span> 流中对应的元素，按照 <span class=\"token class-name\">Consumer</span> 接口规则进行逐一处理，最终处理方式，<span class=\"token class-name\">Consumer</span> 接口要求完成的方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Stream</span> 中存储的元素内容转换为 <span class=\"token class-name\">List</span> 集合返回</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> \t<span class=\"token class-name\">Stream</span> 中存储的元素内容转换为 <span class=\"token class-name\">Set</span> 集合返回</pre></td></tr></table></figure><h5 id=\"24-skip-and-limit\"><a class=\"anchor\" href=\"#24-skip-and-limit\">#</a> 2.4 skip and limit</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Stream 流操作的数据内容，对原数据内容没有任何的影响！！！</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"25-filter-and-distinct\"><a class=\"anchor\" href=\"#25-filter-and-distinct\">#</a> 2.5 filter and distinct</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"羊\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"包子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"26-sorted\"><a class=\"anchor\" href=\"#26-sorted\">#</a> 2.6 sorted</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_stream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_functionalInterface<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @author Anonymous 2023/8/10 15:52</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DDD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BCD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        sorted () 要求 Stream 流存储对应的数据类型必须有自然顺序或者</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        比较方式 Comparable 接口</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> students <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱SD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱SD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱SD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱某\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱SD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"某鸽\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱SD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"朱·SingleDog·鸽\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        sorted (Comparator&lt;T> com);</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            int compare (T o1, T o2);</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            T 对应 Student 类型</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        stream<span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"27-map\"><a class=\"anchor\" href=\"#27-map\">#</a> 2.7 map</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_stream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_functionalInterface<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanUtils</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @author Anonymous 2023/8/10 16:06</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"id=1,name=张三,age=16,gender=false\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">\"id=2,name=朱某,age=16,gender=true\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\"id=3,name=朱某,age=6,gender=true\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token string\">\"id=4,name=朱某,age=8,gender=true\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token string\">\"id=5,name=朱某,age=10,gender=true\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        方法引用 JDK1.8 以上有效</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            parseStudent 方法</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                参数是 String 类型</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                返回值为 Student 类型</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                满足当前 map 方法所需</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            parseStudent 是 static 修饰，通过类名调用</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>               Demo5::parseStudent</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentStream <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Demo5</span><span class=\"token operator\">::</span><span class=\"token function\">parseStudent</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        studentStream<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Student</span> <span class=\"token function\">parseStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//split= &#123;\"id=1\", \"name = 张三\", \"age=16\", \"gender=false\"&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> split<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 找到 = 对应的下标位置</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                给予符合 JavaBean 规定对象，指定成员变量名称，赋值数据</pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                @param bean      符合 JavaBean 规范对象</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                @param fieldName 指定成员变量名称</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                @param value     赋值使用的 String 类型数据</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                @throws NoSuchFieldException   没有指定成员变量异常</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                @throws IllegalAccessException 非法权限访问异常</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                public static void setProperty (Object bean, String fieldName, String value)</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">return</span> student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"28-countforeachcollect\"><a class=\"anchor\" href=\"#28-countforeachcollect\">#</a> 2.8 count，forEach，collect</h5>\n<blockquote>\n<p>以下 Stream 流方法都是终结方法，调用会导致 Stream 流关闭</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>b_stream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>a_functionalInterface<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collectors</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author Anonymous 2023/8/10 16:34</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo6</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">\"id=1,name=张三,age=16,gender=false\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\"id=2,name=朱某,age=16,gender=true\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token string\">\"id=3,name=朱某,age=6,gender=true\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token string\">\"id=4,name=朱某,age=8,gender=true\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token string\">\"id=5,name=朱某,age=10,gender=true\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        Consumer</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            forEach (Consumer&lt;T> handle)</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            void accept (T t);</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            方法引用分析</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                void println (String x)</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                调用者是 System.out，利用方法引用调用当前方法</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        stream<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Demo5</span><span class=\"token operator\">::</span><span class=\"token function\">parseStudent</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        补充方法:</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            public static &lt;T> List&lt;T> asList (T [] arr);</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            Arrays 数组工具类方法，可以将指定类型数据转换为指定存储类型的 List 集合</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strings <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3-方法引用\"><a class=\"anchor\" href=\"#3-方法引用\">#</a> 3. 方法引用</h4>\n<h5 id=\"31-使用前提\"><a class=\"anchor\" href=\"#31-使用前提\">#</a> 3.1 使用前提</h5>\n<blockquote>\n<ul>\n<li>方法参数必须是有一个函数式接口</li>\n<li>引用的方法需要明确方法的调用者和方法参数返回值情况是否满足函数式接口约束的方法所需。</li>\n<li>重点\n<ul>\n<li>方法调用者【类名】【类对象】</li>\n<li>方法的参数列表和返回值是否满足函数式接口约束方法情况。</li>\n<li>:: 方法引用特殊符号</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"32-案例\"><a class=\"anchor\" href=\"#32-案例\">#</a> 3.2 案例</h5>\n<blockquote>\n<p>Function&lt;T, R&gt; 转换器接口</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qfedu<span class=\"token punctuation\">.</span>c_fr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Function</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * Function&lt;T, R> 转换器接口</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 字符串转 Map&lt;String, Object></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author Anonymous 20 23/8/10 16:49</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"id=1,name=单身鸽,age=16,gender=true,address=学府花/佳/家/嘉园\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        重点:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            Function&lt;String, Map&lt;String, Object>> ===> Map&lt;String, Object> apply (String str);</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            根据当前接口所需方法情况选择目标方法</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            public static Map&lt;String, Object> toMap (String str)</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                参数和返回值类型都满足接口所需</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            当前 toMap 方法为 static 修饰方法，需要通过类名调用</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            方法引用:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                Demo1::toMap</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                调用者：：方法名</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token function\">parseMap</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Demo1</span><span class=\"token operator\">::</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">parseMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> fun<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> fun<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        split.length 直接明确当前 Map 双边队列键值对个数，和当前数组容量一致</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        不多不少刚刚好！！！</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>·</p>\n",
            "tags": [
                "Java后端",
                "Java",
                "Java基础",
                "Java"
            ]
        }
    ]
}